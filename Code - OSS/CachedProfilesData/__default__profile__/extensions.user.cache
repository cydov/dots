{"input":{"location":{"$mid":1,"external":"vscode-userdata:/home/cyd/.vscode-oss/extensions/extensions.json","path":"/home/cyd/.vscode-oss/extensions/extensions.json","scheme":"vscode-userdata"},"mtime":1702352019961,"profile":true,"profileScanOptions":{"bailOutWhenFileNotFound":true},"type":1,"excludeObsolete":true,"validate":true,"productVersion":"1.85.0","productDate":"2023-12-08T09:03:04.967Z","devMode":false,"language":"en","translations":{}},"result":[{"type":1,"identifier":{"id":"rust-lang.rust","uuid":"570e6089-b871-41df-9cf4-a723cb34ef01"},"manifest":{"name":"rust","displayName":"Rust","description":"Rust for Visual Studio Code (powered by Rust Language Server/Rust Analyzer). Provides lints, code completion and navigation, formatting and more.","version":"0.7.8","publisher":"rust-lang","icon":"rust-icon.png","galleryBanner":{"color":"#336356","theme":"dark"},"engines":{"vscode":"^1.43.0"},"license":"(MIT OR Apache-2.0)","repository":{"type":"git","url":"https://github.com/rust-lang/rls-vscode"},"bugs":{"url":"https://github.com/rust-lang/rls-vscode/issues"},"categories":["Programming Languages","Linters","Snippets","Formatters","Other"],"keywords":["rust","rust-lang","rls","multi-root ready"],"preview":true,"activationEvents":["onLanguage:rust","workspaceContains:Cargo.toml"],"main":"./out/src/extension.js","scripts":{"vscode:prepublish":"npm run check:version && npm run lint && npm run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","lint":"tslint --config ./tslint.json './src/**/*.ts'","test":"node ./out/test/runTest.js","prettier":"prettier **/*.ts","check:version":"node cmd/check-version.js","installDevExtension":"npm install && ./node_modules/.bin/vsce package -o ./out/rls-vscode-dev.vsix && code --install-extension ./out/rls-vscode-dev.vsix"},"dependencies":{"node-fetch":"^2.6.0","vscode-languageclient":"^6.0.0"},"devDependencies":{"@types/chai":"^4.2.11","@types/glob":"^7.1.1","@types/mocha":"^5.2.6","@types/node":"^12.8.1","@types/node-fetch":"^2.5.7","@types/vscode":"^1.43.0","chai":"^4.2.0","glob":"^7.1.4","mocha":"^6.2.3","prettier":"^1.19.1","tslint":"^5.14.0","tslint-config-prettier":"^1.18.0","typescript":"^3.8.3","vsce":"^1.63.0","vscode-test":"^1.3.0"},"contributes":{"languages":[{"id":"rust","extensions":[".rs"],"configuration":"./language-configuration.json"}],"snippets":[{"language":"rust","path":"./snippets/rust.json"}],"commands":[{"command":"rls.update","title":"Update the current Rust toolchain","description":"Use Rustup to the current Rust toolchain, along with its components","category":"Rust"},{"command":"rls.restart","title":"Restart the Rust server","description":"Sometimes, it's just best to try turning it off and on again","category":"Rust"},{"command":"rls.start","title":"Start the Rust server","description":"Start the Rust server (when rust-client.autoStartRls is false or when manually stopped)","category":"Rust"},{"command":"rls.stop","title":"Stop the Rust server","description":"Stop the Rust server for a workspace until manually started again","category":"Rust"}],"taskDefinitions":[{"type":"cargo","properties":{"subcommand":{"type":"string"}},"required":["subcommand"]}],"problemMatchers":[{"name":"rustc","owner":"rust","fileLocation":["relative","${workspaceRoot}"],"pattern":[{"regexp":"^(warning|warn|error)(\\[(.*)\\])?: (.*)$","severity":1,"message":4,"code":3},{"regexp":"^([\\s->=]*(.*):(\\d*):(\\d*)|.*)$","file":2,"line":3,"column":4},{"regexp":"^.*$"},{"regexp":"^([\\s->=]*(.*):(\\d*):(\\d*)|.*)$","file":2,"line":3,"column":4}]}],"configuration":{"type":"object","title":"Rust","properties":{"rust-client.engine":{"type":"string","enum":["rls","rust-analyzer"],"enumDescriptions":["Use the Rust Language Server (RLS)","Use the rust-analyzer language server (NOTE: not fully supported yet)"],"default":"rls","description":"The underlying LSP server used to provide IDE support for Rust projects.","scope":"window"},"rust-client.logToFile":{"type":"boolean","default":false,"description":"When set to true, RLS stderr is logged to a file at workspace root level. Requires reloading extension after change."},"rust-client.rustupPath":{"type":"string","default":"rustup","description":"Path to rustup executable. Ignored if rustup is disabled.","scope":"machine"},"rust-client.rlsPath":{"type":["string","null"],"default":null,"description":"Override RLS path. Only required for RLS developers. If you set this and use rustup, you should also set `rust-client.channel` to ensure your RLS sees the right libraries. If you don't use rustup, make sure to set `rust-client.disableRustup`.","scope":"machine"},"rust-client.revealOutputChannelOn":{"type":"string","enum":["info","warn","error","never"],"default":"never","description":"Specifies message severity on which the output channel will be revealed. Requires reloading extension after change."},"rust-client.updateOnStartup":{"type":"boolean","default":false,"description":"Update the Rust toolchain and its required components whenever the extension starts up."},"rust-client.autoStartRls":{"type":"boolean","default":true,"description":"Start RLS automatically when opening a file or project.","scope":"resource"},"rust-client.disableRustup":{"type":"boolean","default":false,"description":"Disable usage of rustup and use rustc/rls from PATH."},"rust-client.channel":{"anyOf":[{"type":"string"},{"type":"string","enum":["default","stable","beta","nightly"],"enumDescriptions":["Uses the same channel as your currently open project","Explicitly use the `stable` channel","Explicitly use the `beta` channel","Explicitly use the `nightly` channel"]}],"default":"default","description":"Rust channel to invoke rustup with. Ignored if rustup is disabled. By default, uses the same channel as your currently open project."},"rust-client.trace.server":{"type":"string","enum":["off","messages","verbose"],"default":"off","description":"Traces the communication between VS Code and the Rust language server.","scope":"window"},"rust-client.enableMultiProjectSetup":{"type":["boolean","null"],"default":null,"description":"Allow multiple projects in the same folder, along with removing the constraint that the cargo.toml must be located at the root. (Experimental: might not work for certain setups)"},"rust.sysroot":{"type":["string","null"],"default":null,"description":"--sysroot","scope":"resource"},"rust.target":{"type":["string","null"],"default":null,"description":"--target","scope":"resource"},"rust.rustflags":{"type":["string","null"],"default":null,"description":"Flags added to RUSTFLAGS.","scope":"resource"},"rust.clear_env_rust_log":{"type":"boolean","default":true,"description":"Clear the RUST_LOG environment variable before running rustc or cargo.","scope":"resource"},"rust.build_lib":{"type":["boolean","null"],"default":null,"description":"Specify to run analysis as if running `cargo check --lib`. Use `null` to auto-detect. (unstable)","scope":"resource"},"rust.build_bin":{"type":["string","null"],"default":null,"description":"Specify to run analysis as if running `cargo check --bin <name>`. Use `null` to auto-detect. (unstable)","scope":"resource"},"rust.cfg_test":{"type":"boolean","default":false,"description":"Build cfg(test) code. (unstable)","scope":"resource"},"rust.unstable_features":{"type":"boolean","default":false,"description":"Enable unstable features.","scope":"resource"},"rust.wait_to_build":{"type":["number","null"],"default":null,"description":"Time in milliseconds between receiving a change notification and starting build.","scope":"resource"},"rust.show_warnings":{"type":"boolean","default":true,"description":"Show warnings.","scope":"resource"},"rust.crate_blacklist":{"type":["array","null"],"default":["cocoa","gleam","glium","idna","libc","openssl","rustc_serialize","serde","serde_json","typenum","unicode_normalization","unicode_segmentation","winapi"],"description":"Overrides the default list of packages for which analysis is skipped.\nAvailable since RLS 1.38","scope":"resource"},"rust.build_on_save":{"type":"boolean","default":false,"description":"Only index the project when a file is saved and not on change.","scope":"resource"},"rust.features":{"type":"array","default":[],"description":"A list of Cargo features to enable.","scope":"resource"},"rust.all_features":{"type":"boolean","default":false,"description":"Enable all Cargo features.","scope":"resource"},"rust.no_default_features":{"type":"boolean","default":false,"description":"Do not enable default Cargo features.","scope":"resource"},"rust.racer_completion":{"type":"boolean","default":true,"description":"Enables code completion using racer.","scope":"resource"},"rust.clippy_preference":{"type":"string","enum":["on","opt-in","off"],"default":"opt-in","description":"Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive):\n - \"off\": Disable clippy lints.\n - \"on\": Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).\n - \"opt-in\": Only display the lints explicitly enabled in the code. Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.\nYou need to install clippy via rustup if you haven't already.","scope":"resource"},"rust.jobs":{"type":["number","null"],"default":null,"description":"Number of Cargo jobs to be run in parallel.","scope":"resource"},"rust.all_targets":{"type":"boolean","default":true,"description":"Checks the project as if you were running cargo check --all-targets (I.e., check all targets and integration tests too).","scope":"resource"},"rust.target_dir":{"type":["string","null"],"default":null,"description":"When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.","scope":"resource"},"rust.rustfmt_path":{"type":["string","null"],"default":null,"description":"When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one","scope":"resource"},"rust.build_command":{"type":["string","null"],"default":null,"description":"EXPERIMENTAL (requires `unstable_features`)\nIf set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. \nImplies `rust.build_on_save`: true.","scope":"resource"},"rust.full_docs":{"type":["boolean","null"],"default":null,"description":"Instructs cargo to enable full documentation extraction during save-analysis while building the crate.","scope":"resource"},"rust.show_hover_context":{"type":"boolean","default":true,"description":"Show additional context in hover tooltips when available. This is often the type local variable declaration.","scope":"resource"},"rust.rust-analyzer":{"type":"object","default":{},"description":"Settings passed down to rust-analyzer server","scope":"resource"},"rust.rust-analyzer.releaseTag":{"type":"string","default":"nightly","description":"Which binary release to download and use"},"rust.rust-analyzer.path":{"type":["string","null"],"default":null,"description":"When specified, uses the rust-analyzer binary at a given path"}}},"semanticTokenTypes":[{"id":"attribute","description":"Style for attributes"},{"id":"builtinType","description":"Style for builtin types","superType":"type"},{"id":"lifetime","description":"Style for lifetimes"},{"id":"typeAlias","description":"Style for type aliases","superType":"type"},{"id":"union","description":"Style for C-style untagged unions","superType":"type"},{"id":"unresolvedReference","description":"Style for names which can not be resolved due to compilation errors"},{"id":"formatSpecifier","description":"Style for {} placeholders in format strings"}],"semanticTokenModifiers":[{"id":"constant","description":"Style for compile-time constants"},{"id":"controlFlow","description":"Style for control flow keywords"},{"id":"mutable","description":"Style for mutable bindings"},{"id":"unsafe","description":"Style for unsafe operations"}],"semanticTokenScopes":[{"language":"rust","scopes":{"attribute":["meta.attribute.rust"],"builtinType":["support.type.primitive.rust"],"lifetime":["storage.modifier.lifetime.rust"],"typeAlias":["entity.name.type.typeAlias.rust"],"union":["entity.name.type.union.rust"],"struct":["entity.name.type.struct.rust"],"keyword":["keyword.other.rust"],"keyword.controlFlow":["keyword.control.rust"],"variable.constant":["variable.other.constant.rust"],"formatSpecifier":["punctuation.section.embedded.rust"],"*.mutable":["markup.underline"]}}]}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/rust-lang.rust-0.7.8-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"570e6089-b871-41df-9cf4-a723cb34ef01","publisherId":"cb14a7a7-a188-40bd-a953-e0a20757c5dd","publisherDisplayName":"rust-lang","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205564211,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"bungcip.better-toml","uuid":"464f4ac7-af65-4aa9-9907-4ba7fa419085"},"manifest":{"name":"better-toml","displayName":"Better TOML","description":"Better TOML Language support","author":"Gigih Aji Ibrahim <bungcip@gmail.com>","icon":"icon.png","version":"0.3.2","publisher":"bungcip","license":"MIT","homepage":"https://github.com/bungcip/better-toml/blob/master/README.md","repository":{"type":"git","url":"https://github.com/bungcip/better-toml.git"},"bugs":{"url":"https://github.com/bungcip/better-toml/issues","email":"bungcip@gmail.com"},"engines":{"vscode":"^1.18.0"},"categories":["Languages"],"keywords":["toml"],"activationEvents":["onLanguage:toml"],"main":"./out/src/extension","contributes":{"languages":[{"id":"toml","aliases":["TOML","toml"],"extensions":[".toml"],"mimetypes":["text/x-toml"],"configuration":"./language-configuration.json"}],"grammars":[{"language":"toml","scopeName":"source.toml","path":"./syntaxes/TOML.tmLanguage"},{"scopeName":"markdown.toml.frontmatter.codeblock","path":"./syntaxes/TOML.frontMatter.tmLanguage","injectTo":["text.html.markdown"]}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"dependencies":{"vscode-languageclient":"^2.6.0","vscode-languageserver":"^2.6.0","toml":"^2.3.3"},"devDependencies":{"typescript":"2.5.2","vscode":"^1.0.3","mocha":"^3.1.2","@types/node":"^6.0.46","@types/mocha":"^2.2.32"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/bungcip.better-toml-0.3.2-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"464f4ac7-af65-4aa9-9907-4ba7fa419085","publisherId":"87bfa971-0ee5-4ec2-afdb-1d26a8959fa4","publisherDisplayName":"bungcip","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205587171,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"serayuzgur.crates","uuid":"6a95a3fd-3a5d-4326-b8ab-1b1653b1f183"},"manifest":{"name":"crates","displayName":"crates","description":"Helps Rust developers managing dependencies with Cargo.toml.","version":"0.6.5","publisher":"serayuzgur","author":{"name":"serayuzgur","email":"serayuzgur@gmail.com"},"license":"SEE LICENSE IN LICENSE","bugs":{"url":"https://github.com/serayuzgur/crates/issues","email":"serayuzgur@gmail.com"},"homepage":"https://github.com/serayuzgur/crates/blob/master/README.md","engines":{"vscode":"^1.79.1"},"repository":{"type":"git","url":"https://github.com/serayuzgur/crates.git"},"icon":"icon.png","keywords":["rust","crates","cargo","toml"],"categories":["Programming Languages","Other"],"activationEvents":["onLanguage:toml","workspaceContains:Cargo.toml"],"contributes":{"commands":[{"command":"crates.replaceVersion","title":"Do not call manually ! Replace Version of the provided dependency","category":"👆 Crates"},{"command":"crates.retry","title":"Retry to fetch Cargo.toml","category":"👆 Crates"},{"command":"crates.updateAll","title":"Update All dependencies of the Cargo.toml","category":"👆 Crates"}],"configuration":{"type":"object","title":"Crates","properties":{"crates.listPreReleases":{"type":"boolean","scope":"resource","default":false,"description":"If true, pre-release versions will be available."},"crates.indexServerURL":{"type":"string","scope":"resource","description":"URL of the index server. Default value goes to official sparse index. Alternative values would be onpremise index servers (e.g. https://api.crates-vsc.space).","default":"https://index.crates.io"},"crates.errorDecorator":{"type":"string","scope":"resource","default":"❗️❗️❗️","description":"The text to show when a dependency has errors."},"crates.errorDecoratorCss":{"type":"object","default":null,"properties":{"after":{"type":"object","default":null,"scope":"resource","description":"Text styling","properties":{"color":{"type":"string","scope":"resource","default":"#ffffffff","format":"color","description":"css color"},"border":{"type":"string","scope":"resource","default":"2px ","description":"css border"},"backgroundColor":{"type":"string","scope":"resource","default":"#00000000","format":"color","description":"css background-color"}}},"description":"Text that appears at the end of the line"},"description":"CSS to be applied to a line when there is a dependency error"},"crates.incompatibleDecorator":{"type":"string","scope":"resource","default":"❌ ${version}","description":"The text template to show when a dependency is not semver compatible. ${version} will be replaced by the latest version info."},"crates.incompatibleDecoratorCss":{"type":"object","default":null,"properties":{"after":{"type":"object","default":null,"scope":"resource","description":"Text styling","properties":{"color":{"type":"string","scope":"resource","default":"#ffffffff","format":"color","description":"css color"},"border":{"type":"string","scope":"resource","default":"","description":"css border"},"backgroundColor":{"type":"string","scope":"resource","default":"#00000000","format":"color","description":"css background-color"}}}},"description":"CSS to be applied to an incompatible line"},"crates.compatibleDecorator":{"type":"string","scope":"resource","default":"✅","description":"The text template to show when a dependency is semver compatible. ${version} will be replaced by the latest version info."},"crates.compatibleDecoratorCss":{"type":"object","default":null,"properties":{"after":{"type":"object","default":null,"scope":"resource","description":"Text styling","properties":{"color":{"type":"string","scope":"resource","default":"#ffffffff","format":"color","description":"css color"},"border":{"type":"string","scope":"resource","default":null,"description":"css border"},"backgroundColor":{"type":"string","scope":"resource","default":"#00000000","format":"color","description":"css background-color"}}}},"description":"CSS to be applied to a compatible line"}}}},"main":"./out/main.js","scripts":{"vscode:prepublish":"npm run esbuild-base -- --minify","esbuild-base":"esbuild ./src/extension.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --metafile=meta.json","esbuild":"npm run esbuild-base -- --sourcemap","esbuild-watch":"npm run esbuild-base -- --sourcemap --watch","test-compile":"tsc -p ./"},"types":"vscode","devDependencies":{"@types/glob":"^8.1.0","@types/mocha":"^10.0.1","@types/node":"20.3.3","@types/vscode":"^1.79.1","@typescript-eslint/eslint-plugin":"^5.60.1","@typescript-eslint/parser":"^5.60.1","@vscode/test-electron":"^2.3.3","esbuild":"0.18.11","eslint":"^8.44.0","glob":"^10.3.1","mocha":"^10.2.0","typescript":"^5.1.6"},"dependencies":{"node-cache":"5.1.2","semver":"7.5.3"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/serayuzgur.crates-0.6.5-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"6a95a3fd-3a5d-4326-b8ab-1b1653b1f183","publisherId":"f3db93d2-daa2-4a16-a789-41ffbe82294a","publisherDisplayName":"serayuzgur","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205598183,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"fkrull.gtk-dark-titlebar","uuid":"658c0ca9-b362-4b1c-8436-61de79e55f49"},"manifest":{"name":"gtk-dark-titlebar","version":"1.3.0","publisher":"fkrull","displayName":"GTK Dark Title Bar","description":"Match the GNOME title bar colour to your VS Code theme","license":"BSD-2-Clause","author":{"name":"Felix Krull"},"keywords":["titlebar","gnome shell","gnome-shell","gnome","dark titlebar"],"homepage":"https://github.com/fkrull/vscode-gtk-dark-titlebar","bugs":"https://github.com/fkrull/vscode-gtk-dark-titlebar/issues","repository":{"type":"git","url":"https://github.com/fkrull/vscode-gtk-dark-titlebar.git"},"engines":{"vscode":"^1.32.0"},"categories":["Other"],"icon":"images/icon.png","galleryBanner":{"color":"#2C3133","theme":"dark"},"main":"./out/src/extension","activationEvents":["*"],"extensionKind":["ui"],"contributes":{"configuration":{"title":"GTK title bar settings","properties":{"gtkTitleBar.mode":{"type":"string","enum":["auto","light","dark"],"default":"auto","description":"Specifies the theme for the GTK title bar."}}}},"scripts":{"vscode:prepublish":"npm run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","pretest":"npm run compile","test":"node ./out/test/runTest.js","package":"vsce package --allow-star-activation"},"devDependencies":{"@types/mocha":"^10.0.0","@types/node":"^18.8.5","@types/vscode":"^1.32.0","@vscode/test-electron":"^2.1.5","mocha":"^10.0.0","ovsx":"^0.5.1","typemoq":"^2.1.0","typescript":"^4.2.3","vsce":"^2.11.0"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/fkrull.gtk-dark-titlebar-1.3.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"658c0ca9-b362-4b1c-8436-61de79e55f49","publisherId":"3847dfb7-632f-4db7-83c8-740ddeacde78","publisherDisplayName":"fkrull","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205650087,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"golang.go","uuid":"d6f6cfea-4b6f-41f4-b571-6ad2ab7918da"},"manifest":{"name":"go","displayName":"Go","version":"0.40.0","publisher":"golang","description":"Rich Go language support for Visual Studio Code","author":{"name":"Go Team at Google"},"license":"MIT","icon":"media/go-logo-blue.png","categories":["Programming Languages","Snippets","Linters","Debuggers","Formatters","Testing"],"galleryBanner":{"color":"#F2F2F2","theme":"light"},"private":true,"repository":{"type":"git","url":"https://github.com/golang/vscode-go"},"bugs":{"url":"https://github.com/golang/vscode-go/issues"},"keywords":["multi-root ready","golang","gopls"],"scripts":{"clean":"rm -rf ./dist/* && rm -rf ./out/* && rm *.vsix","package":"npx vsce package","vscode:prepublish":"npm run compile","bundle":"esbuild src/goMain.ts debugAdapter=src/debugAdapter/goDebug.ts --bundle --outdir=dist --external:vscode --format=cjs --platform=node","bundle-dev":"npm run bundle -- --sourcemap","bundle-watch":"npm run bundle -- --sourcemap --watch","test-compile":"tsc -p ./","compile":"npm run bundle","watch":"tsc -watch -p ./","test":"npm run test-compile && node ./out/test/runTest.js","lint":"gts lint src test","fix-lint":"gts fix src test","unit-test":"npm run test-compile && node ./node_modules/mocha/bin/_mocha -u tdd --timeout 5000 --colors ./out/test/unit","format":"prettier --write \"src/**/*.ts\" \"test/**/*.ts\""},"extensionDependencies":[],"dependencies":{"diff":"4.0.2","glob":"7.1.7","json-rpc2":"2.0.0","moment":"2.29.4","semver":"7.3.4","tree-kill":"file:third_party/tree-kill","vscode-debugadapter":"1.45.0","vscode-debugprotocol":"1.45.0","vscode-languageclient":"8.1.0","vscode-languageserver-protocol":"3.17.3","vscode-uri":"3.0.3","web-request":"1.0.7"},"devDependencies":{"@types/adm-zip":"0.4.33","@types/fs-extra":"8.1.1","@types/glob":"7.1.3","@types/mocha":"7.0.2","@types/node":"13.13.46","@types/semver":"7.3.4","@types/sinon":"9.0.11","@types/vscode":"1.67.0","@vscode/debugadapter-testsupport":"1.58.0","@vscode/test-electron":"2.2.0","@vscode/vsce":"2.19.0","adm-zip":"0.4.16","esbuild":"0.17.10","fs-extra":"9.1.0","get-port":"5.1.1","gts":"4.0.0","mocha":"9.2.2","prettier":"2.2.1","sinon":"9.2.4","typescript":"4.6.4","yarn":"1.22.10"},"engines":{"vscode":"^1.75.0","node":">=12.0.0"},"activationEvents":["onLanguage:go","workspaceContains:*.go","workspaceContains:*/*.go","workspaceContains:*/*/*.go","onDebugInitialConfigurations","onDebugResolve:go","onWebviewPanel:welcomeGo"],"main":"./dist/goMain.js","capabilities":{"virtualWorkspaces":false,"untrustedWorkspaces":{"supported":"limited","restrictedConfigurations":["go.alternateTools","go.gopath","go.goroot","go.inferGopath","go.toolsGopath","go.toolsEnvVars","go.toolsManagement.go"]}},"contributes":{"languages":[{"id":"go","extensions":[".go"],"aliases":["Go"]},{"id":"go.mod","filenames":["go.mod","gopls.mod"],"aliases":["Go Module File"],"configuration":"./languages/go.mod.language-configuration.json"},{"id":"go.work","filenames":["go.work"],"aliases":["Go Work File"],"configuration":"./languages/go.mod.language-configuration.json"},{"id":"go.sum","filenames":["go.sum"],"aliases":["Go Checksum File"]},{"id":"gotmpl","extensions":[".tmpl",".gotmpl"],"aliases":["Go Template File"]}],"grammars":[{"language":"go.mod","scopeName":"go.mod","path":"./syntaxes/go.mod.tmGrammar.json"},{"language":"go.work","scopeName":"go.mod","path":"./syntaxes/go.mod.tmGrammar.json"},{"language":"go.sum","scopeName":"go.sum","path":"./syntaxes/go.sum.tmGrammar.json"}],"snippets":[{"language":"go","path":"./snippets/go.json"}],"configurationDefaults":{"[go]":{"editor.insertSpaces":false,"editor.formatOnSave":true,"editor.codeActionsOnSave":{"source.organizeImports":true}}},"commands":[{"command":"go.gopath","title":"Go: Current GOPATH","description":"See the currently set GOPATH."},{"command":"go.goroot","title":"Go: Current GOROOT","description":"See the currently set GOROOT."},{"command":"go.locate.tools","title":"Go: Locate Configured Go Tools","description":"List all the Go tools being used by this extension along with their locations."},{"command":"go.test.cursor","title":"Go: Test Function At Cursor","description":"Runs a unit test at the cursor."},{"command":"go.test.cursorOrPrevious","title":"Go: Test Function At Cursor or Test Previous","description":"Runs a unit test at the cursor if one is found, otherwise re-runs the last executed test."},{"command":"go.subtest.cursor","title":"Go: Subtest At Cursor","description":"Runs a sub test at the cursor."},{"command":"go.debug.subtest.cursor","title":"Go: Debug Subtest At Cursor","description":"Debug a sub test at the cursor."},{"command":"go.benchmark.cursor","title":"Go: Benchmark Function At Cursor","description":"Runs a benchmark at the cursor."},{"command":"go.debug.cursor","title":"Go: Debug Test At Cursor","description":"Debug test at the cursor."},{"command":"go.test.file","title":"Go: Test File","description":"Runs all unit tests in the current file."},{"command":"go.test.package","title":"Go: Test Package","description":"Runs all unit tests in the package of the current file."},{"command":"go.debug.toggleHideSystemGoroutines","title":"Go: Toggle Hide System Goroutines","description":"Toggles hiding the system goroutines from the active debug session call stack view."},{"command":"go.test.refresh","title":"Go Test: Refresh","description":"Refresh a test in the test explorer. Only available as a context menu option in the test explorer.","category":"Test","icon":"$(refresh)"},{"command":"go.test.showProfiles","title":"Go Test: Show Last Profile","description":"Show last captured profile","category":"Test"},{"command":"go.test.captureProfile","title":"Go Test: Profile","description":"Run a test and capture a profile","category":"Test"},{"command":"go.test.deleteProfile","title":"Go Test: Delete Profile","shortTitle":"Delete","description":"Delete selected profile","category":"Test"},{"command":"go.test.showProfileFile","title":"Go: Show pprof file","description":"Internal use. Open a pprof profile file."},{"command":"go.benchmark.package","title":"Go: Benchmark Package","description":"Runs all benchmarks in the package of the current file."},{"command":"go.benchmark.file","title":"Go: Benchmark File","description":"Runs all benchmarks in the current file."},{"command":"go.test.workspace","title":"Go: Test All Packages In Workspace","description":"Runs all unit tests from all packages in the current workspace."},{"command":"go.test.previous","title":"Go: Test Previous","description":"Re-runs the last executed test."},{"command":"go.debug.previous","title":"Go: Debug Previous","description":"Re-runs the last debugged test run through a codelens or \"Go: Debug Test at Cursor\" command."},{"command":"go.test.coverage","title":"Go: Toggle Test Coverage In Current Package","description":"Displays test coverage in the current package."},{"command":"go.test.generate.package","title":"Go: Generate Unit Tests For Package","description":"Generates unit tests for the current package"},{"command":"go.test.generate.file","title":"Go: Generate Unit Tests For File","description":"Generates unit tests for the current file"},{"command":"go.test.generate.function","title":"Go: Generate Unit Tests For Function","description":"Generates unit tests for the selected function in the current file"},{"command":"go.impl.cursor","title":"Go: Generate Interface Stubs","description":"Generates method stub for implementing the provided interface and inserts at the cursor."},{"command":"go.extractServerChannel","title":"Go: Extract Language Server Logs To Editor","description":"Extract logs in the `gopls (server)` output channel to the editor."},{"command":"go.welcome","title":"Go: Welcome","description":"Open the welcome page for the Go extension."},{"command":"go.toggle.gc_details","title":"Go: Toggle gc details","description":"Toggle the display of compiler optimization choices"},{"command":"go.import.add","title":"Go: Add Import","description":"Add an import declaration"},{"command":"go.add.package.workspace","title":"Go: Add Package to Workspace","description":"Add a package from the imports list to the workspace."},{"command":"go.tools.install","title":"Go: Install/Update Tools","description":"install/update the required go packages"},{"command":"go.toggle.test.file","title":"Go: Toggle Test File","description":"Toggles between file in current active editor and the corresponding test file."},{"command":"go.vulncheck.toggle","title":"Go: Toggle Vulncheck","description":"Toggle the display of vulnerability analysis in dependencies."},{"command":"go.languageserver.maintain","title":"Go: Start language server's maintainer interface","description":"Start the Go language server's maintainer interface (a web server)."},{"command":"go.add.tags","title":"Go: Add Tags To Struct Fields","description":"Add tags configured in go.addTags setting to selected struct using gomodifytags"},{"command":"go.remove.tags","title":"Go: Remove Tags From Struct Fields","description":"Remove tags configured in go.removeTags setting from selected struct using gomodifytags"},{"command":"go.show.commands","title":"Go: Show All Commands...","description":"Shows all commands from the Go extension in the quick pick"},{"command":"go.browse.packages","title":"Go: Browse Packages","description":"Browse packages and Go files inside the packages."},{"command":"go.get.package","title":"Go: Get Package","description":"Run `go get -v` on the package on the current line."},{"command":"go.playground","title":"Go: Run on Go Playground","description":"Upload the current selection or file to the Go Playground"},{"command":"go.lint.package","title":"Go: Lint Current Package","description":"Run linter in the package of the current file."},{"command":"go.lint.workspace","title":"Go: Lint Workspace","description":"Run linter in the current workspace."},{"command":"go.vet.package","title":"Go: Vet Current Package","description":"Run go vet in the package of the current file."},{"command":"go.vet.workspace","title":"Go: Vet Workspace","description":"Run go vet in the current workspace."},{"command":"go.build.package","title":"Go: Build Current Package","description":"Build the package of the current file."},{"command":"go.build.workspace","title":"Go: Build Workspace","description":"Build the current workspace."},{"command":"go.install.package","title":"Go: Install Current Package","description":"Install the current package."},{"command":"go.run.modinit","title":"Go: Initialize go.mod","description":"Run `go mod init` in the workspace folder."},{"command":"go.test.cancel","title":"Go: Cancel Running Tests","description":"Cancels running tests."},{"command":"go.apply.coverprofile","title":"Go: Apply Cover Profile","description":"Applies existing cover profile."},{"command":"go.languageserver.restart","title":"Go: Restart Language Server","description":"Restart the running instance of the language server"},{"command":"go.environment.choose","title":"Go: Choose Go Environment","description":"Choose a different Go version or binary for this project. (WIP)"},{"command":"go.survey.showConfig","title":"Go: Show Survey Configuration","description":"Show the current Go survey configuration"},{"command":"go.survey.resetConfig","title":"Go: Reset Survey Configuration","description":"Reset the current Go survey configuration history"},{"command":"go.workspace.resetState","title":"Go: Reset Workspace State","description":"Reset keys in workspace state to undefined."},{"command":"go.global.resetState","title":"Go: Reset Global State","description":"Reset keys in global state to undefined."},{"command":"go.explorer.refresh","title":"Go Explorer: Refresh","description":"Refresh the Go explorer. Only available as a menu item in the explorer.","category":"Explorer","icon":"$(refresh)"},{"command":"go.explorer.open","title":"Go Explorer: Open File","description":"Open a file from the Go explorer. Only available as a menu item in the explorer.","category":"Explorer","icon":"$(go-to-file)"},{"command":"go.workspace.editEnv","title":"Go: Edit Workspace Env","description":"Edit the Go Env for the active workspace.","icon":"$(settings-edit)","enablement":"workspaceFolderCount > 0"},{"command":"go.workspace.resetEnv","title":"Go: Reset Workspace Env","description":"Reset the Go Env for the active workspace.","icon":"$(settings-remove)","enablement":"workspaceFolderCount > 0"}],"breakpoints":[{"language":"go"}],"debuggers":[{"type":"go","label":"Go","program":"./dist/debugAdapter.js","runtime":"node","languages":["go"],"variables":{"pickProcess":"go.debug.pickProcess","pickGoProcess":"go.debug.pickGoProcess"},"configurationSnippets":[{"label":"Go: Launch package","description":"Debug/test the package in the program attribute","body":{"name":"${2:Launch Package}","type":"go","request":"launch","mode":"auto","program":"^\"\\${fileDirname}${1:}\""}},{"label":"Go: Launch file","description":"Debug the file in the program attribute","body":{"name":"${2:Launch file}","type":"go","request":"launch","mode":"debug","program":"^\"${1:\\${file\\}}\""}},{"label":"Go: Launch test function","description":"Debug the test function in the args, ensure program attributes points to right package","body":{"name":"${3:Launch test function}","type":"go","request":"launch","mode":"test","program":"^\"\\${workspaceFolder}${1:}\"","args":["-test.run","${2:MyTestFunction}"]}},{"label":"Go: Attach to local process","description":"Attach to an existing process by process ID","body":{"name":"${1:Attach to Process}","type":"go","request":"attach","mode":"local","processId":0}},{"label":"Go: Connect to server","description":"Connect to a remote headless debug server","body":{"name":"${1:Connect to server}","type":"go","request":"attach","mode":"remote","remotePath":"^\"\\${workspaceFolder}\"","port":2345,"host":"127.0.0.1"}}],"configurationAttributes":{"launch":{"required":[],"properties":{"debugAdapter":{"enum":["legacy","dlv-dap"],"description":"Select which debug adapter to use with this launch configuration.","default":"dlv-dap"},"program":{"type":"string","description":"Path to the program folder (or any go file within that folder) when in `debug` or `test` mode, and to the pre-built binary file to debug in `exec` mode. If it is not an absolute path, the extension interpretes it as a workspace relative path.","default":"${workspaceFolder}"},"mode":{"enum":["auto","debug","test","exec","replay","core"],"description":"One of `auto`, `debug`, `test`, `exec`, `replay`, `core`. In `auto` mode, the extension will choose either `debug` or `test` depending on active editor window.","default":"auto"},"traceDirPath":{"type":"string","description":"Directory in which the record trace is located or to be created for a new output trace. For use on 'replay' mode only","default":""},"coreFilePath":{"type":"string","description":"Path to the core dump file to open. For use on 'core' mode only","default":""},"stopOnEntry":{"type":"boolean","description":"Automatically stop program after launch.","default":false},"args":{"type":["array","string"],"description":"Command line arguments passed to the debugged program.","items":{"type":"string"},"default":[]},"showLog":{"type":"boolean","description":"Show log output from the delve debugger. Maps to dlv's `--log` flag.","default":false},"cwd":{"type":"string","description":"Workspace relative or absolute path to the working directory of the program being debugged if a non-empty value is specified. The `program` folder is used as the working directory if `cwd` is omitted or empty.","default":""},"env":{"type":"object","description":"Environment variables passed to the launched debuggee program. Format as string key:value pairs. Merged with `envFile` and `go.toolsEnvVars` with precedence `env` > `envFile` > `go.toolsEnvVars`.","default":{}},"substitutePath":{"type":"array","items":{"type":"object","properties":{"from":{"type":"string","description":"The absolute local path to be replaced when passing paths to the debugger.","default":""},"to":{"type":"string","description":"The absolute remote path to be replaced when passing paths back to the client.","default":""}}},"description":"An array of mappings from a local path (editor) to the remote path (debugee). This setting is useful when working in a file system with symbolic links, running remote debugging, or debugging an executable compiled externally. The debug adapter will replace the local path with the remote path in all of the calls.","default":[]},"buildFlags":{"type":["string","array"],"items":{"type":"string"},"description":"Build flags, to be passed to the Go compiler. Maps to dlv's `--build-flags` flag.","default":[]},"dlvFlags":{"type":"array","description":"Extra flags for `dlv`. See `dlv help` for the full list of supported. Flags such as `--log-output`, `--log`, `--log-dest`, `--api-version`, `--output`, `--backend` already have corresponding properties in the debug configuration, and flags such as `--listen` and `--headless` are used internally. If they are specified in `dlvFlags`, they may be ignored or cause an error.","items":{"type":"string"},"default":[]},"port":{"type":"number","description":"When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.","default":2345},"host":{"type":"string","description":"When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.","default":"127.0.0.1"},"trace":{"type":"string","enum":["verbose","trace","log","info","warn","error"],"default":"error","description":"Various levels of logging shown in the debug console & 'Go Debug' output channel. When using the `legacy` debug adapter, the logs will also be written to a file if it is set to a value other than `error`."},"envFile":{"type":["string","array"],"items":{"type":"string"},"description":"Absolute path to a file containing environment variable definitions, formatted as string key=value pairs. Multiple files can be specified by provided an array of absolute paths. Merged with `env` and `go.toolsEnvVars` with precedence `env` > `envFile` > `go.toolsEnvVars`. ","default":""},"backend":{"type":"string","enum":["default","native","lldb","rr"],"description":"Backend used by delve. Maps to `dlv`'s `--backend` flag."},"output":{"type":"string","description":"Output path for the binary of the debugee.","default":"debug"},"logOutput":{"type":"string","enum":["debugger","gdbwire","lldbout","debuglineerr","rpc","dap"],"description":"Comma separated list of components that should produce debug output. Maps to dlv's `--log-output` flag. Check `dlv log` for details.","default":"debugger"},"logDest":{"type":"string","description":"dlv's `--log-dest` flag. See `dlv log` for details. Number argument is not allowed. Supported only in `dlv-dap` mode, and on Linux and Mac OS."},"dlvLoadConfig":{"type":"object","properties":{"followPointers":{"type":"boolean","description":"FollowPointers requests pointers to be automatically dereferenced.","default":true},"maxVariableRecurse":{"type":"number","description":"MaxVariableRecurse is how far to recurse when evaluating nested types.","default":1},"maxStringLen":{"type":"number","description":"MaxStringLen is the maximum number of bytes read from a string.","default":64},"maxArrayValues":{"type":"number","description":"MaxArrayValues is the maximum number of elements read from an array, a slice or a map.","default":64},"maxStructFields":{"type":"number","description":"MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields.","default":-1}},"description":"LoadConfig describes to delve, how to load values from target's memory. Not applicable when using `dlv-dap` mode.","default":{"followPointers":true,"maxVariableRecurse":1,"maxStringLen":64,"maxArrayValues":64,"maxStructFields":-1}},"apiVersion":{"type":"number","enum":[1,2],"description":"Delve Api Version to use. Default value is 2. Maps to dlv's `--api-version` flag. Not applicable when using `dlv-dap` mode.","default":2},"stackTraceDepth":{"type":"number","description":"Maximum depth of stack trace collected from Delve.","default":50},"showGlobalVariables":{"type":"boolean","default":false,"description":"Boolean value to indicate whether global package variables should be shown in the variables pane or not."},"showRegisters":{"type":"boolean","default":false,"description":"Boolean value to indicate whether register variables should be shown in the variables pane or not."},"hideSystemGoroutines":{"type":"boolean","default":false,"description":"Boolean value to indicate whether system goroutines should be hidden from call stack view."},"console":{"default":"internalConsole","description":"(Experimental) Where to launch the debugger and the debug target: internal console, integrated terminal, or external terminal. It is ignored in remote debugging.","enum":["internalConsole","integratedTerminal","externalTerminal"]},"asRoot":{"default":false,"description":"(Experimental) Debug with elevated permissions (on Unix). It requires `integrated` or `external` console modes and is ignored in remote debugging.","type":"boolean"}}},"attach":{"required":[],"properties":{"debugAdapter":{"enum":["legacy","dlv-dap"],"description":"Select which debug adapter to use with this launch configuration.","default":"dlv-dap"},"processId":{"anyOf":[{"enum":["${command:pickProcess}","${command:pickGoProcess}"],"description":"Use process picker to select a process to attach, or Process ID as integer."},{"type":"string","description":"Attach to a process by name. If more than one process matches the name, use the process picker to select a process."},{"type":"number","description":"The numeric ID of the process to be debugged. If 0, use the process picker to select a process."}],"default":0},"mode":{"enum":["local","remote"],"description":"Indicates local or remote debugging. Local is similar to the `dlv attach` command, remote - to `dlv connect`","default":"local"},"stopOnEntry":{"type":"boolean","description":"Automatically stop program after attach.","default":false},"dlvFlags":{"type":"array","description":"Extra flags for `dlv`. See `dlv help` for the full list of supported. Flags such as `--log-output`, `--log`, `--log-dest`, `--api-version`, `--output`, `--backend` already have corresponding properties in the debug configuration, and flags such as `--listen` and `--headless` are used internally. If they are specified in `dlvFlags`, they may be ignored or cause an error.","items":{"type":"string"},"default":[]},"showLog":{"type":"boolean","description":"Show log output from the delve debugger. Maps to dlv's `--log` flag.","default":false},"cwd":{"type":"string","description":"Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.","default":"${workspaceFolder}"},"remotePath":{"type":"string","description":"The path to the source code on the remote machine, when the remote path is different from the local machine. If specified, becomes the first entry in substitutePath. Not supported with `dlv-dap`.","markdownDeprecationMessage":"Use `substitutePath` instead.","default":""},"port":{"type":"number","description":"When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode, this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.","default":2345},"host":{"type":"string","description":"When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode, this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.","default":"127.0.0.1"},"substitutePath":{"type":"array","items":{"type":"object","properties":{"from":{"type":"string","description":"The absolute local path to be replaced when passing paths to the debugger.","default":""},"to":{"type":"string","description":"The absolute remote path to be replaced when passing paths back to the client.","default":""}}},"description":"An array of mappings from a local path (editor) to the remote path (debugee). This setting is useful when working in a file system with symbolic links, running remote debugging, or debugging an executable compiled externally. The debug adapter will replace the local path with the remote path in all of the calls.  Overriden by `remotePath`.","default":[]},"trace":{"type":"string","enum":["verbose","trace","log","info","warn","error"],"default":"error","description":"Various levels of logging shown in the debug console & 'Go Debug' output channel. When using the `legacy` debug adapter, the logs will also be written to a file if it is set to a value other than `error`."},"backend":{"type":"string","enum":["default","native","lldb","rr"],"description":"Backend used by delve. Maps to `dlv`'s `--backend` flag."},"logOutput":{"type":"string","enum":["debugger","gdbwire","lldbout","debuglineerr","rpc","dap"],"description":"Comma separated list of components that should produce debug output. Maps to dlv's `--log-output` flag. Check `dlv log` for details.","default":"debugger"},"logDest":{"type":"string","description":"dlv's `--log-dest` flag. See `dlv log` for details. Number argument is not allowed. Supported only in `dlv-dap` mode and on Linux and Mac OS."},"dlvLoadConfig":{"type":"object","properties":{"followPointers":{"type":"boolean","description":"FollowPointers requests pointers to be automatically dereferenced","default":true},"maxVariableRecurse":{"type":"number","description":"MaxVariableRecurse is how far to recurse when evaluating nested types","default":1},"maxStringLen":{"type":"number","description":"MaxStringLen is the maximum number of bytes read from a string","default":64},"maxArrayValues":{"type":"number","description":"MaxArrayValues is the maximum number of elements read from an array, a slice or a map","default":64},"maxStructFields":{"type":"number","description":"MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields","default":-1}},"description":"LoadConfig describes to delve, how to load values from target's memory. Not applicable when using `dlv-dap` mode.","default":{"followPointers":true,"maxVariableRecurse":1,"maxStringLen":64,"maxArrayValues":64,"maxStructFields":-1}},"apiVersion":{"type":"number","enum":[1,2],"description":"Delve Api Version to use. Default value is 2. Not applicable when using `dlv-dap` mode.","default":2},"stackTraceDepth":{"type":"number","description":"Maximum depth of stack trace collected from Delve.","default":50},"showGlobalVariables":{"type":"boolean","default":false,"description":"Boolean value to indicate whether global package variables should be shown in the variables pane or not."},"showRegisters":{"type":"boolean","default":false,"description":"Boolean value to indicate whether register variables should be shown in the variables pane or not."},"hideSystemGoroutines":{"type":"boolean","default":false,"description":"Boolean value to indicate whether system goroutines should be hidden from call stack view."},"console":{"default":"internalConsole","description":"(Experimental) Where to launch the debugger: internal console, integrated terminal, or external terminal. This does not affect tty of the running program. It is ignored in remote debugging.","enum":["internalConsole","integratedTerminal","externalTerminal"]},"asRoot":{"default":false,"description":"(Experimental) Debug with elevated permissions (on Unix). This requires `integrated` or `external` console modes and is ignored in remote debugging.","type":"boolean"}}}}}],"configuration":{"type":"object","title":"Go","properties":{"go.showWelcome":{"type":"boolean","default":true,"description":"Specifies whether to show the Welcome experience on first install"},"go.buildOnSave":{"type":"string","enum":["package","workspace","off"],"default":"package","description":"Compiles code on file save using 'go build' or 'go test -c'. Not applicable when using the language server.","scope":"resource","markdownDeprecationMessage":"Enable the Go language server (`#go.useLanguageServer#`) to diagnose compile errors."},"go.buildFlags":{"type":"array","items":{"type":"string"},"default":[],"description":"Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. [\"-ldflags='-s'\"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.","scope":"resource"},"go.buildTags":{"type":"string","default":"","description":"The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.","scope":"resource"},"go.testTags":{"type":["string","null"],"default":null,"description":"The Go build tags to use for when running tests. If null, then buildTags will be used.","scope":"resource"},"go.disableConcurrentTests":{"type":"boolean","default":false,"description":"If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.","scope":"resource"},"go.installDependenciesWhenBuilding":{"type":"boolean","default":false,"description":"If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.","scope":"resource"},"go.lintOnSave":{"type":"string","enum":["file","package","workspace","off"],"enumDescriptions":["lint the current file on file saving","lint the current package on file saving","lint all the packages in the current workspace root folder on file saving","do not run lint automatically"],"default":"package","description":"Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.","scope":"resource"},"go.lintTool":{"type":"string","default":"staticcheck","description":"Specifies Lint tool name.","scope":"resource","enum":["staticcheck","golint","golangci-lint","revive"]},"go.lintFlags":{"type":"array","items":{"type":"string"},"default":[],"description":"Flags to pass to Lint tool (e.g. [\"-min_confidence=.8\"])","scope":"resource"},"go.vetOnSave":{"type":"string","enum":["package","workspace","off"],"enumDescriptions":["vet the current package on file saving","vet all the packages in the current workspace root folder on file saving","do not run vet automatically"],"default":"package","description":"Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.","scope":"resource"},"go.vetFlags":{"type":"array","items":{"type":"string"},"default":[],"description":"Flags to pass to `go tool vet` (e.g. [\"-all\", \"-shadow\"]). Not applicable when using the language server's diagnostics.","scope":"resource"},"go.formatTool":{"type":"string","default":"default","markdownDescription":"When the language server is enabled and one of `default`/`gofmt`/`goimports`/`gofumpt` is chosen, the language server will handle formatting. If `custom` tool is selected, the extension will use the `customFormatter` tool in the `#go.alternateTools#` section.","scope":"resource","enum":["default","gofmt","goimports","goformat","gofumpt","custom"],"markdownEnumDescriptions":["If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.","Formats the file according to the standard Go style. (not applicable when the language server is enabled)","Organizes imports and formats the file with gofmt. (not applicable when the language server is enabled)","Configurable gofmt, see https://github.com/mbenkmann/goformat.","Stricter version of gofmt, see https://github.com/mvdan/gofumpt. . Use `#gopls.format.gofumpt#` instead)","Formats using the custom tool specified as `customFormatter` in the `#go.alternateTools#` setting. The tool should take the input as STDIN and output the formatted code as STDOUT."]},"go.formatFlags":{"type":"array","items":{"type":"string"},"default":[],"description":"Flags to pass to format tool (e.g. [\"-s\"]). Not applicable when using the language server.","scope":"resource"},"go.inferGopath":{"type":"boolean","default":false,"description":"Infer GOPATH from the workspace root. This is ignored when using Go Modules.","scope":"resource"},"go.gopath":{"type":["string","null"],"default":null,"description":"Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.","scope":"machine-overridable"},"go.toolsGopath":{"type":["string","null"],"default":null,"description":"Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.","scope":"machine-overridable"},"go.goroot":{"type":["string","null"],"default":null,"description":"Specifies the GOROOT to use when no environment variable is set.","scope":"machine-overridable"},"go.testOnSave":{"type":"boolean","default":false,"description":"Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.","scope":"resource"},"go.coverOnSave":{"type":"boolean","default":false,"description":"If true, runs 'go test -coverprofile' on save and shows test coverage.","scope":"resource"},"go.coverOnTestPackage":{"type":"boolean","default":true,"description":"If true, shows test coverage when Go: Test Package command is run."},"go.coverOnSingleTest":{"type":"boolean","default":false,"description":"If true, shows test coverage when Go: Test Function at cursor command is run."},"go.coverOnSingleTestFile":{"type":"boolean","default":false,"description":"If true, shows test coverage when Go: Test Single File command is run."},"go.coverMode":{"type":"string","enum":["default","set","count","atomic"],"default":"default","description":"When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.","scope":"resource"},"go.coverShowCounts":{"type":"boolean","default":false,"description":"When generating code coverage, should counts be shown as --374--","scope":"resource"},"go.coverageOptions":{"type":"string","enum":["showCoveredCodeOnly","showUncoveredCodeOnly","showBothCoveredAndUncoveredCode"],"default":"showBothCoveredAndUncoveredCode","description":"Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage","scope":"resource"},"go.coverageDecorator":{"type":"object","properties":{"type":{"type":"string","enum":["highlight","gutter"]},"coveredHighlightColor":{"type":"string","description":"Color in the rgba format to use to highlight covered code."},"uncoveredHighlightColor":{"type":"string","description":"Color in the rgba format to use to highlight uncovered code."},"coveredBorderColor":{"type":"string","description":"Color to use for the border of covered code."},"uncoveredBorderColor":{"type":"string","description":"Color to use for the border of uncovered code."},"coveredGutterStyle":{"type":"string","enum":["blockblue","blockred","blockgreen","blockyellow","slashred","slashgreen","slashblue","slashyellow","verticalred","verticalgreen","verticalblue","verticalyellow"],"description":"Gutter style to indicate covered code."},"uncoveredGutterStyle":{"type":"string","enum":["blockblue","blockred","blockgreen","blockyellow","slashred","slashgreen","slashblue","slashyellow","verticalred","verticalgreen","verticalblue","verticalyellow"],"description":"Gutter style to indicate covered code."}},"additionalProperties":false,"default":{"type":"highlight","coveredHighlightColor":"rgba(64,128,128,0.5)","uncoveredHighlightColor":"rgba(128,64,64,0.25)","coveredBorderColor":"rgba(64,128,128,0.5)","uncoveredBorderColor":"rgba(128,64,64,0.25)","coveredGutterStyle":"blockblue","uncoveredGutterStyle":"slashyellow"},"description":"This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.","scope":"resource"},"go.testTimeout":{"type":"string","default":"30s","description":"Specifies the timeout for go test in ParseDuration format.","scope":"resource"},"go.testEnvVars":{"type":"object","default":{},"description":"Environment variables that will be passed to the process that runs the Go tests","scope":"resource"},"go.testEnvFile":{"type":"string","default":null,"description":"Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.","scope":"resource"},"go.testFlags":{"type":["array","null"],"items":{"type":"string"},"default":null,"description":"Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.","scope":"resource"},"go.testExplorer.enable":{"type":"boolean","default":true,"scope":"window","description":"Enable the Go test explorer"},"go.testExplorer.packageDisplayMode":{"type":"string","enum":["flat","nested"],"default":"flat","description":"Present packages in the test explorer flat or nested.","scope":"resource"},"go.testExplorer.alwaysRunBenchmarks":{"type":"boolean","default":false,"description":"Run benchmarks when running all tests in a file or folder.","scope":"resource"},"go.testExplorer.concatenateMessages":{"type":"boolean","default":true,"description":"Concatenate all test log messages for a given location into a single message.","scope":"resource"},"go.testExplorer.showDynamicSubtestsInEditor":{"type":"boolean","default":false,"description":"Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.","scope":"resource"},"go.testExplorer.showOutput":{"type":"boolean","default":true,"description":"Open the test output terminal when a test run is started.","scope":"window"},"go.generateTestsFlags":{"type":"array","items":{"type":"string"},"default":[],"description":"Additional command line flags to pass to `gotests` for generating tests.","scope":"resource"},"go.toolsEnvVars":{"type":"object","default":{},"description":"Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS) and debuggee process launched by Delve. Format as string key:value pairs. When debugging, merged with `envFile` and `env` values with precedence `env` > `envFile` > `go.toolsEnvVars`.","scope":"resource"},"go.useLanguageServer":{"type":"boolean","default":true,"description":"Enable intellisense, code navigation, refactoring, formatting & diagnostics for Go. The features are powered by the Go language server \"gopls\"."},"go.languageServerFlags":{"type":"array","default":[],"description":"Flags like -rpc.trace and -logfile to be used while running the language server."},"go.trace.server":{"type":"string","enum":["off","messages","verbose"],"default":"off","description":"Trace the communication between VS Code and the Go language server."},"go.logging.level":{"type":"string","default":"error","enum":["off","error","info","verbose"],"description":"The logging level the extension logs at, defaults to 'error'","scope":"machine-overridable"},"go.toolsManagement.go":{"type":"string","default":"","description":"The path to the `go` binary used to install the Go tools. If it's empty, the same `go` binary chosen for the project will be used for tool installation.","scope":"machine-overridable"},"go.toolsManagement.checkForUpdates":{"type":"string","default":"proxy","enum":["proxy","local","off"],"enumDescriptions":["keeps notified of new releases by checking the Go module proxy (GOPROXY)","checks only the minimum tools versions required by the extension","completely disables version check (not recommended)"],"markdownDescription":"Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on"},"go.toolsManagement.autoUpdate":{"type":"boolean","default":false,"description":"Automatically update the tools used by the extension, without prompting the user.","scope":"resource"},"go.enableCodeLens":{"type":"object","properties":{"runtest":{"type":"boolean","default":true,"description":"If true, enables code lens for running and debugging tests"}},"additionalProperties":false,"default":{"runtest":true},"description":"Feature level setting to enable/disable code lens for references and run/debug tests","scope":"resource"},"go.addTags":{"type":"object","properties":{"promptForTags":{"type":"boolean","default":false,"description":"If true, Go: Add Tags command will prompt the user to provide tags, options, transform values instead of using the configured values"},"tags":{"type":"string","default":"json","description":"Comma separated tags to be used by Go: Add Tags command"},"options":{"type":"string","default":"json=omitempty","description":"Comma separated tag=options pairs to be used by Go: Add Tags command"},"transform":{"type":"string","enum":["snakecase","camelcase","lispcase","pascalcase","keep"],"default":"snakecase","description":"Transformation rule used by Go: Add Tags command to add tags"},"template":{"type":"string","default":"","description":"Custom format used by Go: Add Tags command for the tag value to be applied"}},"additionalProperties":false,"default":{"tags":"json","options":"json=omitempty","promptForTags":false,"transform":"snakecase","template":""},"description":"Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.","scope":"resource"},"go.removeTags":{"type":"object","properties":{"promptForTags":{"type":"boolean","default":false,"description":"If true, Go: Remove Tags command will prompt the user to provide tags and options instead of using the configured values"},"tags":{"type":"string","default":"json","description":"Comma separated tags to be used by Go: Remove Tags command"},"options":{"type":"string","default":"json=omitempty","description":"Comma separated tag=options pairs to be used by Go: Remove Tags command"}},"additionalProperties":false,"default":{"tags":"","options":"","promptForTags":false},"description":"Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.","scope":"resource"},"go.playground":{"type":"object","properties":{"openbrowser":{"type":"boolean","default":true,"description":"Whether to open the created Go Playground in the default browser"},"share":{"type":"boolean","default":true,"description":"Whether to make the created Go Playground shareable"},"run":{"type":"boolean","default":true,"description":"Whether to run the created Go Playground after creation"}},"description":"The flags configured here will be passed through to command `goplay`","additionalProperties":false,"default":{"openbrowser":true,"share":true,"run":true}},"go.survey.prompt":{"type":"boolean","default":true,"description":"Prompt for surveys, including the gopls survey and the Go developer survey."},"go.editorContextMenuCommands":{"type":"object","properties":{"toggleTestFile":{"type":"boolean","default":true,"description":"If true, adds command to toggle between a Go file and its test file to the editor context menu"},"addTags":{"type":"boolean","default":true,"description":"If true, adds command to add configured tags from struct fields to the editor context menu"},"removeTags":{"type":"boolean","default":true,"description":"If true, adds command to remove configured tags from struct fields to the editor context menu"},"fillStruct":{"type":"boolean","default":true,"description":"If true, adds command to fill struct literal with default values to the editor context menu"},"testAtCursor":{"type":"boolean","default":false,"description":"If true, adds command to run the test under the cursor to the editor context menu"},"testFile":{"type":"boolean","default":true,"description":"If true, adds command to run all tests in the current file to the editor context menu"},"testPackage":{"type":"boolean","default":true,"description":"If true, adds command to run all tests in the current package to the editor context menu"},"generateTestForFunction":{"type":"boolean","default":true,"description":"If true, adds command to generate unit tests for function under the cursor to the editor context menu"},"generateTestForFile":{"type":"boolean","default":true,"description":"If true, adds command to generate unit tests for current file to the editor context menu"},"generateTestForPackage":{"type":"boolean","default":true,"description":"If true, adds command to generate unit tests for current package to the editor context menu"},"addImport":{"type":"boolean","default":true,"description":"If true, adds command to import a package to the editor context menu"},"testCoverage":{"type":"boolean","default":true,"description":"If true, adds command to run test coverage to the editor context menu"},"playground":{"type":"boolean","default":true,"description":"If true, adds command to upload the current file or selection to the Go Playground"},"debugTestAtCursor":{"type":"boolean","default":false,"description":"If true, adds command to debug the test under the cursor to the editor context menu"},"benchmarkAtCursor":{"type":"boolean","default":false,"description":"If true, adds command to benchmark the test under the cursor to the editor context menu"}},"additionalProperties":false,"default":{"toggleTestFile":true,"addTags":true,"removeTags":false,"fillStruct":false,"testAtCursor":true,"testFile":false,"testPackage":false,"generateTestForFunction":true,"generateTestForFile":false,"generateTestForPackage":false,"addImport":true,"testCoverage":true,"playground":true,"debugTestAtCursor":true,"benchmarkAtCursor":false},"description":"Experimental Feature: Enable/Disable entries from the context menu in the editor.","scope":"resource"},"go.delveConfig":{"type":"object","properties":{"dlvLoadConfig":{"type":"object","properties":{"followPointers":{"type":"boolean","description":"FollowPointers requests pointers to be automatically dereferenced","default":true},"maxVariableRecurse":{"type":"number","description":"MaxVariableRecurse is how far to recurse when evaluating nested types","default":1},"maxStringLen":{"type":"number","description":"MaxStringLen is the maximum number of bytes read from a string","default":64},"maxArrayValues":{"type":"number","description":"MaxArrayValues is the maximum number of elements read from an array, a slice or a map","default":64},"maxStructFields":{"type":"number","description":"MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields","default":-1}},"description":"LoadConfig describes to delve, how to load values from target's memory. Ignored by 'dlv-dap'.","default":{"followPointers":true,"maxVariableRecurse":1,"maxStringLen":64,"maxArrayValues":64,"maxStructFields":-1}},"apiVersion":{"type":"number","enum":[1,2],"description":"Delve Api Version to use. Default value is 2. This applies only when using the 'legacy' debug adapter.","default":2},"showGlobalVariables":{"type":"boolean","description":"Boolean value to indicate whether global package variables should be shown in the variables pane or not.","default":false},"showRegisters":{"type":"boolean","default":false,"description":"Boolean value to indicate whether register variables should be shown in the variables pane or not."},"hideSystemGoroutines":{"type":"boolean","default":false,"description":"Boolean value to indicate whether system goroutines should be hidden from call stack view."},"showLog":{"type":"boolean","description":"Show log output from the delve debugger. Maps to dlv's `--log` flag.","default":false},"logOutput":{"type":"string","enum":["debugger","gdbwire","lldbout","debuglineerr","rpc","dap"],"description":"Comma separated list of components that should produce debug output. Maps to dlv's `--log-output` flag. Check `dlv log` for details.","default":"debugger"},"debugAdapter":{"type":"string","enum":["legacy","dlv-dap"],"description":"Select which debug adapter to use by default. This is also used for choosing which debug adapter to use when no launch.json is present and with codelenses.","default":"dlv-dap"},"dlvFlags":{"type":"array","description":"Extra flags for `dlv`. See `dlv help` for the full list of supported. Flags such as `--log-output`, `--log`, `--log-dest`, `--api-version`, `--output`, `--backend` already have corresponding properties in the debug configuration, and flags such as `--listen` and `--headless` are used internally. If they are specified in `dlvFlags`, they may be ignored or cause an error.","items":{"type":"string"},"default":[]},"substitutePath":{"type":"array","items":{"type":"object","properties":{"from":{"type":"string","description":"The absolute local path to be replaced when passing paths to the debugger","default":""},"to":{"type":"string","description":"The absolute remote path to be replaced when passing paths back to the client","default":""}}},"description":"An array of mappings from a local path to the remote path that is used by the debuggee. The debug adapter will replace the local path with the remote path in all of the calls. Overriden by `remotePath` (in attach request).","default":[]}},"default":{},"description":"Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.","scope":"resource"},"go.alternateTools":{"type":"object","default":{},"description":"Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools.","scope":"resource","properties":{"go":{"type":"string","default":"go","description":"Alternate tool to use instead of the go binary or alternate path to use for the go binary."},"gopls":{"type":"string","default":"gopls","description":"Alternate tool to use instead of the gopls binary or alternate path to use for the gopls binary."},"dlv":{"type":"string","default":"dlv","description":"Alternate tool to use instead of the dlv binary or alternate path to use for the dlv binary."},"customFormatter":{"type":"string","default":"","markdownDescription":"Custom formatter to use instead of the language server. This should be used with the `custom` option in `#go.formatTool#`."}},"additionalProperties":true},"go.tasks.provideDefault":{"default":true,"description":"enable the default go build/test task provider.","scope":"window","type":"boolean"},"go.terminal.activateEnvironment":{"default":true,"description":"Apply the Go & PATH environment variables used by the extension to all integrated terminals.","scope":"resource","type":"boolean"},"gopls":{"type":"object","markdownDescription":"Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.","scope":"resource","properties":{"build.allowImplicitNetworkAccess":{"type":"boolean","markdownDescription":"(Experimental) allowImplicitNetworkAccess disables GOPROXY=off, allowing implicit module\ndownloads rather than requiring user action. This option will eventually\nbe removed.\n","default":false,"scope":"resource"},"build.allowModfileModifications":{"type":"boolean","markdownDescription":"(Experimental) allowModfileModifications disables -mod=readonly, allowing imports from\nout-of-scope modules. This option will eventually be removed.\n","default":false,"scope":"resource"},"build.buildFlags":{"type":"array","markdownDescription":"buildFlags is the set of flags passed on to the build system when invoked.\nIt is applied to queries like `go list`, which is used when discovering files.\nThe most common use is to set `-tags`.\n\nIf unspecified, values of `go.buildFlags, go.buildTags` will be propagated.\n","default":[],"scope":"resource"},"build.directoryFilters":{"type":"array","markdownDescription":"directoryFilters can be used to exclude unwanted directories from the\nworkspace. By default, all directories are included. Filters are an\noperator, `+` to include and `-` to exclude, followed by a path prefix\nrelative to the workspace folder. They are evaluated in order, and\nthe last filter that applies to a path controls whether it is included.\nThe path prefix can be empty, so an initial `-` excludes everything.\n\nDirectoryFilters also supports the `**` operator to match 0 or more directories.\n\nExamples:\n\nExclude node_modules at current depth: `-node_modules`\n\nExclude node_modules at any depth: `-**/node_modules`\n\nInclude only project_a: `-` (exclude everything), `+project_a`\n\nInclude only project_a, but not node_modules inside it: `-`, `+project_a`, `-project_a/node_modules`\n","default":["-**/node_modules"],"scope":"resource"},"build.env":{"type":"object","markdownDescription":"env adds environment variables to external commands run by `gopls`, most notably `go list`.\n","scope":"resource"},"build.expandWorkspaceToModule":{"type":"boolean","markdownDescription":"(Experimental) expandWorkspaceToModule instructs `gopls` to adjust the scope of the\nworkspace to find the best available module root. `gopls` first looks for\na go.mod file in any parent directory of the workspace folder, expanding\nthe scope to that directory if it exists. If no viable parent directory is\nfound, gopls will check if there is exactly one child directory containing\na go.mod file, narrowing the scope to that directory if it exists.\n","default":true,"scope":"resource"},"build.memoryMode":{"type":"string","markdownDescription":"(Experimental) memoryMode controls the tradeoff `gopls` makes between memory usage and\ncorrectness.\n\nValues other than `Normal` are untested and may break in surprising ways.\n","enum":["DegradeClosed","Normal"],"markdownEnumDescriptions":["`\"DegradeClosed\"`: In DegradeClosed mode, `gopls` will collect less information about\npackages without open files. As a result, features like Find\nReferences and Rename will miss results in such packages.\n",""],"default":"Normal","scope":"resource"},"build.standaloneTags":{"type":"array","markdownDescription":"standaloneTags specifies a set of build constraints that identify\nindividual Go source files that make up the entire main package of an\nexecutable.\n\nA common example of standalone main files is the convention of using the\ndirective `//go:build ignore` to denote files that are not intended to be\nincluded in any package, for example because they are invoked directly by\nthe developer using `go run`.\n\nGopls considers a file to be a standalone main file if and only if it has\npackage name \"main\" and has a build directive of the exact form\n\"//go:build tag\" or \"// +build tag\", where tag is among the list of tags\nconfigured by this setting. Notably, if the build constraint is more\ncomplicated than a simple tag (such as the composite constraint\n`//go:build tag && go1.18`), the file is not considered to be a standalone\nmain file.\n\nThis setting is only supported when gopls is built with Go 1.16 or later.\n","default":["ignore"],"scope":"resource"},"build.templateExtensions":{"type":"array","markdownDescription":"templateExtensions gives the extensions of file names that are treateed\nas template files. (The extension\nis the part of the file name after the final dot.)\n","default":[],"scope":"resource"},"formatting.gofumpt":{"type":"boolean","markdownDescription":"gofumpt indicates if we should run gofumpt formatting.\n","default":false,"scope":"resource"},"formatting.local":{"type":"string","markdownDescription":"local is the equivalent of the `goimports -local` flag, which puts\nimports beginning with this string after third-party packages. It should\nbe the prefix of the import path whose imports should be grouped\nseparately.\n","default":"","scope":"resource"},"ui.codelenses":{"type":"object","markdownDescription":"codelenses overrides the enabled/disabled state of code lenses. See the\n\"Code Lenses\" section of the\n[Settings page](https://github.com/golang/tools/blob/master/gopls/doc/settings.md#code-lenses)\nfor the list of supported lenses.\n\nExample Usage:\n\n```json5\n\"gopls\": {\n...\n  \"codelenses\": {\n    \"generate\": false,  // Don't show the `go generate` lens.\n    \"gc_details\": true  // Show a code lens toggling the display of gc's choices.\n  }\n...\n}\n```\n","scope":"resource","properties":{"gc_details":{"type":"boolean","markdownDescription":"Toggle the calculation of gc annotations.","default":false},"generate":{"type":"boolean","markdownDescription":"Runs `go generate` for a given directory.","default":true},"regenerate_cgo":{"type":"boolean","markdownDescription":"Regenerates cgo definitions.","default":true},"run_govulncheck":{"type":"boolean","markdownDescription":"Run vulnerability check (`govulncheck`).","default":false},"test":{"type":"boolean","markdownDescription":"Runs `go test` for a specific set of test or benchmark functions.","default":false},"tidy":{"type":"boolean","markdownDescription":"Runs `go mod tidy` for a module.","default":true},"upgrade_dependency":{"type":"boolean","markdownDescription":"Upgrades a dependency in the go.mod file for a module.","default":true},"vendor":{"type":"boolean","markdownDescription":"Runs `go mod vendor` for a module.","default":true}}},"ui.completion.completeFunctionCalls":{"type":"boolean","markdownDescription":"completeFunctionCalls enables function call completion.\n\nWhen completing a statement, or when a function return type matches the\nexpected of the expression being completed, completion may suggest call\nexpressions (i.e. may include parentheses).\n","default":true,"scope":"resource"},"ui.completion.completionBudget":{"type":"string","markdownDescription":"(For Debugging) completionBudget is the soft latency goal for completion requests. Most\nrequests finish in a couple milliseconds, but in some cases deep\ncompletions can take much longer. As we use up our budget we\ndynamically reduce the search scope to ensure we return timely\nresults. Zero means unlimited.\n","default":"100ms","scope":"resource"},"ui.completion.experimentalPostfixCompletions":{"type":"boolean","markdownDescription":"(Experimental) experimentalPostfixCompletions enables artificial method snippets\nsuch as \"someSlice.sort!\".\n","default":true,"scope":"resource"},"ui.completion.matcher":{"type":"string","markdownDescription":"(Advanced) matcher sets the algorithm that is used when calculating completion\ncandidates.\n","enum":["CaseInsensitive","CaseSensitive","Fuzzy"],"markdownEnumDescriptions":["","",""],"default":"Fuzzy","scope":"resource"},"ui.completion.usePlaceholders":{"type":"boolean","markdownDescription":"placeholders enables placeholders for function parameters or struct\nfields in completion responses.\n","default":false,"scope":"resource"},"ui.diagnostic.analyses":{"type":"object","markdownDescription":"analyses specify analyses that the user would like to enable or disable.\nA map of the names of analysis passes that should be enabled/disabled.\nA full list of analyzers that gopls uses can be found in\n[analyzers.md](https://github.com/golang/tools/blob/master/gopls/doc/analyzers.md).\n\nExample Usage:\n\n```json5\n...\n\"analyses\": {\n  \"unreachable\": false, // Disable the unreachable analyzer.\n  \"unusedparams\": true  // Enable the unusedparams analyzer.\n}\n...\n```\n","scope":"resource","properties":{"appends":{"type":"boolean","markdownDescription":"check for missing values after append\n\nThis checker reports calls to append that pass\nno values to be appended to the slice.\n\n\ts := []string{\"a\", \"b\", \"c\"}\n\t_ = append(s)\n\nSuch calls are always no-ops and often indicate an\nunderlying mistake.","default":true},"asmdecl":{"type":"boolean","markdownDescription":"report mismatches between assembly files and Go declarations","default":true},"assign":{"type":"boolean","markdownDescription":"check for useless assignments\n\nThis checker reports assignments of the form x = x or a[i] = a[i].\nThese are almost always useless, and even when they aren't they are\nusually a mistake.","default":true},"atomic":{"type":"boolean","markdownDescription":"check for common mistakes using the sync/atomic package\n\nThe atomic checker looks for assignment statements of the form:\n\n\tx = atomic.AddUint64(&x, 1)\n\nwhich are not atomic.","default":true},"atomicalign":{"type":"boolean","markdownDescription":"check for non-64-bits-aligned arguments to sync/atomic functions","default":true},"bools":{"type":"boolean","markdownDescription":"check for common mistakes involving boolean operators","default":true},"buildtag":{"type":"boolean","markdownDescription":"check //go:build and // +build directives","default":true},"cgocall":{"type":"boolean","markdownDescription":"detect some violations of the cgo pointer passing rules\n\nCheck for invalid cgo pointer passing.\nThis looks for code that uses cgo to call C code passing values\nwhose types are almost always invalid according to the cgo pointer\nsharing rules.\nSpecifically, it warns about attempts to pass a Go chan, map, func,\nor slice to C, either directly, or via a pointer, array, or struct.","default":true},"composites":{"type":"boolean","markdownDescription":"check for unkeyed composite literals\n\nThis analyzer reports a diagnostic for composite literals of struct\ntypes imported from another package that do not use the field-keyed\nsyntax. Such literals are fragile because the addition of a new field\n(even if unexported) to the struct will cause compilation to fail.\n\nAs an example,\n\n\terr = &net.DNSConfigError{err}\n\nshould be replaced by:\n\n\terr = &net.DNSConfigError{Err: err}\n","default":true},"copylocks":{"type":"boolean","markdownDescription":"check for locks erroneously passed by value\n\nInadvertently copying a value containing a lock, such as sync.Mutex or\nsync.WaitGroup, may cause both copies to malfunction. Generally such\nvalues should be referred to through a pointer.","default":true},"deepequalerrors":{"type":"boolean","markdownDescription":"check for calls of reflect.DeepEqual on error values\n\nThe deepequalerrors checker looks for calls of the form:\n\n    reflect.DeepEqual(err1, err2)\n\nwhere err1 and err2 are errors. Using reflect.DeepEqual to compare\nerrors is discouraged.","default":true},"defers":{"type":"boolean","markdownDescription":"report common mistakes in defer statements\n\nThe defers analyzer reports a diagnostic when a defer statement would\nresult in a non-deferred call to time.Since, as experience has shown\nthat this is nearly always a mistake.\n\nFor example:\n\n\tstart := time.Now()\n\t...\n\tdefer recordLatency(time.Since(start)) // error: call to time.Since is not deferred\n\nThe correct code is:\n\n\tdefer func() { recordLatency(time.Since(start)) }()","default":true},"deprecated":{"type":"boolean","markdownDescription":"check for use of deprecated identifiers\n\nThe deprecated analyzer looks for deprecated symbols and package imports.\n\nSee https://go.dev/wiki/Deprecated to learn about Go's convention\nfor documenting and signaling deprecated identifiers.","default":true},"directive":{"type":"boolean","markdownDescription":"check Go toolchain directives such as //go:debug\n\nThis analyzer checks for problems with known Go toolchain directives\nin all Go source files in a package directory, even those excluded by\n//go:build constraints, and all non-Go source files too.\n\nFor //go:debug (see https://go.dev/doc/godebug), the analyzer checks\nthat the directives are placed only in Go source files, only above the\npackage comment, and only in package main or *_test.go files.\n\nSupport for other known directives may be added in the future.\n\nThis analyzer does not check //go:build, which is handled by the\nbuildtag analyzer.\n","default":true},"embed":{"type":"boolean","markdownDescription":"check //go:embed directive usage\n\nThis analyzer checks that the embed package is imported if //go:embed\ndirectives are present, providing a suggested fix to add the import if\nit is missing.\n\nThis analyzer also checks that //go:embed directives precede the\ndeclaration of a single variable.","default":true},"errorsas":{"type":"boolean","markdownDescription":"report passing non-pointer or non-error values to errors.As\n\nThe errorsas analysis reports calls to errors.As where the type\nof the second argument is not a pointer to a type implementing error.","default":true},"fieldalignment":{"type":"boolean","markdownDescription":"find structs that would use less memory if their fields were sorted\n\nThis analyzer find structs that can be rearranged to use less memory, and provides\na suggested edit with the most compact order.\n\nNote that there are two different diagnostics reported. One checks struct size,\nand the other reports \"pointer bytes\" used. Pointer bytes is how many bytes of the\nobject that the garbage collector has to potentially scan for pointers, for example:\n\n\tstruct { uint32; string }\n\nhave 16 pointer bytes because the garbage collector has to scan up through the string's\ninner pointer.\n\n\tstruct { string; *uint32 }\n\nhas 24 pointer bytes because it has to scan further through the *uint32.\n\n\tstruct { string; uint32 }\n\nhas 8 because it can stop immediately after the string pointer.\n\nBe aware that the most compact order is not always the most efficient.\nIn rare cases it may cause two variables each updated by its own goroutine\nto occupy the same CPU cache line, inducing a form of memory contention\nknown as \"false sharing\" that slows down both goroutines.\n","default":false},"fillreturns":{"type":"boolean","markdownDescription":"suggest fixes for errors due to an incorrect number of return values\n\nThis checker provides suggested fixes for type errors of the\ntype \"wrong number of return values (want %d, got %d)\". For example:\n\tfunc m() (int, string, *bool, error) {\n\t\treturn\n\t}\nwill turn into\n\tfunc m() (int, string, *bool, error) {\n\t\treturn 0, \"\", nil, nil\n\t}\n\nThis functionality is similar to https://github.com/sqs/goreturns.\n","default":true},"fillstruct":{"type":"boolean","markdownDescription":"note incomplete struct initializations\n\nThis analyzer provides diagnostics for any struct literals that do not have\nany fields initialized. Because the suggested fix for this analysis is\nexpensive to compute, callers should compute it separately, using the\nSuggestedFix function below.\n","default":true},"httpresponse":{"type":"boolean","markdownDescription":"check for mistakes using HTTP responses\n\nA common mistake when using the net/http package is to defer a function\ncall to close the http.Response Body before checking the error that\ndetermines whether the response is valid:\n\n\tresp, err := http.Head(url)\n\tdefer resp.Body.Close()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// (defer statement belongs here)\n\nThis checker helps uncover latent nil dereference bugs by reporting a\ndiagnostic for such mistakes.","default":true},"ifaceassert":{"type":"boolean","markdownDescription":"detect impossible interface-to-interface type assertions\n\nThis checker flags type assertions v.(T) and corresponding type-switch cases\nin which the static type V of v is an interface that cannot possibly implement\nthe target interface T. This occurs when V and T contain methods with the same\nname but different signatures. Example:\n\n\tvar v interface {\n\t\tRead()\n\t}\n\t_ = v.(io.Reader)\n\nThe Read method in v has a different signature than the Read method in\nio.Reader, so this assertion cannot succeed.","default":true},"infertypeargs":{"type":"boolean","markdownDescription":"check for unnecessary type arguments in call expressions\n\nExplicit type arguments may be omitted from call expressions if they can be\ninferred from function arguments, or from other type arguments:\n\n\tfunc f[T any](T) {}\n\t\n\tfunc _() {\n\t\tf[string](\"foo\") // string could be inferred\n\t}\n","default":true},"loopclosure":{"type":"boolean","markdownDescription":"check references to loop variables from within nested functions\n\nThis analyzer reports places where a function literal references the\niteration variable of an enclosing loop, and the loop calls the function\nin such a way (e.g. with go or defer) that it may outlive the loop\niteration and possibly observe the wrong value of the variable.\n\nIn this example, all the deferred functions run after the loop has\ncompleted, so all observe the final value of v.\n\n\tfor _, v := range list {\n\t    defer func() {\n\t        use(v) // incorrect\n\t    }()\n\t}\n\nOne fix is to create a new variable for each iteration of the loop:\n\n\tfor _, v := range list {\n\t    v := v // new var per iteration\n\t    defer func() {\n\t        use(v) // ok\n\t    }()\n\t}\n\nThe next example uses a go statement and has a similar problem.\nIn addition, it has a data race because the loop updates v\nconcurrent with the goroutines accessing it.\n\n\tfor _, v := range elem {\n\t    go func() {\n\t        use(v)  // incorrect, and a data race\n\t    }()\n\t}\n\nA fix is the same as before. The checker also reports problems\nin goroutines started by golang.org/x/sync/errgroup.Group.\nA hard-to-spot variant of this form is common in parallel tests:\n\n\tfunc Test(t *testing.T) {\n\t    for _, test := range tests {\n\t        t.Run(test.name, func(t *testing.T) {\n\t            t.Parallel()\n\t            use(test) // incorrect, and a data race\n\t        })\n\t    }\n\t}\n\nThe t.Parallel() call causes the rest of the function to execute\nconcurrent with the loop.\n\nThe analyzer reports references only in the last statement,\nas it is not deep enough to understand the effects of subsequent\nstatements that might render the reference benign.\n(\"Last statement\" is defined recursively in compound\nstatements such as if, switch, and select.)\n\nSee: https://golang.org/doc/go_faq.html#closures_and_goroutines","default":true},"lostcancel":{"type":"boolean","markdownDescription":"check cancel func returned by context.WithCancel is called\n\nThe cancellation function returned by context.WithCancel, WithTimeout,\nand WithDeadline must be called or the new context will remain live\nuntil its parent context is cancelled.\n(The background context is never cancelled.)","default":true},"nilfunc":{"type":"boolean","markdownDescription":"check for useless comparisons between functions and nil\n\nA useless comparison is one like f == nil as opposed to f() == nil.","default":true},"nilness":{"type":"boolean","markdownDescription":"check for redundant or impossible nil comparisons\n\nThe nilness checker inspects the control-flow graph of each function in\na package and reports nil pointer dereferences, degenerate nil\npointers, and panics with nil values. A degenerate comparison is of the form\nx==nil or x!=nil where x is statically known to be nil or non-nil. These are\noften a mistake, especially in control flow related to errors. Panics with nil\nvalues are checked because they are not detectable by\n\n\tif r := recover(); r != nil {\n\nThis check reports conditions such as:\n\n\tif f == nil { // impossible condition (f is a function)\n\t}\n\nand:\n\n\tp := &v\n\t...\n\tif p != nil { // tautological condition\n\t}\n\nand:\n\n\tif p == nil {\n\t\tprint(*p) // nil dereference\n\t}\n\nand:\n\n\tif p == nil {\n\t\tpanic(p)\n\t}","default":false},"nonewvars":{"type":"boolean","markdownDescription":"suggested fixes for \"no new vars on left side of :=\"\n\nThis checker provides suggested fixes for type errors of the\ntype \"no new vars on left side of :=\". For example:\n\tz := 1\n\tz := 2\nwill turn into\n\tz := 1\n\tz = 2\n","default":true},"noresultvalues":{"type":"boolean","markdownDescription":"suggested fixes for unexpected return values\n\nThis checker provides suggested fixes for type errors of the\ntype \"no result values expected\" or \"too many return values\".\nFor example:\n\tfunc z() { return nil }\nwill turn into\n\tfunc z() { return }\n","default":true},"printf":{"type":"boolean","markdownDescription":"check consistency of Printf format strings and arguments\n\nThe check applies to calls of the formatting functions such as\n[fmt.Printf] and [fmt.Sprintf], as well as any detected wrappers of\nthose functions.\n\nIn this example, the %d format operator requires an integer operand:\n\n\tfmt.Printf(\"%d\", \"hello\") // fmt.Printf format %d has arg \"hello\" of wrong type string\n\nSee the documentation of the fmt package for the complete set of\nformat operators and their operand types.\n\nTo enable printf checking on a function that is not found by this\nanalyzer's heuristics (for example, because control is obscured by\ndynamic method calls), insert a bogus call:\n\n\tfunc MyPrintf(format string, args ...any) {\n\t\tif false {\n\t\t\t_ = fmt.Sprintf(format, args...) // enable printf checker\n\t\t}\n\t\t...\n\t}\n\nThe -funcs flag specifies a comma-separated list of names of additional\nknown formatting functions or methods. If the name contains a period,\nit must denote a specific function using one of the following forms:\n\n\tdir/pkg.Function\n\tdir/pkg.Type.Method\n\t(*dir/pkg.Type).Method\n\nOtherwise the name is interpreted as a case-insensitive unqualified\nidentifier such as \"errorf\". Either way, if a listed name ends in f, the\nfunction is assumed to be Printf-like, taking a format string before the\nargument list. Otherwise it is assumed to be Print-like, taking a list\nof arguments with no format string.","default":true},"shadow":{"type":"boolean","markdownDescription":"check for possible unintended shadowing of variables\n\nThis analyzer check for shadowed variables.\nA shadowed variable is a variable declared in an inner scope\nwith the same name and type as a variable in an outer scope,\nand where the outer variable is mentioned after the inner one\nis declared.\n\n(This definition can be refined; the module generates too many\nfalse positives and is not yet enabled by default.)\n\nFor example:\n\n\tfunc BadRead(f *os.File, buf []byte) error {\n\t\tvar err error\n\t\tfor {\n\t\t\tn, err := f.Read(buf) // shadows the function variable 'err'\n\t\t\tif err != nil {\n\t\t\t\tbreak // causes return of wrong value\n\t\t\t}\n\t\t\tfoo(buf)\n\t\t}\n\t\treturn err\n\t}","default":false},"shift":{"type":"boolean","markdownDescription":"check for shifts that equal or exceed the width of the integer","default":true},"simplifycompositelit":{"type":"boolean","markdownDescription":"check for composite literal simplifications\n\nAn array, slice, or map composite literal of the form:\n\t[]T{T{}, T{}}\nwill be simplified to:\n\t[]T{{}, {}}\n\nThis is one of the simplifications that \"gofmt -s\" applies.","default":true},"simplifyrange":{"type":"boolean","markdownDescription":"check for range statement simplifications\n\nA range of the form:\n\tfor x, _ = range v {...}\nwill be simplified to:\n\tfor x = range v {...}\n\nA range of the form:\n\tfor _ = range v {...}\nwill be simplified to:\n\tfor range v {...}\n\nThis is one of the simplifications that \"gofmt -s\" applies.","default":true},"simplifyslice":{"type":"boolean","markdownDescription":"check for slice simplifications\n\nA slice expression of the form:\n\ts[a:len(s)]\nwill be simplified to:\n\ts[a:]\n\nThis is one of the simplifications that \"gofmt -s\" applies.","default":true},"slog":{"type":"boolean","markdownDescription":"check for invalid structured logging calls\n\nThe slog checker looks for calls to functions from the log/slog\npackage that take alternating key-value pairs. It reports calls\nwhere an argument in a key position is neither a string nor a\nslog.Attr, and where a final key is missing its value.\nFor example,it would report\n\n\tslog.Warn(\"message\", 11, \"k\") // slog.Warn arg \"11\" should be a string or a slog.Attr\n\nand\n\n\tslog.Info(\"message\", \"k1\", v1, \"k2\") // call to slog.Info missing a final value","default":true},"sortslice":{"type":"boolean","markdownDescription":"check the argument type of sort.Slice\n\nsort.Slice requires an argument of a slice type. Check that\nthe interface{} value passed to sort.Slice is actually a slice.","default":true},"stdmethods":{"type":"boolean","markdownDescription":"check signature of methods of well-known interfaces\n\nSometimes a type may be intended to satisfy an interface but may fail to\ndo so because of a mistake in its method signature.\nFor example, the result of this WriteTo method should be (int64, error),\nnot error, to satisfy io.WriterTo:\n\n\ttype myWriterTo struct{...}\n\tfunc (myWriterTo) WriteTo(w io.Writer) error { ... }\n\nThis check ensures that each method whose name matches one of several\nwell-known interface methods from the standard library has the correct\nsignature for that interface.\n\nChecked method names include:\n\n\tFormat GobEncode GobDecode MarshalJSON MarshalXML\n\tPeek ReadByte ReadFrom ReadRune Scan Seek\n\tUnmarshalJSON UnreadByte UnreadRune WriteByte\n\tWriteTo","default":true},"stringintconv":{"type":"boolean","markdownDescription":"check for string(int) conversions\n\nThis checker flags conversions of the form string(x) where x is an integer\n(but not byte or rune) type. Such conversions are discouraged because they\nreturn the UTF-8 representation of the Unicode code point x, and not a decimal\nstring representation of x as one might expect. Furthermore, if x denotes an\ninvalid code point, the conversion cannot be statically rejected.\n\nFor conversions that intend on using the code point, consider replacing them\nwith string(rune(x)). Otherwise, strconv.Itoa and its equivalents return the\nstring representation of the value in the desired base.","default":true},"structtag":{"type":"boolean","markdownDescription":"check that struct field tags conform to reflect.StructTag.Get\n\nAlso report certain struct tags (json, xml) used with unexported fields.","default":true},"stubmethods":{"type":"boolean","markdownDescription":"stub methods analyzer\n\nThis analyzer generates method stubs for concrete types\nin order to implement a target interface","default":true},"testinggoroutine":{"type":"boolean","markdownDescription":"report calls to (*testing.T).Fatal from goroutines started by a test.\n\nFunctions that abruptly terminate a test, such as the Fatal, Fatalf, FailNow, and\nSkip{,f,Now} methods of *testing.T, must be called from the test goroutine itself.\nThis checker detects calls to these functions that occur within a goroutine\nstarted by the test. For example:\n\n\tfunc TestFoo(t *testing.T) {\n\t    go func() {\n\t        t.Fatal(\"oops\") // error: (*T).Fatal called from non-test goroutine\n\t    }()\n\t}","default":true},"tests":{"type":"boolean","markdownDescription":"check for common mistaken usages of tests and examples\n\nThe tests checker walks Test, Benchmark, Fuzzing and Example functions checking\nmalformed names, wrong signatures and examples documenting non-existent\nidentifiers.\n\nPlease see the documentation for package testing in golang.org/pkg/testing\nfor the conventions that are enforced for Tests, Benchmarks, and Examples.","default":true},"timeformat":{"type":"boolean","markdownDescription":"check for calls of (time.Time).Format or time.Parse with 2006-02-01\n\nThe timeformat checker looks for time formats with the 2006-02-01 (yyyy-dd-mm)\nformat. Internationally, \"yyyy-dd-mm\" does not occur in common calendar date\nstandards, and so it is more likely that 2006-01-02 (yyyy-mm-dd) was intended.","default":true},"undeclaredname":{"type":"boolean","markdownDescription":"suggested fixes for \"undeclared name: <>\"\n\nThis checker provides suggested fixes for type errors of the\ntype \"undeclared name: <>\". It will either insert a new statement,\nsuch as:\n\n\"<> := \"\n\nor a new function declaration, such as:\n\nfunc <>(inferred parameters) {\n\tpanic(\"implement me!\")\n}\n","default":true},"unmarshal":{"type":"boolean","markdownDescription":"report passing non-pointer or non-interface values to unmarshal\n\nThe unmarshal analysis reports calls to functions such as json.Unmarshal\nin which the argument type is not a pointer or an interface.","default":true},"unreachable":{"type":"boolean","markdownDescription":"check for unreachable code\n\nThe unreachable analyzer finds statements that execution can never reach\nbecause they are preceded by an return statement, a call to panic, an\ninfinite loop, or similar constructs.","default":true},"unsafeptr":{"type":"boolean","markdownDescription":"check for invalid conversions of uintptr to unsafe.Pointer\n\nThe unsafeptr analyzer reports likely incorrect uses of unsafe.Pointer\nto convert integers to pointers. A conversion from uintptr to\nunsafe.Pointer is invalid if it implies that there is a uintptr-typed\nword in memory that holds a pointer value, because that word will be\ninvisible to stack copying and to the garbage collector.","default":true},"unusedparams":{"type":"boolean","markdownDescription":"check for unused parameters of functions\n\nThe unusedparams analyzer checks functions to see if there are\nany parameters that are not being used.\n\nTo reduce false positives it ignores:\n- methods\n- parameters that do not have a name or have the name '_' (the blank identifier)\n- functions in test files\n- functions with empty bodies or those with just a return stmt","default":false},"unusedresult":{"type":"boolean","markdownDescription":"check for unused results of calls to some functions\n\nSome functions like fmt.Errorf return a result and have no side\neffects, so it is always a mistake to discard the result. Other\nfunctions may return an error that must not be ignored, or a cleanup\noperation that must be called. This analyzer reports calls to\nfunctions like these when the result of the call is ignored.\n\nThe set of functions may be controlled using flags.","default":true},"unusedvariable":{"type":"boolean","markdownDescription":"check for unused variables\n\nThe unusedvariable analyzer suggests fixes for unused variables errors.\n","default":false},"unusedwrite":{"type":"boolean","markdownDescription":"checks for unused writes\n\nThe analyzer reports instances of writes to struct fields and\narrays that are never read. Specifically, when a struct object\nor an array is copied, its elements are copied implicitly by\nthe compiler, and any element write to this copy does nothing\nwith the original object.\n\nFor example:\n\n\ttype T struct { x int }\n\n\tfunc f(input []T) {\n\t\tfor i, v := range input {  // v is a copy\n\t\t\tv.x = i  // unused write to field x\n\t\t}\n\t}\n\nAnother example is about non-pointer receiver:\n\n\ttype T struct { x int }\n\n\tfunc (t T) f() {  // t is a copy\n\t\tt.x = i  // unused write to field x\n\t}","default":false},"useany":{"type":"boolean","markdownDescription":"check for constraints that could be simplified to \"any\"","default":false}}},"ui.diagnostic.analysisProgressReporting":{"type":"boolean","markdownDescription":"analysisProgressReporting controls whether gopls sends progress\nnotifications when construction of its index of analysis facts is taking a\nlong time. Cancelling these notifications will cancel the indexing task,\nthough it will restart after the next change in the workspace.\n\nWhen a package is opened for the first time and heavyweight analyses such as\nstaticcheck are enabled, it can take a while to construct the index of\nanalysis facts for all its dependencies. The index is cached in the\nfilesystem, so subsequent analysis should be faster.\n","default":true,"scope":"resource"},"ui.diagnostic.annotations":{"type":"object","markdownDescription":"(Experimental) annotations specifies the various kinds of optimization diagnostics\nthat should be reported by the gc_details command.\n","scope":"resource","properties":{"bounds":{"type":"boolean","markdownDescription":"`\"bounds\"` controls bounds checking diagnostics.\n","default":true},"escape":{"type":"boolean","markdownDescription":"`\"escape\"` controls diagnostics about escape choices.\n","default":true},"inline":{"type":"boolean","markdownDescription":"`\"inline\"` controls diagnostics about inlining choices.\n","default":true},"nil":{"type":"boolean","markdownDescription":"`\"nil\"` controls nil checks.\n","default":true}}},"ui.diagnostic.diagnosticsDelay":{"type":"string","markdownDescription":"(Advanced) diagnosticsDelay controls the amount of time that gopls waits\nafter the most recent file modification before computing deep diagnostics.\nSimple diagnostics (parsing and type-checking) are always run immediately\non recently modified packages.\n\nThis option must be set to a valid duration string, for example `\"250ms\"`.\n","default":"1s","scope":"resource"},"ui.diagnostic.staticcheck":{"type":"boolean","markdownDescription":"(Experimental) staticcheck enables additional analyses from staticcheck.io.\nThese analyses are documented on\n[Staticcheck's website](https://staticcheck.io/docs/checks/).\n","default":false,"scope":"resource"},"ui.documentation.hoverKind":{"type":"string","markdownDescription":"hoverKind controls the information that appears in the hover text.\nSingleLine and Structured are intended for use only by authors of editor plugins.\n","enum":["FullDocumentation","NoDocumentation","SingleLine","Structured","SynopsisDocumentation"],"markdownEnumDescriptions":["","","","`\"Structured\"` is an experimental setting that returns a structured hover format.\nThis format separates the signature from the documentation, so that the client\ncan do more manipulation of these fields.\n\nThis should only be used by clients that support this behavior.\n",""],"default":"FullDocumentation","scope":"resource"},"ui.documentation.linkTarget":{"type":"string","markdownDescription":"linkTarget controls where documentation links go.\nIt might be one of:\n\n* `\"godoc.org\"`\n* `\"pkg.go.dev\"`\n\nIf company chooses to use its own `godoc.org`, its address can be used as well.\n\nModules matching the GOPRIVATE environment variable will not have\ndocumentation links in hover.\n","default":"pkg.go.dev","scope":"resource"},"ui.documentation.linksInHover":{"type":"boolean","markdownDescription":"linksInHover toggles the presence of links to documentation in hover.\n","default":true,"scope":"resource"},"ui.navigation.importShortcut":{"type":"string","markdownDescription":"importShortcut specifies whether import statements should link to\ndocumentation or go to definitions.\n","enum":["Both","Definition","Link"],"markdownEnumDescriptions":["","",""],"default":"Both","scope":"resource"},"ui.navigation.symbolMatcher":{"type":"string","markdownDescription":"(Advanced) symbolMatcher sets the algorithm that is used when finding workspace symbols.\n","enum":["CaseInsensitive","CaseSensitive","FastFuzzy","Fuzzy"],"markdownEnumDescriptions":["","","",""],"default":"FastFuzzy","scope":"resource"},"ui.navigation.symbolScope":{"type":"string","markdownDescription":"symbolScope controls which packages are searched for workspace/symbol\nrequests. The default value, \"workspace\", searches only workspace\npackages. The legacy behavior, \"all\", causes all loaded packages to be\nsearched, including dependencies; this is more expensive and may return\nunwanted results.\n","enum":["all","workspace"],"markdownEnumDescriptions":["`\"all\"` matches symbols in any loaded package, including\ndependencies.\n","`\"workspace\"` matches symbols in workspace packages only.\n"],"default":"all","scope":"resource"},"ui.navigation.symbolStyle":{"type":"string","markdownDescription":"(Advanced) symbolStyle controls how symbols are qualified in symbol responses.\n\nExample Usage:\n\n```json5\n\"gopls\": {\n...\n  \"symbolStyle\": \"Dynamic\",\n...\n}\n```\n","enum":["Dynamic","Full","Package"],"markdownEnumDescriptions":["`\"Dynamic\"` uses whichever qualifier results in the highest scoring\nmatch for the given symbol query. Here a \"qualifier\" is any \"/\" or \".\"\ndelimited suffix of the fully qualified symbol. i.e. \"to/pkg.Foo.Field\" or\njust \"Foo.Field\".\n","`\"Full\"` is fully qualified symbols, i.e.\n\"path/to/pkg.Foo.Field\".\n","`\"Package\"` is package qualified symbols i.e.\n\"pkg.Foo.Field\".\n"],"default":"Dynamic","scope":"resource"},"ui.noSemanticNumber":{"type":"boolean","markdownDescription":"(Experimental) noSemanticNumber  turns off the sending of the semantic token 'number'\n","default":false,"scope":"resource"},"ui.noSemanticString":{"type":"boolean","markdownDescription":"(Experimental) noSemanticString turns off the sending of the semantic token 'string'\n","default":false,"scope":"resource"},"ui.semanticTokens":{"type":"boolean","markdownDescription":"(Experimental) semanticTokens controls whether the LSP server will send\nsemantic tokens to the client.\n","default":false,"scope":"resource"},"verboseOutput":{"type":"boolean","markdownDescription":"(For Debugging) verboseOutput enables additional debug logging.\n","default":false,"scope":"resource"}}},"go.diagnostic.vulncheck":{"type":"string","markdownDescription":"(Experimental) vulncheck enables vulnerability scanning.\n","enum":["Imports","Off"],"markdownEnumDescriptions":["`\"Imports\"`: In Imports mode, `gopls` will report vulnerabilities that affect packages\ndirectly and indirectly used by the analyzed main module.\n","`\"Off\"`: Disable vulnerability analysis.\n"],"default":"Off","scope":"resource"},"go.inlayHints.assignVariableTypes":{"type":"boolean","markdownDescription":"Enable/disable inlay hints for variable types in assign statements:\n```go\n\ti/* int*/, j/* int*/ := 0, len(r)-1\n```","default":false},"go.inlayHints.compositeLiteralFields":{"type":"boolean","markdownDescription":"Enable/disable inlay hints for composite literal field names:\n```go\n\t{/*in: */\"Hello, world\", /*want: */\"dlrow ,olleH\"}\n```","default":false},"go.inlayHints.compositeLiteralTypes":{"type":"boolean","markdownDescription":"Enable/disable inlay hints for composite literal types:\n```go\n\tfor _, c := range []struct {\n\t\tin, want string\n\t}{\n\t\t/*struct{ in string; want string }*/{\"Hello, world\", \"dlrow ,olleH\"},\n\t}\n```","default":false},"go.inlayHints.constantValues":{"type":"boolean","markdownDescription":"Enable/disable inlay hints for constant values:\n```go\n\tconst (\n\t\tKindNone   Kind = iota/* = 0*/\n\t\tKindPrint/*  = 1*/\n\t\tKindPrintf/* = 2*/\n\t\tKindErrorf/* = 3*/\n\t)\n```","default":false},"go.inlayHints.functionTypeParameters":{"type":"boolean","markdownDescription":"Enable/disable inlay hints for implicit type parameters on generic functions:\n```go\n\tmyFoo/*[int, string]*/(1, \"hello\")\n```","default":false},"go.inlayHints.parameterNames":{"type":"boolean","markdownDescription":"Enable/disable inlay hints for parameter names:\n```go\n\tparseInt(/* str: */ \"123\", /* radix: */ 8)\n```","default":false},"go.inlayHints.rangeVariableTypes":{"type":"boolean","markdownDescription":"Enable/disable inlay hints for variable types in range statements:\n```go\n\tfor k/* int*/, v/* string*/ := range []string{} {\n\t\tfmt.Println(k, v)\n\t}\n```","default":false}}},"menus":{"commandPalette":[{"command":"go.test.refresh","when":"false"},{"command":"go.test.showProfiles","when":"false"},{"command":"go.test.captureProfile","when":"false"},{"command":"go.test.deleteProfile","when":"false"},{"command":"go.test.showProfileFile","when":"false"},{"command":"go.explorer.refresh","when":"false"},{"command":"go.explorer.open","when":"false"}],"debug/callstack/context":[{"command":"go.debug.toggleHideSystemGoroutines","when":"debugType == 'go' && callStackItemType == 'stackFrame' || (callStackItemType == 'thread' && callStackItemStopped)"}],"editor/context":[{"when":"editorTextFocus && config.go.editorContextMenuCommands.toggleTestFile && resourceLangId == go","command":"go.toggle.test.file","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.addTags && resourceLangId == go","command":"go.add.tags","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.removeTags && resourceLangId == go","command":"go.remove.tags","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.testAtCursor && resourceLangId == go","command":"go.test.cursor","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.benchmarkAtCursor && resourceLangId == go","command":"go.benchmark.cursor","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.debugTestAtCursor && resourceLangId == go","command":"go.debug.cursor","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.testFile && resourceLangId == go","command":"go.test.file","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.testPackage && resourceLangId == go","command":"go.test.package","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.generateTestForFunction && resourceLangId == go","command":"go.test.generate.function","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.generateTestForFile && resourceLangId == go","command":"go.test.generate.file","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.generateTestForPackage && resourceLangId == go","command":"go.test.generate.package","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.addImport && resourceLangId == go","command":"go.import.add","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.testCoverage && resourceLangId == go","command":"go.test.coverage","group":"Go group 1"},{"when":"editorTextFocus && config.go.editorContextMenuCommands.playground && resourceLangId == go","command":"go.playground","group":"Go group 1"},{"when":"editorTextFocus && resourceLangId == go","command":"go.show.commands","group":"Go group 2"}],"testing/item/context":[{"command":"go.test.refresh","when":"testId in go.tests","group":"inline"},{"command":"go.test.showProfiles","when":"testId in go.profiledTests","group":"profile"},{"command":"go.test.captureProfile","when":"testId in go.tests && testId =~ /\\?(test|benchmark)/","group":"profile"}],"view/title":[{"command":"go.explorer.refresh","when":"view == go.explorer","group":"navigation"}],"view/item/context":[{"command":"go.test.deleteProfile","when":"viewItem == go:test:file"},{"command":"go.explorer.open","when":"viewItem == go:explorer:envfile","group":"inline"},{"command":"go.workspace.editEnv","when":"viewItem =~ /(go:explorer:envtree|go:explorer:envitem)/ && workspaceFolderCount > 0","group":"inline"},{"command":"go.workspace.resetEnv","when":"viewItem =~ /go:explorer:env/ && workspaceFolderCount > 0"}]},"views":{"explorer":[{"id":"go.explorer","name":"go","icon":"media/go-logo-white.svg","when":"go.showExplorer"}],"test":[{"id":"go.test.profile","name":"Profiles","contextualTitle":"Go","icon":"$(graph)","when":"go.hasProfiles"}]},"taskDefinitions":[{"type":"go","required":["command"],"properties":{"label":{"type":"string","description":"the name of go task"},"command":{"type":"string","description":"go command to run","enum":["build","test"],"enumDescriptions":["go build","go test"],"default":"build"},"args":{"type":"array","description":"additional arguments to pass to the go command (including the build target)","items":{"type":"string"}},"options":{"type":"object","description":"additional command options","properties":{"cwd":{"type":"string","description":"the current working directory of the executed program or script. If omitted Code's current workspace root is used."},"env":{"type":"object","markdownDescription":"Environment variables in the format of \"name\": \"value\"."}}}}}]}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/golang.go-0.40.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"d6f6cfea-4b6f-41f4-b571-6ad2ab7918da","publisherId":"dbf6ae0a-da75-4167-ac8b-75b4512f2153","publisherDisplayName":"golang","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205670358,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"neonxp.gotools","uuid":"faa87fd2-3a93-4fb1-af4b-61328468be0a"},"manifest":{"name":"gotools","displayName":"Golang Tools","description":"Tools for productive work","version":"0.1.5","engines":{"vscode":"^1.80.0"},"publisher":"neonxp","license":"GPL-3.0-or-later","author":{"name":"Alexander NeonXP Kiryukhin","email":"a.kiryukhin@mail.ru","url":"https://neonxp.ru/"},"repository":{"type":"git","url":"https://github.com/neonxp/GoTools"},"icon":"icon.png","categories":["Programming Languages","Snippets","Other"],"keywords":["go","golang"],"activationEvents":["onLanguage:go","onCommand:gotools.implement"],"main":"./src/extension.js","contributes":{"snippets":[{"language":"go","path":"./snippets/snippets.json"}],"menus":{"touchBar":[{"command":"gotools.wrap-error","when":"allowWrapIferr"}]},"commands":[{"command":"gotools.wrap-error","title":"if err≠nil {...}"},{"command":"gotools.implement","title":"Implement Interface Methods","category":"Go"},{"command":"gotools.group-imports","title":"Group imports","category":"Go"}]},"scripts":{"lint":"eslint .","pretest":"npm run lint","test":"node ./test/runTest.js"},"devDependencies":{"@types/glob":"^8.1.0","@types/mocha":"^10.0.1","@types/node":"20.2.5","@types/vscode":"^1.80.0","@vscode/test-electron":"^2.3.2","eslint":"^8.41.0","glob":"^8.1.0","mocha":"^10.2.0","typescript":"^5.1.3","lodash.debounce":"^4.0.8"},"dependencies":{"lodash.debounce":"^4.0.8"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/neonxp.gotools-0.1.5-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"faa87fd2-3a93-4fb1-af4b-61328468be0a","publisherId":"94a1b51a-8679-4ee7-b0ed-de971ea53b13","publisherDisplayName":"neonxp","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205695636,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"mkhl.direnv","uuid":"e365e970-aeef-4dcd-8e4a-17306a27ab62"},"manifest":{"name":"direnv","displayName":"direnv","description":"unclutter your .profile","version":"0.15.2","preview":true,"icon":"assets/icon.png","maintainers":[{"name":"The direnv VSCode extension team","url":"https://github.com/orgs/direnv/teams/vscode"}],"contributors":[{"name":"cab404","url":"https://github.com/cab404"},{"name":"mkhl","url":"https://github.com/mkhl"}],"publisher":"mkhl","license":"0BSD","repository":{"type":"git","url":"https://github.com/direnv/direnv-vscode"},"engines":{"vscode":"^1.71.0"},"categories":["Other"],"activationEvents":["*","onLanguage"],"capabilities":{"untrustedWorkspaces":{"supported":false,"description":"direnv can run arbitrary shell code"}},"contributes":{"configuration":{"title":"direnv","properties":{"direnv.extraEnv":{"type":"object","scope":"machine-overridable","description":"Environment variables that will be set before running direnv","additionalProperties":{"type":"string"}},"direnv.path.executable":{"type":"string","default":"direnv","scope":"machine-overridable","description":"Path to the direnv executable"},"direnv.status.showChangesCount":{"type":"boolean","default":true,"description":"Show the number of changed environment variables"},"direnv.restart.automatic":{"type":"boolean","default":false,"description":"Automatically restart extension host upon environment changes"}}},"commands":[{"command":"direnv.allow","title":"direnv: Allow this .envrc file"},{"command":"direnv.block","title":"direnv: Block this .envrc file"},{"command":"direnv.create","title":"direnv: Create .envrc file"},{"command":"direnv.open","title":"direnv: Open .envrc file"},{"command":"direnv.reload","title":"direnv: Reload environment"},{"command":"direnv.reset","title":"direnv: Reset and reload environment"},{"command":"direnv.loadEnvrc","title":"direnv: Load .envrc file"}],"menus":{"commandPalette":[{"command":"direnv.allow","when":"editorLangId == shellscript"},{"command":"direnv.block","when":"editorLangId == shellscript"}],"explorer/context":[{"when":"resourceFilename == .envrc","command":"direnv.loadEnvrc","group":"5_direnv@1"}]}},"main":"./dist/extension.js","scripts":{"version":"bin/update-changelog $npm_package_version && git add CHANGELOG.md","package":"vsce package --allow-star-activation","vscode:prepublish":"run-s 'build -- --minify {@}' --","clean":"rimraf ./out ./dist","build":"esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --platform=node --target=node16 --external:vscode","eslint":"eslint --cache --cache-location ./.cache/eslint/ .","prettier":"prettier --cache --cache-location ./.cache/prettier/ .","compile:source":"run-s 'build -- --sourcemap {@}' --","compile:tests":"tsc","watch:source":"run-s 'compile:source -- --watch {@}' --","watch:tests":"run-s 'compile:tests -- --watch {@}' --","lint":"run-p --aggregate-output --continue-on-error lint:*","lint:eslint":"run-s 'eslint -- {@}' --","lint:prettier":"run-s 'prettier -- --check {@}' --","fix":"run-p --aggregate-output --continue-on-error fix:*","fix:eslint":"run-s 'eslint -- --fix {@}' --","fix:prettier":"run-s 'prettier -- --write {@}' --","pretest":"run-p --aggregate-output --continue-on-error compile:*","test":"node ./out/test/runTest.js"},"devDependencies":{"@types/mocha":"^10.0.1","@types/node":"16.x","@types/sinon":"^10.0.16","@types/vscode":"1.71.x","@typescript-eslint/eslint-plugin":"^6.7.0","@typescript-eslint/parser":"^6.7.0","@vscode/test-electron":"^2.3.4","@vscode/vsce":"^2.21.0","esbuild":"^0.19.2","eslint":"^8.49.0","eslint-config-prettier":"^9.0.0","glob":"^10.3.4","mocha":"^10.2.0","npm-run-all":"^4.1.5","prettier":"^3.0.3","rimraf":"^5.0.1","sinon":"^15.2.0","typescript":"^5.2.2"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/mkhl.direnv-0.15.2-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"e365e970-aeef-4dcd-8e4a-17306a27ab62","publisherId":"577d6c37-7054-4ca5-b4ce-9250409f3903","publisherDisplayName":"mkhl","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205724579,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"jeff-hykin.better-shellscript-syntax","uuid":"f27ad139-0ff0-4fea-a7c3-d1af80eed6ae"},"manifest":{"name":"better-shellscript-syntax","displayName":"Better Shell Syntax","version":"1.6.3","repository":{"url":"https://github.com/jeff-hykin/better-shell-syntax","type":"git"},"icon":"icon.png","scripts":{},"keywords":["syntax","textmate","highlighting","coloring","color"],"engines":{"vscode":"^1.0.0"},"author":"Jeff Hykin","publisher":"jeff-hykin","contributes":{"grammars":[{"language":"shellscript","scopeName":"source.shell","path":"autogenerated/shell.tmLanguage.json","balancedBracketScopes":["*"],"unbalancedBracketScopes":["punctuation.definition.case-pattern.shell"]}]},"categories":["Programming Languages"],"description":"This enables your theme to better color your code. There are \"textmate scopes\" that your theme uses to apply color, this extension adds/improves the textmate scopes which should improve the way your code looks.","bugs":{"url":"https://github.com/jeff-hykin/better-shell-syntax/issues"},"homepage":"https://github.com/jeff-hykin/better-shell-syntax#readme","license":"ISC","devDependencies":{"chalk":"^2.4.2","dictionary-en-us":"^2.1.1","lodash":"^4.17.19","nspell":"^2.1.2","oniguruma":"^7.2.0","textmate-bailout":"^1.1.0","vsce":"^1.99.0","yargs":"^17.5.1","ovsx":"^0.5.1","textmate-tester":"^1.1.9"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/jeff-hykin.better-shellscript-syntax-1.6.3-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"f27ad139-0ff0-4fea-a7c3-d1af80eed6ae","publisherId":"b734936b-6cc4-40c1-b17a-c6a7e1f680cd","publisherDisplayName":"jeff-hykin","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205724649,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"formulahendry.code-runner","uuid":"a6a0c5b2-d078-4bf5-a9ee-4e37054414b3"},"manifest":{"name":"code-runner","displayName":"Code Runner","description":"Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo","version":"0.12.1","featureFlags":{"usingNewPythonInterpreterPathApi":true,"usingNewPythonInterpreterPathApiV2":true},"publisher":"formulahendry","icon":"images/logo.png","engines":{"vscode":"^1.56.0"},"categories":["Programming Languages","Other"],"keywords":["javascript","php","python","perl","ruby","multi-root ready"],"bugs":{"url":"https://github.com/formulahendry/vscode-code-runner/issues","email":"formulahendry@gmail.com"},"homepage":"https://github.com/formulahendry/vscode-code-runner/blob/master/README.md","repository":{"type":"git","url":"https://github.com/formulahendry/vscode-code-runner.git"},"sponsor":{"url":"https://www.patreon.com/junhan"},"activationEvents":["onCommand:code-runner.run","onCommand:code-runner.runCustomCommand","onCommand:code-runner.runByLanguage","onStartupFinished"],"main":"./out/src/extension","contributes":{"commands":[{"command":"code-runner.run","title":"Run Code","icon":"$(play)"},{"command":"code-runner.runCustomCommand","title":"Run Custom Command"},{"command":"code-runner.runByLanguage","title":"Run By Language"},{"command":"code-runner.stop","title":"Stop Code Run","icon":"$(debug-stop)"}],"keybindings":[{"command":"code-runner.run","key":"ctrl+alt+n"},{"command":"code-runner.runCustomCommand","key":"ctrl+alt+k"},{"command":"code-runner.runByLanguage","key":"ctrl+alt+j"},{"command":"code-runner.stop","key":"ctrl+alt+m"}],"menus":{"editor/context":[{"when":"!inOutput && config.code-runner.showRunCommandInEditorContextMenu","command":"code-runner.run","group":"navigation"},{"when":"inOutput && !config.code-runner.runInTerminal","command":"code-runner.stop","group":"stop-code-run"}],"editor/title/run":[{"when":"config.code-runner.showRunIconInEditorTitleMenu","command":"code-runner.run","group":"navigation"}],"editor/title":[{"when":"config.code-runner.showStopIconInEditorTitleMenu && code-runner.codeRunning","command":"code-runner.stop","group":"navigation"}],"explorer/context":[{"when":"!explorerResourceIsFolder && config.code-runner.showRunCommandInExplorerContextMenu","command":"code-runner.run","group":"navigation"}]},"configuration":{"type":"object","title":"Run Code configuration","properties":{"code-runner.executorMapByGlob":{"type":"object","default":{"pom.xml":"cd $dir && mvn clean package"},"description":"Set the executor by glob.","scope":"resource"},"code-runner.executorMap":{"type":"object","default":{"javascript":"node","java":"cd $dir && javac $fileName && java $fileNameWithoutExt","c":"cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","zig":"zig run","cpp":"cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","objective-c":"cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","php":"php","python":"python -u","perl":"perl","perl6":"perl6","ruby":"ruby","go":"go run","lua":"lua","groovy":"groovy","powershell":"powershell -ExecutionPolicy ByPass -File","bat":"cmd /c","shellscript":"bash","fsharp":"fsi","csharp":"scriptcs","vbscript":"cscript //Nologo","typescript":"ts-node","coffeescript":"coffee","scala":"scala","swift":"swift","julia":"julia","crystal":"crystal","ocaml":"ocaml","r":"Rscript","applescript":"osascript","clojure":"lein exec","haxe":"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt","rust":"cd $dir && rustc $fileName && $dir$fileNameWithoutExt","racket":"racket","scheme":"csi -script","ahk":"autohotkey","autoit":"autoit3","dart":"dart","pascal":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt","d":"cd $dir && dmd $fileName && $dir$fileNameWithoutExt","haskell":"runghc","nim":"nim compile --verbosity:0 --hints:off --run","lisp":"sbcl --script","kit":"kitc --run","v":"v run","sass":"sass --style expanded","scss":"scss --style expanded","less":"cd $dir && lessc $fileName $fileNameWithoutExt.css","FortranFreeForm":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran-modern":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran_fixed-form":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","sml":"cd $dir && sml $fileName","mojo":"mojo run"},"description":"Set the executor of each language.","scope":"resource"},"code-runner.executorMapByFileExtension":{"type":"object","default":{".vb":"cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",".vbs":"cscript //Nologo",".scala":"scala",".jl":"julia",".cr":"crystal",".ml":"ocaml",".zig":"zig run",".exs":"elixir",".hx":"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",".rkt":"racket",".scm":"csi -script",".ahk":"autohotkey",".au3":"autoit3",".kt":"cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",".kts":"kotlinc -script",".dart":"dart",".pas":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt",".pp":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt",".d":"cd $dir && dmd $fileName && $dir$fileNameWithoutExt",".hs":"runhaskell",".nim":"nim compile --verbosity:0 --hints:off --run",".csproj":"dotnet run --project",".fsproj":"dotnet run --project",".lisp":"sbcl --script",".kit":"kitc --run",".v":"v run",".vsh":"v run",".sass":"sass --style expanded",".cu":"cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",".ring":"ring",".sml":"cd $dir && sml $fileName",".mojo":"mojo run"},"description":"Set the executor of each file extension.","scope":"resource"},"code-runner.customCommand":{"type":"string","default":"echo Hello","description":"Set the custom command to run.","scope":"resource"},"code-runner.languageIdToFileExtensionMap":{"type":"object","default":{"bat":".bat","powershell":".ps1","typescript":".ts"},"description":"Set the mapping of languageId to file extension.","scope":"resource"},"code-runner.defaultLanguage":{"type":"string","default":"","description":"Set the default language to run.","scope":"resource"},"code-runner.cwd":{"type":"string","default":"","description":"Set the working directory.","scope":"resource"},"code-runner.fileDirectoryAsCwd":{"type":"boolean","default":false,"description":"Whether to use the directory of the file to be executed as the working directory.","scope":"resource"},"code-runner.clearPreviousOutput":{"type":"boolean","default":false,"description":"Whether to clear previous output before each run.","scope":"resource"},"code-runner.saveAllFilesBeforeRun":{"type":"boolean","default":false,"description":"Whether to save all files before running.","scope":"resource"},"code-runner.saveFileBeforeRun":{"type":"boolean","default":false,"description":"Whether to save the current file before running.","scope":"resource"},"code-runner.enableAppInsights":{"type":"boolean","default":true,"description":"Whether to enable AppInsights to track user telemetry data.","scope":"resource"},"code-runner.showExecutionMessage":{"type":"boolean","default":true,"description":"Whether to show extra execution message like [Running] ... and [Done] ...","scope":"resource"},"code-runner.runInTerminal":{"type":"boolean","default":false,"description":"Whether to run code in Integrated Terminal.","scope":"resource"},"code-runner.terminalRoot":{"type":"string","default":"","description":"For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\\path' with '/mnt/c/path'","scope":"resource"},"code-runner.preserveFocus":{"type":"boolean","default":true,"description":"Whether to preserve focus on code editor after code run is triggered.","scope":"resource"},"code-runner.ignoreSelection":{"type":"boolean","default":false,"description":"Whether to ignore selection to always run entire file.","scope":"resource"},"code-runner.showRunIconInEditorTitleMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' icon in editor title menu.","scope":"resource"},"code-runner.showStopIconInEditorTitleMenu":{"type":"boolean","default":true,"description":"Whether to show 'Stop code run' icon in the editor title menu when code is running.","scope":"resource"},"code-runner.showRunCommandInEditorContextMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' command in editor context menu.","scope":"resource"},"code-runner.showRunCommandInExplorerContextMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' command in explorer context menu.","scope":"resource"},"code-runner.temporaryFileName":{"type":"string","default":"tempCodeRunnerFile","description":"Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.","scope":"resource"},"code-runner.respectShebang":{"type":"boolean","default":true,"description":"Whether to respect Shebang to run code.","scope":"resource"}}},"languages":[{"id":"code-runner-output","mimetypes":["text/x-code-output"]}],"grammars":[{"language":"code-runner-output","scopeName":"code-runner.output","path":"./syntaxes/code-runner-output.tmLanguage"}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","tslint":"tslint -t verbose src/**/*.ts"},"dependencies":{"applicationinsights":"^0.19.0","micromatch":"^4.0.2","tree-kill":"^1.2.2"},"devDependencies":{"@types/micromatch":"^3.1.0","@types/mocha":"^2.2.32","@types/node":"^6.0.40","@types/vscode":"^1.56.0","mocha":"^6.1.4","tslint":"^5.5.0","typescript":"^3.8.3"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/formulahendry.code-runner-0.12.1-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"a6a0c5b2-d078-4bf5-a9ee-4e37054414b3","publisherId":"38bbe3f0-5204-4170-845e-c2f966d979b8","publisherDisplayName":"formulahendry","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205724616,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"foxundermoon.shell-format","uuid":"5fb19573-2183-4cf2-b53d-0fb869dae7ae"},"manifest":{"name":"shell-format","displayName":"shell-format","description":"shellscript、Dockerfile、properties、gitignore、dotenv、hosts、jvmoptions... DocumentFormat","version":"7.0.1","publisher":"foxundermoon","engines":{"vscode":"^1.30.0"},"categories":["Formatters"],"activationEvents":["onLanguage:shellscript","onLanguage:dotenv","onLanguage:dockerfile","onLanguage:ignore","onLanguage:hosts","onLanguage:jvmoptions","onLanguage:properties","onLanguage:spring-boot-properties","onLanguage:azcli"],"main":"./dist/extension","capabilities":{"documentFormattingProvider":"true"},"icon":"logo.png","repository":{"type":"git","url":"https://github.com/foxundermoon/vs-shell-format.git"},"bugs":{"url":"https://github.com/foxundermoon/vs-shell-format/issues"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"lint-staged":{"./**/*.{js,jsx,ts,tsx,json,css,scss,md,yml,yaml,html}":["prettier --write","git add"]},"keywords":["shell","docker","shellscript","format","bash","dockerfile","properties","formatter","beautify","dotenv","hosts","jvmoptions","vmoptions","bashrc","zshrc","azcli","azure cli tool"],"contributes":{"languages":[{"id":"shellscript"},{"id":"dockerfile","aliases":["docker","Dockerfile"],"filenamePatterns":["Dockerfile","Dockerfile.*","*.dockerfile"]},{"id":"ignore","aliases":["gitignore","dockerignore"],"filenames":[".dockerignore",".gitignore"]},{"id":"dotenv","aliases":["env"],"filenamePatterns":[".env.*"],"filenames":["env",".env"]},{"id":"jvmoptions","aliases":["vmoptions"],"extensions":[".vmoptions"],"filenames":["jvm.options"]},{"id":"hosts","filenames":["hosts"]},{"id":"properties","aliases":["Properties","spring-boot-properties"],"extensions":[".properties"]},{"id":"azcli","extensions":[".azcli"]}],"configuration":{"type":"object","title":"shell-format configuration","properties":{"shellformat.path":{"type":["string","null"],"default":null,"description":"the shfmt fullpath  example[ mac,linux ] /usr/local/bin/shfmt  [windows] C:/bin/shfmt.exe   download fron https://github.com/mvdan/sh/releases"},"shellformat.flag":{"type":["string","null"],"default":null,"description":"shfmt -h  to see detail usage , example: -p -bn -ci"},"shellformat.effectLanguages":{"type":"array","default":["shellscript","dockerfile","dotenv","hosts","jvmoptions","ignore","gitignore","properties","spring-boot-properties","azcli"],"description":"the trigger effect  on the language"}}}},"scripts":{"vscode:prepublish":"webpack --mode production","compile":"webpack --mode none","watch":"webpack --mode none --watch","postinstall":"node ./node_modules/vscode/bin/install","test-compile":"tsc -p ./","test":"node ./node_modules/vscode/bin/test","format":"prettier --write './**/*.{js,jsx,ts,tsx,json,css,scss,md,yml,yaml,html}'","format-check":"prettier --check './**/*.{js,jsx,ts,tsx,json,css,scss,md,yml,yaml,html}'"},"devDependencies":{"@types/mocha":"^5.2.5","@types/node":"^10.12.18","husky":"^3.1.0","lint-staged":"^9.5.0","mocha":"^5.2.0","prettier":"^1.19.1","ts-loader":"^6.0.1","typescript":"^3.2.2","vscode":"^1.1.33","webpack":"^4.32.2","webpack-cli":"^3.3.2"},"dependencies":{"diff":"~3.5.0"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/foxundermoon.shell-format-7.0.1-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"5fb19573-2183-4cf2-b53d-0fb869dae7ae","publisherId":"c5bb2216-aaba-47a1-962e-5561e40c03c5","publisherDisplayName":"foxundermoon","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205724602,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"rogalmic.bash-debug","uuid":"f4f0748b-9f86-461e-84f9-73bf2e1f91c2"},"manifest":{"name":"bash-debug","displayName":"Bash Debug","version":"0.3.9","publisher":"rogalmic","description":"A debugger extension for bash scripts (using bashdb).","author":{"name":"Michal Rogalinski","email":"rogalinsky@gmail.com"},"license":"MIT","keywords":["multi-root ready"],"engines":{"vscode":"^1.40.0","node":"^12.8.1"},"icon":"images/bash-debug-icon.png","categories":["Debuggers"],"private":true,"repository":{"type":"git","url":"https://github.com/rogalmic/vscode-bash-debug.git"},"bugs":{"url":"https://github.com/rogalmic/vscode-bash-debug/issues"},"badges":[{"url":"https://img.shields.io/github/downloads/rogalmic/vscode-bash-debug/latest/total.svg","href":"https://github.com/rogalmic/vscode-bash-debug/releases/latest","description":"Download latest beta release (master branch)"},{"url":"https://img.shields.io/github/stars/rogalmic/vscode-bash-debug.svg?style=social&label=Stars","href":"https://github.com/rogalmic/vscode-bash-debug/stargazers","description":"Star the project in github"},{"url":"https://img.shields.io/badge/paypal-donate-blue.svg","href":"https://paypal.me/rogalmic","description":"Donate some $ to keep project going"}],"dependencies":{"child-process":"^1.0.2","npm-which":"^3.0.1","shell-quote":"^1.7.2","vscode-debugadapter":"1.40.0","vscode-debugprotocol":"1.40.0"},"devDependencies":{"@types/mocha":"7.0.2","@types/node":"12.12.14","jsdoctest":"1.7.1","mocha":"7.1.2","standard-version":"^8.0.0","tslint":"6.1.2","typescript":"3.9.5","vsce":"1.77.0","vscode":"1.1.36","vscode-debugadapter-testsupport":"1.41.0"},"scripts":{"prepare":"tsc -p ./src","compile":"tsc -p ./src","tslint":"tslint ./src/**/*.ts","watch":"tsc -w -p ./src","test":"mocha -u tdd ./out/tests/; node_modules/.bin/mocha --require jsdoctest out/bashRuntime.js out/handlePath.js","postinstall":"node ./node_modules/vscode/bin/install","package":"vsce package","publish":"vsce publish","release":"standard-version"},"main":"./out/extension","activationEvents":["onDebug","onCommand:extension.bash-debug.getProgramName","onCommand:extension.bash-debug.selectProgramName"],"contributes":{"breakpoints":[{"language":"shellscript"}],"debuggers":[{"type":"bashdb","label":"Bash Debug","program":"./out/bashDebug.js","runtime":"node","configurationAttributes":{"launch":{"// `type`, `request` and `name` are required implicitly.":null,"required":["program"],"properties":{"args":{"// type: Array<string> -> warning `Incorrect type. Expected Array<string>` in launch.json":null,"description":"Command line arguments in array of strings format. (i.e. [\"--opt\", \"arg\"])","default":[]},"argsString":{"// type: string -> warning `Incorrect type. Expected string` in launch.json":null,"description":"Command line arguments in string format. (i.e. \"--opt arg\"]. The arguments in this string will be appended to the arguments of `args`, if present.)","default":""},"cwd":{"type":"string","description":"Working directory. (i.e. `cd $cwd; bashdb <options> $program` will be executed internally).","default":"${workspaceFolder}"},"program":{"type":"string","description":"Absolute path to a script. See also: https://code.visualstudio.com/docs/editor/variables-reference","default":"${file}"},"pathBash":{"type":"string","description":"Specify absolute path to bash. Refer to https://github.com/rogalmic/vscode-bash-debug/blob/master/README.md#usage","default":""},"pathBashdb":{"type":"string","description":"Specify absolute path to bashdb (on Windows, path in Linux Subsystem).","default":"/usr/local/bin/bashdb"},"pathBashdbLib":{"type":"string","description":"Specify absolute path to bashdb libs (on Windows, path in Linux Subsystem).","default":"/usr/share/bashdb"},"pathCat":{"type":"string","description":"Specify absolute path to cat (on Windows, path in Linux Subsystem).","default":"/usr/bin/cat"},"pathMkfifo":{"type":"string","description":"Specify absolute path to mkfifo (on Windows, path in Linux Subsystem).","default":"/usr/bin/mkfifo"},"pathPkill":{"type":"string","description":"Specify absolute path to pkill (on Windows, path in Linux Subsystem). On macOS, please use /usr/bin/pkill instead of /usr/local/bin/pkill, otherwise vscode crashes. see https://github.com/rogalmic/vscode-bash-debug/wiki/macOS:-avoid-use-of--usr-local-bin-pkill for details.","default":"/usr/local/bin/pkill"},"showDebugOutput":{"type":"boolean","description":"Defines if bashdb output will be visible together with script output.","default":true},"trace":{"type":"boolean","description":"Enable logging of the Debug Adapter Protocol.","default":true},"terminalKind":{"enum":["integrated","external","debugConsole"],"description":"Can be set to 'integrated', 'external' or 'debugConsole'. Using 'integrated' or 'external' may require explicit terminal interpreter set for workspace.","default":"debugConsole"},"env":{"type":"object","description":"Environment variables defined as an object with key value pairs - {\"MYVAR\" : \"MY VALUE\"}.","default":{}}}}},"// Template for initial launch.json":null,"// Added when: launch.json is missing && (":null,"//   Add configuration... (in debug pane) -> Bash Debug ||":null,"//   >Debug: Open launch.json -> Bash Debug ||":null,"//   (>Debug: Start Debugging -> Bash Debug && file type is not shellscript)":null,"// )":null,"initialConfigurations":[{"type":"bashdb","request":"launch","name":"Bash-Debug (simplest configuration)","program":"${file}"}],"// Added when select 'Add configuration...' -> 'Bash Debug' in debug pane":null,"// `label` is shown in IntelliSense and `name` is shown in DEBUG side-bar.":null,"configurationSnippets":[{"label":"Bash-Debug (hardcoded script name)","description":"Debug a bash script (specify the path to the script in launch.json)","body":{"type":"bashdb","request":"launch","name":"Bash-Debug (hardcoded script name)","cwd":"^\"\\${workspaceFolder}\"","program":"^\"\\${workspaceFolder}/path/to/script.sh\"","args":[]}},{"label":"Bash-Debug (select script from list of sh files)","description":"Debug a bash script (select script from the list of sh files before starting debug)","body":{"type":"bashdb","request":"launch","name":"Bash-Debug (select script from list of sh files)","cwd":"^\"\\${workspaceFolder}\"","program":"^\"\\${command:SelectScriptName}\"","args":[]}},{"label":"Bash-Debug (type in script name)","description":"Debug a bash script (specify the script path before starting debug)","body":{"type":"bashdb","request":"launch","name":"Bash-Debug (type in script name)","cwd":"^\"\\${workspaceFolder}\"","program":"^\"\\${command:AskForScriptName}\"","args":[]}}],"variables":{"AskForScriptName":"extension.bash-debug.getProgramName","SelectScriptName":"extension.bash-debug.selectProgramName"}}]}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/rogalmic.bash-debug-0.3.9-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"f4f0748b-9f86-461e-84f9-73bf2e1f91c2","publisherId":"60aabfd6-4033-4422-8bfe-e34a659226cb","publisherDisplayName":"rogalmic","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205724636,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"mads-hartmann.bash-ide-vscode","uuid":"b1b0f283-8246-4e90-832e-a6c409d378d1"},"manifest":{"name":"bash-ide-vscode","displayName":"Bash IDE","description":"A language server for Bash","author":"Mads Hartmann","license":"MIT","version":"1.38.0","publisher":"mads-hartmann","repository":{"type":"git","url":"https://github.com/bash-lsp/bash-language-server"},"engines":{"vscode":"^1.44.0"},"icon":"assets/bash-logo.png","categories":["Other"],"keywords":["shell script","bash script","bash"],"activationEvents":["onLanguage:shellscript"],"main":"./out/extension","contributes":{"configuration":{"type":"object","title":"Bash IDE configuration","properties":{"bashIde.backgroundAnalysisMaxFiles":{"type":"number","default":500,"description":"Maximum number of files to analyze in the background. Set to 0 to disable background analysis.","minimum":0},"bashIde.enableSourceErrorDiagnostics":{"type":"boolean","default":false,"description":"Enable diagnostics for source errors. Ignored if includeAllWorkspaceSymbols is true."},"bashIde.explainshellEndpoint":{"type":"string","default":"","description":"Configure explainshell server endpoint in order to get hover documentation on flags and options."},"bashIde.globPattern":{"type":"string","default":"**/*@(.sh|.inc|.bash|.command)","description":"Glob pattern for finding and parsing shell script files in the workspace. Used by the background analysis features across files."},"bashIde.includeAllWorkspaceSymbols":{"type":"boolean","default":false,"description":"Controls how symbols (e.g. variables and functions) are included and used for completion and documentation. If false (default and recommended), then we only include symbols from sourced files (i.e. using non dynamic statements like 'source file.sh' or '. file.sh' or following ShellCheck directives). If true, then all symbols from the workspace are included."},"bashIde.logLevel":{"type":"string","default":"info","enum":["debug","info","warning","error"],"description":"Controls the log level of the language server."},"bashIde.shellcheckPath":{"type":"string","default":"shellcheck","description":"Controls the executable used for ShellCheck linting information. An empty string will disable linting."},"bashIde.shellcheckArguments":{"type":"string","default":"","description":"Additional ShellCheck arguments. Note that we already add the following arguments: --shell, --format, --external-sources."}}}},"scripts":{"vscode:prepublish":"cd .. && yarn run compile"},"dependencies":{"bash-language-server":"4.10.0","vscode-languageclient":"8.1.0","vscode-languageserver":"8.0.2"},"devDependencies":{"@types/vscode":"^1.44.0"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/mads-hartmann.bash-ide-vscode-1.38.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"b1b0f283-8246-4e90-832e-a6c409d378d1","publisherId":"f40c9497-3e29-43d8-954d-e60d92bc26f0","publisherDisplayName":"mads-hartmann","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205724659,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"timonwong.shellcheck","uuid":"f95d8fff-f70a-4ae5-bb06-5c47ddbc8fc6"},"manifest":{"name":"shellcheck","displayName":"ShellCheck","description":"Integrates ShellCheck into VS Code, a linter for Shell scripts.","version":"0.35.0","publisher":"timonwong","author":"Timon Wong <timon86.wang@gmail.com> (https://github.com/timonwong)","contributors":["Felipe Santos <felipecassiors@gmail.com> (https://github.com/felipecrs)"],"license":"MIT","categories":["Linters","Programming Languages"],"keywords":["shell","shellscript","linter","lint","sh","bash","dash","ksh","posix"],"homepage":"https://github.com/vscode-shellcheck/vscode-shellcheck#readme","private":true,"repository":{"type":"git","url":"https://github.com/vscode-shellcheck/vscode-shellcheck.git"},"bugs":{"url":"https://github.com/vscode-shellcheck/vscode-shellcheck/issues"},"sponsor":{"url":"https://github.com/vscode-shellcheck/vscode-shellcheck"},"icon":"shellcheck.png","activationEvents":["onLanguage:shellscript","workspaceContains:**/.shellcheckrc"],"main":"./dist/extension.js","capabilities":{"untrustedWorkspaces":{"supported":"limited","description":"Only the user defined `shellcheck` executable will be taken into account when running in untrusted mode.","restrictedConfigurations":["shellcheck.executablePath"]}},"contributes":{"snippets":[{"language":"shellscript","path":"./snippets/snippets.json"}],"languages":[{"id":"shellcheckrc","extensions":[".shellcheckrc"],"configuration":"./languages/shellcheckrc/language-configuration.json"},{"id":"shellcheck-output","configuration":"./languages/shellcheck-output/language-configuration.json"}],"grammars":[{"language":"shellcheckrc","scopeName":"source.shellcheckrc","path":"./languages/shellcheckrc/tmLanguage.json"},{"language":"shellcheck-output","scopeName":"shellcheck-output","path":"./languages/shellcheck-output/tmLanguage.json"}],"commands":[{"command":"shellcheck.runLint","title":"ShellCheck: Lint Current Document"},{"command":"shellcheck.collectDiagnostics","title":"ShellCheck: Collect Diagnostics For Current Document"}],"configuration":{"title":"ShellCheck","type":"object","properties":{"shellcheck.enable":{"description":"Whether ShellCheck is enabled or not.","type":"boolean","scope":"resource","default":true},"shellcheck.enableQuickFix":{"description":"Whether to enable the _Quick Fix_ feature or not.","type":"boolean","scope":"resource","default":true},"shellcheck.executablePath":{"description":"Path to the `shellcheck` executable (bundled binaries will be used if empty).","examples":["shellcheck"],"type":"string","scope":"machine-overridable"},"shellcheck.run":{"description":"Whether ShellCheck is run on save, on type, or manually.","type":"string","enum":["onSave","onType","manual"],"scope":"resource","default":"onType"},"shellcheck.exclude":{"markdownDescription":"Exclude certain error codes. For example, to exclude [SC1017](https://shellcheck.net/wiki/SC1017), enter _1017_. Enumerated error codes can be found [in this gist](https://gist.github.com/nicerobot/53cee11ee0abbdc997661e65b348f375). Always prefer to use a `.shellcheckrc` file instead of this setting.","type":"array","items":{"type":"string","pattern":"^(SC)?\\d{4}$","patternErrorMessage":"Valid shellcheck error code should be 4-digit numbers, 1017 for example.\n"},"scope":"resource","default":[],"examples":[["1017"]]},"shellcheck.customArgs":{"markdownDescription":"Custom arguments to pass when calling the `shellcheck` binary. Always prefer to use a `.shellcheckrc` file instead of this setting.","type":"array","items":{"type":"string"},"scope":"resource","default":[],"examples":[["--external-sources"]]},"shellcheck.ignorePatterns":{"markdownDescription":"Configure glob patterns for excluding files and folders by ShellCheck. Glob patterns are interpreted relative to the workspace's root folder. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/glob-patterns).","examples":[{"**/*.zsh":true,"**/*.zsh*":true,"**/.git/*.sh":true,"**/folder/**/*.sh":true}],"type":"object","scope":"resource","additionalProperties":{"type":"boolean","description":"The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."},"default":{"**/*.csh":true,"**/*.cshrc":true,"**/*.fish":true,"**/*.login":true,"**/*.logout":true,"**/*.tcsh":true,"**/*.tcshrc":true,"**/*.xonshrc":true,"**/*.xsh":true,"**/*.zsh":true,"**/*.zshrc":true,"**/zshrc":true,"**/*.zprofile":true,"**/zprofile":true,"**/*.zlogin":true,"**/zlogin":true,"**/*.zlogout":true,"**/zlogout":true,"**/*.zshenv":true,"**/zshenv":true,"**/*.zsh-theme":true}},"shellcheck.ignoreFileSchemes":{"description":"Matching file schemes are being ignored by shellcheck.","type":"array","items":{"type":"string"},"scope":"application","default":["git","gitfs","output"]},"shellcheck.useWorkspaceRootAsCwd":{"description":"Whether to use the workspace root directory as the current working directory when launching `shellcheck`. Otherwise, the directory of the file being linted will be used.","type":"boolean","scope":"resource","default":false},"shellcheck.logLevel":{"description":"The trace level the extension logs at, defaults to 'info'.","type":"string","scope":"window","enum":["trace","debug","info","warn","error","off"],"default":"info"},"shellcheck.disableVersionCheck":{"description":"Whether to disable shellcheck binary version check, which prompts for updating when an outdated version is found.","type":"boolean","scope":"machine-overridable","default":false}}}},"scripts":{"prepare":"bindl","build":"webpack","build:watch":"webpack --watch","build:prod":"webpack --mode production --devtool hidden-source-map","build:test":"tsc --project tsconfig.test.json","build:test:watch":"tsc --project tsconfig.test.json --watch","build:all":"run-p build build:test","build:all:watch":"run-p build:watch build:test:watch","vscode:prepublish":"npm run build:prod","package":"vsce package","publish":"vsce publish","lint":"eslint .","lint:fix":"eslint --fix .","format":"prettier --write . **/*.sh","format:check":"prettier --check . **/*.sh","spell":"cspell \"**\"","pretest":"npm run build:all","test":"node ./out/test/runTest.js","posttest":"npm run lint && npm run format:check && npm run spell","release":"semantic-release"},"dependencies":{"execa":"^5.0.0","lodash":"^4.17.19","minimatch":"^9.0.3","semver":"^7.5.4"},"devDependencies":{"@semantic-release/changelog":"^6.0.3","@semantic-release/git":"^10.0.1","@types/lodash":"^4.14.202","@types/mocha":"^10.0.6","@types/node":"^16.18.65","@types/semver":"^7.5.6","@types/vscode":"~1.66.0","@typescript-eslint/eslint-plugin":"^6.13.0","@typescript-eslint/parser":"^6.13.0","@vscode/test-electron":"^2.3.8","bindl":"^4.2.5","conventional-changelog-conventionalcommits":"^6.1.0","cspell":"^7.3.8","eslint":"^8.54.0","eslint-config-prettier":"^9.0.0","glob":"^10.3.10","kind-of":"^6.0.3","mocha":"^10.2.0","npm-run-all":"^4.1.5","prettier":"^3.1.0","prettier-plugin-sh":"^0.13.1","semantic-release":"^19.0.5","semantic-release-stop-before-publish":"^1.0.0","semantic-release-vsce":"^5.6.3","ts-loader":"^9.5.1","typescript":"^5.3.2","webpack":"^5.89.0","webpack-cli":"^5.1.4"},"overrides":{"keytar":"./see_vscode_vsce_issue_786"},"engines":{"vscode":"^1.66.0"},"volta":{"node":"16.20.1","npm":"9.8.0"},"shellcheckVersion":"0.9.0"},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/timonwong.shellcheck-0.35.0-linux-x64","scheme":"file"},"isBuiltin":false,"targetPlatform":"linux-x64","metadata":{"id":"f95d8fff-f70a-4ae5-bb06-5c47ddbc8fc6","publisherId":"04757770-dd50-443e-aae4-e1c7cf9c24f5","publisherDisplayName":"timonwong","targetPlatform":"linux-x64","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205724625,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"pinage404.bash-extension-pack","uuid":"1ee502c4-5d85-4c21-9f41-a9371726880b"},"manifest":{"name":"bash-extension-pack","displayName":"Bash Extension Pack","description":"Opinionated extension pack to improve Bash usage","keywords":["bash","shell","shebang","script"],"version":"2.0.0","icon":"icon.png","galleryBanner":{"color":"#212121","theme":"dark"},"categories":["Extension Packs"],"extensionPack":["formulahendry.code-runner","foxundermoon.shell-format","jeff-hykin.better-shellscript-syntax","mads-hartmann.bash-ide-vscode","mkhl.direnv","rogalmic.bash-debug","rpinski.shebang-snippets","spmeesseman.vscode-taskexplorer","timonwong.shellcheck"],"engines":{"vscode":"^1.59.0"},"private":true,"license":"MIT","publisher":"pinage404","homepage":"https://gitlab.com/pinage404/pinage404-vscode-extension-packs/-/tree/main/packages/bash","repository":{"type":"git","url":"https://gitlab.com/pinage404/pinage404-vscode-extension-packs.git"},"bugs":{"url":"https://gitlab.com/pinage404/pinage404-vscode-extension-packs/-/issues"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/pinage404.bash-extension-pack-2.0.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"1ee502c4-5d85-4c21-9f41-a9371726880b","publisherId":"4dc9ef44-41b6-4fb6-af73-1506fbfa493b","publisherDisplayName":"pinage404","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205728750,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"evgeniypeshkov.syntax-highlighter","uuid":"428c36f5-be8e-4df8-8992-233bf5aef31f"},"manifest":{"name":"syntax-highlighter","displayName":"Syntax Highlighter","description":"Syntax highlighting based on Tree-sitter","homepage":"https://github.com/EvgeniyPeshkov/syntax-highlighter","version":"0.5.1","publisher":"evgeniypeshkov","license":"MIT","icon":"images/syntax.png","galleryBanner":{"color":"#263238","theme":"dark"},"repository":{"url":"https://github.com/EvgeniyPeshkov/syntax-highlighter"},"author":{"name":"Evgeniy Peshkov","email":"peshkov.e@outlook.com"},"categories":["Programming Languages","Themes","Other"],"keywords":["Syntax","Highlighter","Highlight","Highlighting","Coloring","Tree-Sitter","Parser","C","C++","CPP","Python","TypeScript","TS","TypeScriptReact","TSX","JavaScript","JS","Go","Rust","Php","Ruby","ShellScript","Bash","OCaml","Lua"],"activationEvents":["onLanguage:c","onLanguage:cpp","onLanguage:python","onLanguage:typescript","onLanguage:typescriptreact","onLanguage:javascript","onLanguage:go","onLanguage:rust","onLanguage:php","onLanguage:ruby","onLanguage:shellscript","onLanguage:ocaml","onLanguage:lua"],"main":"./out/extension.js","scripts":{"vscode:prepublish":"npm run compile","vscode:package":"node ./node_modules/.bin/vsce package","compile":"tsc -p ./","watch":"tsc -watch -p ./","postinstall":"node ./scripts/build.js"},"engines":{"vscode":"^1.46.0"},"dependencies":{"jsonc-parser":"^2.2.1","web-tree-sitter":"^0.19.1"},"devDependencies":{"@types/node":"^13.7.2","@types/vscode":"^1.46.0","ovsx":"0.1.0-next.a9154dc","tree-sitter":"^0.19.0","tree-sitter-bash":"^0.19.0","tree-sitter-c":"^0.19.0","tree-sitter-cli":"^0.19.4","tree-sitter-cpp":"^0.19.0","tree-sitter-go":"^0.19.1","tree-sitter-javascript":"^0.19.0","tree-sitter-lua":"^1.6.2","tree-sitter-ocaml":"^0.19.0","tree-sitter-php":"^0.19.0","tree-sitter-python":"^0.19.0","tree-sitter-ruby":"github:tree-sitter/tree-sitter-ruby#v0.19.0","tree-sitter-rust":"^0.19.1","tree-sitter-typescript":"^0.19.0","tslint":"^6.1.2","typescript":"^3.9.3","vsce":"^1.87.0"},"contributes":{"semanticTokenTypes":[{"id":"punctuation","description":"Punctuation symbols"}],"semanticTokenScopes":[{"scopes":{"punctuation":["punctuation"],"type.modification":["storage.modifier"]}}],"configuration":{"title":"{Syntax Highlighter} configuration","properties":{"syntax.highlightComment":{"description":"Enable highlighting of comments","type":"boolean","default":true},"syntax.highlightLanguages":{"description":"Enabled languages","type":"array","default":["c","cpp","python","typescript","typescriptreact","javascript","go","rust","php","ruby","shellscript","ocaml","lua"]},"syntax.highlightTerms":{"description":"Enabled terms","type":"array","default":["type","scope","function","variable","number","string","comment","constant","directive","control","operator","modifier","punctuation"]},"syntax.debugHover":{"description":"Show tool-tip with syntax scope on hover","type":"boolean","default":false},"syntax.debugDepth":{"description":"Depth of syntax scope in debug tools","type":"integer","default":-1}}}}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/evgeniypeshkov.syntax-highlighter-0.5.1-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"428c36f5-be8e-4df8-8992-233bf5aef31f","publisherId":"ea732491-c233-4bad-9df1-d0cafdf9a310","publisherDisplayName":"evgeniypeshkov","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205751040,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"bmalehorn.vscode-fish","uuid":"efa79b03-91c5-4c6a-9846-0a7b6f7af05e"},"manifest":{"name":"vscode-fish","displayName":"Fish","description":"Fish syntax highlighting and formatting","publisher":"bmalehorn","license":"MIT","repository":{"url":"https://github.com/bmalehorn/vscode-fish"},"version":"1.0.37","engines":{"vscode":"^1.47.0"},"icon":"fish.png","capabilities":{"untrustedWorkspaces":{"supported":"limited","description":"Syntax highlighting supported"}},"categories":["Programming Languages","Formatters","Linters"],"keywords":["fish","shell","fish_indent","IDE","multi-root ready"],"main":"./out/extension","activationEvents":["onLanguage:fish"],"contributes":{"languages":[{"id":"fish","aliases":["Fish"],"extensions":[".fish"],"firstLine":"^#!\\s*/.*\\bfish\\b","configuration":"./language-configuration.json"}],"grammars":[{"language":"fish","scopeName":"source.fish","path":"./syntaxes/fish.tmLanguage.json"},{"scopeName":"markdown.fish.codeblock","path":"./syntaxes/codeblock.json","injectTo":["text.html.markdown"],"embeddedLanguages":{"meta.embedded.block.fish":"fish"}}],"configuration":{"title":"Fish","properties":{"fish.path.fish":{"type":"string","scope":"machine-overridable","default":"fish","description":"Path to the `fish` command"},"fish.path.fish_indent":{"type":"string","scope":"machine-overridable","default":"fish_indent","description":"Path to the `fish_indent` command"}}},"snippets":[{"language":"fish","path":"./snippets/snippets.json"}]},"scripts":{"vscode:prepublish":"yarn run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","test":"yarn run compile && node ./out/test/runTests"},"devDependencies":{"@types/glob":"^7.2.0","@types/mocha":"^2.2.42","@types/node":"^8.10.25","@types/vscode":"^1.47.0","@vscode/test-electron":"^2.1.3","glob":"^7.2.0","husky":"^3.0.4","mocha":"^9.2.2","prettier":"^2.0.0","pretty-quick":"^1.11.1","tslint":"^5.8.0","tslint-config-prettier":"^1.18.0","typescript":"3.9.6"},"husky":{"hooks":{"pre-commit":"pretty-quick --staged"}}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/bmalehorn.vscode-fish-1.0.37-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"efa79b03-91c5-4c6a-9846-0a7b6f7af05e","publisherId":"1215635c-400c-4cc8-96d3-f2d5da4774a4","publisherDisplayName":"bmalehorn","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702205786769,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"fisheva.eva-theme","uuid":"a6761011-549f-4561-ae6d-cc9c7a040710"},"manifest":{"name":"eva-theme","displayName":"Eva Theme","description":"A comfortable and semantic theme.","version":"2.3.8","publisher":"fisheva","license":"SEE LICENSE IN<LICENSE.md>","icon":"eva.jpg","homepage":"https://github.com/fisheva/Eva-Theme","bugs":{"url":"https://github.com/fisheva/Eva-Theme/issues"},"repository":{"type":"git","url":""},"engines":{"vscode":"^1.12.0"},"extensionKind":["ui","workspace"],"categories":["Themes","Other"],"capabilities":{"virtualWorkspaces":true},"galleryBanner":{"color":"#EBEEF5","theme":"light"},"contributes":{"themes":[{"label":"Eva Dark","uiTheme":"vs-dark","path":"./themes/Eva-Dark.json"},{"label":"Eva Dark Bold","uiTheme":"vs-dark","path":"./themes/Eva-Dark-Bold.json"},{"label":"Eva Dark Italic","uiTheme":"vs-dark","path":"./themes/Eva-Dark-Italic.json"},{"label":"Eva Dark Italic Bold","uiTheme":"vs-dark","path":"./themes/Eva-Dark-Italic-Bold.json"},{"label":"Eva Light","uiTheme":"vs","path":"./themes/Eva-Light.json"},{"label":"Eva Light Bold","uiTheme":"vs","path":"./themes/Eva-Light-Bold.json"},{"label":"Eva Light Italic","uiTheme":"vs","path":"./themes/Eva-Light-Italic.json"},{"label":"Eva Light Italic Bold","uiTheme":"vs","path":"./themes/Eva-Light-Italic-Bold.json"}]},"keywords":["eva","dark","light","theme","vscode"],"sponsor":{"url":"https://github.com/sponsors/fisheva"},"scripts":{"changelog":"conventional-changelog -p angular -i CHANGELOG.md -w"},"terminal.integrated.minimumContrastRatio":1},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/fisheva.eva-theme-2.3.8-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"a6761011-549f-4561-ae6d-cc9c7a040710","publisherId":"ff69a8bd-aad3-463d-9859-8ecfb1484873","publisherDisplayName":"fisheva","targetPlatform":"universal","isApplicationScoped":false,"updated":true,"isPreReleaseVersion":false,"installedTimestamp":1702206416515,"pinned":false,"preRelease":false},"isValid":true,"validations":[[2,"property `extensionKind` can be defined only if property `main` is also defined."]]},{"type":1,"identifier":{"id":"dlasagno.wal-theme","uuid":"b3ad903e-4a01-4f89-8ab2-e4851adde555"},"manifest":{"name":"wal-theme","displayName":"Wal Theme","description":"A theme generated with pywal color palette","publisher":"dlasagno","author":"Daniele Lasagno","license":"MIT","version":"1.1.2","repository":{"type":"git","url":"https://github.com/dlasagno/vscode-wal-theme"},"bugs":{"url":"https://github.com/dlasagno/vscode-wal-theme/issues"},"homepage":"https://github.com/dlasagno/vscode-wal-theme#readme","engines":{"vscode":"^1.34.0"},"extensionKind":["ui","workspace"],"categories":["Themes"],"keywords":["theme","pywal","wal"],"icon":"icon.png","activationEvents":["*","onCommand:walTheme.update"],"main":"./out/extension.js","contributes":{"commands":[{"command":"walTheme.update","title":"Update","category":"Wal Theme"}],"configuration":{"title":"Wal Theme","properties":{"walTheme.autoUpdate":{"type":"boolean","default":true,"description":"Update automatically the theme when the pywal color palette changes"}}},"themes":[{"label":"Wal","uiTheme":"vs-dark","path":"./themes/wal.json","_watch":true},{"label":"Wal Bordered","uiTheme":"vs-dark","path":"./themes/wal-bordered.json","_watch":true}]},"scripts":{"vscode:prepublish":"npm run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","pretest":"npm run compile","lint":"eslint src --ext ts"},"devDependencies":{"@types/color":"^3.0.2","@types/glob":"^7.1.4","@types/node":"^13.13.52","@types/vscode":"^1.34.0","@typescript-eslint/eslint-plugin":"^4.28.3","@typescript-eslint/parser":"^4.28.3","eslint":"^7.30.0","glob":"^7.1.7","typescript":"^3.9.10"},"dependencies":{"chokidar":"^3.5.2","color":"^3.1.3"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/dlasagno.wal-theme-1.1.2-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"b3ad903e-4a01-4f89-8ab2-e4851adde555","publisherId":"ba4c558e-5e67-4f9b-930c-57b83bf89060","publisherDisplayName":"dlasagno","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702208618681,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"rust-lang.rust-analyzer","uuid":"06574cb4-e5dc-4631-8174-a543a4533621"},"manifest":{"name":"rust-analyzer","displayName":"rust-analyzer","description":"Rust language support for Visual Studio Code","private":true,"icon":"icon.png","version":"0.3.1766","releaseTag":"2023-12-11","publisher":"rust-lang","repository":{"url":"https://github.com/rust-lang/rust-analyzer.git","type":"git"},"homepage":"https://rust-analyzer.github.io/","license":"MIT OR Apache-2.0","keywords":["rust"],"categories":["Formatters","Programming Languages"],"capabilities":{"untrustedWorkspaces":{"supported":false,"description":"rust-analyzer invokes binaries set up by its configuration as well as the Rust toolchain's binaries. A malicious actor could exploit this to run arbitrary code on your machine."}},"engines":{"vscode":"^1.78.0"},"scripts":{"vscode:prepublish":"npm run build-base -- --minify","package":"vsce package -o rust-analyzer.vsix","build-base":"esbuild ./src/main.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --target=node16","build":"npm run build-base -- --sourcemap","watch":"npm run build-base -- --sourcemap --watch","format":"prettier --write .","format:check":"prettier --check .","lint":"eslint -c .eslintrc.js --ext ts ./src ./tests","lint:fix":"npm run lint -- --fix","typecheck":"tsc","pretest":"npm run typecheck && npm run build","test":"node ./out/tests/runTests.js"},"dependencies":{"@hpcc-js/wasm":"^2.13.0","anser":"^2.1.1","d3":"^7.8.5","d3-graphviz":"^5.0.2","vscode-languageclient":"^8.1.0"},"devDependencies":{"@tsconfig/strictest":"^2.0.1","@types/node":"~16.11.7","@types/vscode":"~1.78.1","@typescript-eslint/eslint-plugin":"^6.0.0","@typescript-eslint/parser":"^6.0.0","@vscode/test-electron":"^2.3.3","@vscode/vsce":"^2.19.0","esbuild":"^0.18.12","eslint":"^8.44.0","eslint-config-prettier":"^8.8.0","ovsx":"^0.8.2","prettier":"^3.0.0","tslib":"^2.6.0","typescript":"^5.1.6"},"activationEvents":["workspaceContains:*/Cargo.toml","workspaceContains:*/rust-project.json"],"main":"./out/main","contributes":{"taskDefinitions":[{"type":"cargo","required":["command"],"properties":{"label":{"type":"string"},"command":{"type":"string"},"args":{"type":"array","items":{"type":"string"}},"env":{"type":"object","patternProperties":{".+":{"type":"string"}}}}}],"commands":[{"command":"rust-analyzer.syntaxTree","title":"Show Syntax Tree","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.viewHir","title":"View Hir","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.viewMir","title":"View Mir","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.interpretFunction","title":"Interpret Function","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.viewFileText","title":"View File Text (as seen by the server)","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.viewItemTree","title":"Debug ItemTree","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.shuffleCrateGraph","title":"Shuffle Crate Graph","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.memoryUsage","title":"Memory Usage (Clears Database)","category":"rust-analyzer (debug command)"},{"command":"rust-analyzer.viewCrateGraph","title":"View Crate Graph","category":"rust-analyzer"},{"command":"rust-analyzer.viewFullCrateGraph","title":"View Crate Graph (Full)","category":"rust-analyzer"},{"command":"rust-analyzer.expandMacro","title":"Expand macro recursively at caret","category":"rust-analyzer"},{"command":"rust-analyzer.matchingBrace","title":"Find matching brace","category":"rust-analyzer"},{"command":"rust-analyzer.parentModule","title":"Locate parent module","category":"rust-analyzer"},{"command":"rust-analyzer.joinLines","title":"Join lines","category":"rust-analyzer"},{"command":"rust-analyzer.run","title":"Run","category":"rust-analyzer"},{"command":"rust-analyzer.copyRunCommandLine","title":"Copy Run Command Line","category":"rust-analyzer"},{"command":"rust-analyzer.debug","title":"Debug","category":"rust-analyzer"},{"command":"rust-analyzer.newDebugConfig","title":"Generate launch configuration","category":"rust-analyzer"},{"command":"rust-analyzer.analyzerStatus","title":"Status","category":"rust-analyzer"},{"command":"rust-analyzer.reloadWorkspace","title":"Reload workspace","category":"rust-analyzer"},{"command":"rust-analyzer.rebuildProcMacros","title":"Rebuild proc macros and build scripts","category":"rust-analyzer"},{"command":"rust-analyzer.restartServer","title":"Restart server","category":"rust-analyzer"},{"command":"rust-analyzer.startServer","title":"Start server","category":"rust-analyzer"},{"command":"rust-analyzer.stopServer","title":"Stop server","category":"rust-analyzer"},{"command":"rust-analyzer.onEnter","title":"Enhanced enter key","category":"rust-analyzer"},{"command":"rust-analyzer.ssr","title":"Structural Search Replace","category":"rust-analyzer"},{"command":"rust-analyzer.serverVersion","title":"Show RA Version","category":"rust-analyzer"},{"command":"rust-analyzer.openDocs","title":"Open Docs","category":"rust-analyzer"},{"command":"rust-analyzer.openExternalDocs","title":"Open External Docs","category":"rust-analyzer"},{"command":"rust-analyzer.openCargoToml","title":"Open Cargo.toml","category":"rust-analyzer"},{"command":"rust-analyzer.peekTests","title":"Peek Related Tests","category":"rust-analyzer"},{"command":"rust-analyzer.moveItemUp","title":"Move Item Up","category":"rust-analyzer"},{"command":"rust-analyzer.moveItemDown","title":"Move Item Down","category":"rust-analyzer"},{"command":"rust-analyzer.cancelFlycheck","title":"Cancel running flychecks","category":"rust-analyzer"},{"command":"rust-analyzer.runFlycheck","title":"Run flycheck","category":"rust-analyzer"},{"command":"rust-analyzer.clearFlycheck","title":"Clear flycheck diagnostics","category":"rust-analyzer"},{"command":"rust-analyzer.revealDependency","title":"Reveal File","category":"rust-analyzer"},{"command":"rust-analyzer.viewMemoryLayout","title":"View Memory Layout","category":"rust-analyzer"},{"command":"rust-analyzer.toggleCheckOnSave","title":"Toggle Check on Save","category":"rust-analyzer"}],"keybindings":[{"command":"rust-analyzer.parentModule","key":"ctrl+shift+u","when":"editorTextFocus && editorLangId == rust"},{"command":"rust-analyzer.joinLines","key":"ctrl+shift+j","when":"editorTextFocus && editorLangId == rust"}],"configuration":{"type":"object","title":"rust-analyzer","properties":{"rust-analyzer.cargoRunner":{"type":["null","string"],"default":null,"description":"Custom cargo runner extension ID."},"rust-analyzer.runnables.extraEnv":{"anyOf":[{"type":"null"},{"type":"array","items":{"type":"object","properties":{"platform":{"type":["null","string","array"],"default":null,"markdownDescription":"Platform(s) filter like \"win32\" or [\"linux\", \"win32\"]. See [process.platform](https://nodejs.org/api/process.html#processplatform) values."},"mask":{"type":"string","description":"Runnable name mask"},"env":{"type":"object","description":"Variables in form of { \"key\": \"value\"}"}}}},{"type":"object","description":"Variables in form of { \"key\": \"value\"}"}],"default":null,"markdownDescription":"Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command."},"rust-analyzer.runnables.problemMatcher":{"type":"array","items":{"type":"string"},"default":["$rustc"],"markdownDescription":"Problem matchers to use for `rust-analyzer.run` command, eg `[\"$rustc\", \"$rust-panic\"]`."},"rust-analyzer.statusBar.clickAction":{"type":"string","enum":["stopServer","openLogs"],"enumDescriptions":["Stop Server","Open Logs"],"default":"openLogs","markdownDescription":"Action to run when clicking the extension status bar item."},"rust-analyzer.server.path":{"type":["null","string"],"scope":"machine-overridable","default":null,"markdownDescription":"Path to rust-analyzer executable (points to bundled binary by default)."},"rust-analyzer.server.extraEnv":{"type":["null","object"],"additionalProperties":{"type":["string","number"]},"default":null,"markdownDescription":"Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging."},"rust-analyzer.trace.server":{"type":"string","scope":"window","enum":["off","messages","verbose"],"enumDescriptions":["No traces","Error only","Full log"],"default":"off","description":"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users)."},"rust-analyzer.trace.extension":{"description":"Enable logging of VS Code extensions itself.","type":"boolean","default":false},"rust-analyzer.debug.engine":{"type":"string","enum":["auto","vadimcn.vscode-lldb","ms-vscode.cpptools"],"default":"auto","description":"Preferred debug engine.","markdownEnumDescriptions":["First try to use [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb), if it's not installed try to use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools).","Use [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)","Use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)"]},"rust-analyzer.debug.sourceFileMap":{"type":["object","string"],"const":"auto","description":"Optional source file mappings passed to the debug engine.","default":{"/rustc/<id>":"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust"}},"rust-analyzer.debug.openDebugPane":{"markdownDescription":"Whether to open up the `Debug Panel` on debugging start.","type":"boolean","default":false},"rust-analyzer.debug.engineSettings":{"type":"object","default":{},"markdownDescription":"Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`"},"rust-analyzer.restartServerOnConfigChange":{"markdownDescription":"Whether to restart the server automatically when certain settings that require a restart are changed.","default":false,"type":"boolean"},"rust-analyzer.typing.continueCommentsOnNewline":{"markdownDescription":"Whether to prefix newlines after comments with the corresponding comment prefix.","default":true,"type":"boolean"},"rust-analyzer.diagnostics.previewRustcOutput":{"markdownDescription":"Whether to show the main part of the rendered rustc output of a diagnostic message.","default":false,"type":"boolean"},"rust-analyzer.diagnostics.useRustcErrorCode":{"markdownDescription":"Whether to show diagnostics using the original rustc error code. If this is false, all rustc diagnostics will have the code 'rustc(Click for full compiler diagnostics)'","default":false,"type":"boolean"},"rust-analyzer.discoverProjectRunner":{"markdownDescription":"Sets the extension responsible for determining which extension the rust-analyzer extension uses to generate `rust-project.json` files. This should should only be used\n if a build system like Buck or Bazel is also in use.","default":null,"type":["null","string"]},"rust-analyzer.showUnlinkedFileNotification":{"markdownDescription":"Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting.","default":true,"type":"boolean"},"rust-analyzer.showRequestFailedErrorNotification":{"markdownDescription":"Whether to show error notifications for failing requests.","default":true,"type":"boolean"},"rust-analyzer.showDependenciesExplorer":{"markdownDescription":"Whether to show the dependencies view.","default":true,"type":"boolean"},"rust-analyzer.assist.emitMustUse":{"markdownDescription":"Whether to insert #[must_use] when generating `as_` methods\nfor enum variants.","default":false,"type":"boolean"},"rust-analyzer.assist.expressionFillDefault":{"markdownDescription":"Placeholder expression to use for missing expressions in assists.","default":"todo","type":"string","enum":["todo","default"],"enumDescriptions":["Fill missing expressions with the `todo` macro","Fill missing expressions with reasonable defaults, `new` or `default` constructors."]},"rust-analyzer.cachePriming.enable":{"markdownDescription":"Warm up caches on project load.","default":true,"type":"boolean"},"rust-analyzer.cachePriming.numThreads":{"markdownDescription":"How many worker threads to handle priming caches. The default `0` means to pick automatically.","default":0,"type":"number","minimum":0,"maximum":255},"rust-analyzer.cargo.autoreload":{"markdownDescription":"Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo/config.toml` changes.","default":true,"type":"boolean"},"rust-analyzer.cargo.buildScripts.enable":{"markdownDescription":"Run build scripts (`build.rs`) for more precise code analysis.","default":true,"type":"boolean"},"rust-analyzer.cargo.buildScripts.invocationLocation":{"markdownDescription":"Specifies the working directory for running build scripts.\n- \"workspace\": run build scripts for a workspace in the workspace's root directory.\n    This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\n- \"root\": run build scripts in the project's root directory.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set.","default":"workspace","type":"string","enum":["workspace","root"],"enumDescriptions":["The command will be executed in the corresponding workspace root.","The command will be executed in the project root."]},"rust-analyzer.cargo.buildScripts.invocationStrategy":{"markdownDescription":"Specifies the invocation strategy to use when running the build scripts command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set.","default":"per_workspace","type":"string","enum":["per_workspace","once"],"enumDescriptions":["The command will be executed for each workspace.","The command will be executed once."]},"rust-analyzer.cargo.buildScripts.overrideCommand":{"markdownDescription":"Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nIf there are multiple linked projects/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.cargo.buildScripts.invocationStrategy#` and\n`#rust-analyzer.cargo.buildScripts.invocationLocation#`.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets\n```\n.","default":null,"type":["null","array"],"items":{"type":"string"}},"rust-analyzer.cargo.buildScripts.useRustcWrapper":{"markdownDescription":"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things.","default":true,"type":"boolean"},"rust-analyzer.cargo.cfgs":{"markdownDescription":"List of cfg options to enable with the given values.","default":{},"type":"object"},"rust-analyzer.cargo.extraArgs":{"markdownDescription":"Extra arguments that are passed to every cargo invocation.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.cargo.extraEnv":{"markdownDescription":"Extra environment variables that will be set when running cargo, rustc\nor other commands within the workspace. Useful for setting RUSTFLAGS.","default":{},"type":"object"},"rust-analyzer.cargo.features":{"markdownDescription":"List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo.","default":[],"anyOf":[{"type":"string","enum":["all"],"enumDescriptions":["Pass `--all-features` to cargo"]},{"type":"array","items":{"type":"string"}}]},"rust-analyzer.cargo.noDefaultFeatures":{"markdownDescription":"Whether to pass `--no-default-features` to cargo.","default":false,"type":"boolean"},"rust-analyzer.cargo.sysroot":{"markdownDescription":"Relative path to the sysroot, or \"discover\" to try to automatically find it via\n\"rustc --print sysroot\".\n\nUnsetting this disables sysroot loading.\n\nThis option does not take effect until rust-analyzer is restarted.","default":"discover","type":["null","string"]},"rust-analyzer.cargo.sysrootSrc":{"markdownDescription":"Relative path to the sysroot library sources. If left unset, this will default to\n`{cargo.sysroot}/lib/rustlib/src/rust/library`.\n\nThis option does not take effect until rust-analyzer is restarted.","default":null,"type":["null","string"]},"rust-analyzer.cargo.target":{"markdownDescription":"Compilation target override (target triple).","default":null,"type":["null","string"]},"rust-analyzer.cargo.unsetTest":{"markdownDescription":"Unsets the implicit `#[cfg(test)]` for the specified crates.","default":["core"],"type":"array","items":{"type":"string"}},"rust-analyzer.checkOnSave":{"markdownDescription":"Run the check command for diagnostics on save.","default":true,"type":"boolean"},"rust-analyzer.check.allTargets":{"markdownDescription":"Check all targets and tests (`--all-targets`).","default":true,"type":"boolean"},"rust-analyzer.check.command":{"markdownDescription":"Cargo command to use for `cargo check`.","default":"check","type":"string"},"rust-analyzer.check.extraArgs":{"markdownDescription":"Extra arguments for `cargo check`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.check.extraEnv":{"markdownDescription":"Extra environment variables that will be set when running `cargo check`.\nExtends `#rust-analyzer.cargo.extraEnv#`.","default":{},"type":"object"},"rust-analyzer.check.features":{"markdownDescription":"List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo.","default":null,"anyOf":[{"type":"string","enum":["all"],"enumDescriptions":["Pass `--all-features` to cargo"]},{"type":"array","items":{"type":"string"}},{"type":"null"}]},"rust-analyzer.check.ignore":{"markdownDescription":"List of `cargo check` (or other command specified in `check.command`) diagnostics to ignore.\n\nFor example for `cargo check`: `dead_code`, `unused_imports`, `unused_variables`,...","default":[],"type":"array","items":{"type":"string"},"uniqueItems":true},"rust-analyzer.check.invocationLocation":{"markdownDescription":"Specifies the working directory for running checks.\n- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n    This falls back to \"root\" if `#rust-analyzer.cargo.check.invocationStrategy#` is set to `once`.\n- \"root\": run checks in the project's root directory.\nThis config only has an effect when `#rust-analyzer.cargo.check.overrideCommand#`\nis set.","default":"workspace","type":"string","enum":["workspace","root"],"enumDescriptions":["The command will be executed in the corresponding workspace root.","The command will be executed in the project root."]},"rust-analyzer.check.invocationStrategy":{"markdownDescription":"Specifies the invocation strategy to use when running the check command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.cargo.check.overrideCommand#`\nis set.","default":"per_workspace","type":"string","enum":["per_workspace","once"],"enumDescriptions":["The command will be executed for each workspace.","The command will be executed once."]},"rust-analyzer.check.noDefaultFeatures":{"markdownDescription":"Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`.","default":null,"type":["null","boolean"]},"rust-analyzer.check.overrideCommand":{"markdownDescription":"Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefore include `--message-format=json` or a similar option\n(if your client supports the `colorDiagnosticOutput` experimental\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.cargo.check.invocationStrategy#` and\n`#rust-analyzer.cargo.check.invocationLocation#`.\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n.","default":null,"type":["null","array"],"items":{"type":"string"}},"rust-analyzer.check.targets":{"markdownDescription":"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n\nCan be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n\nAliased as `\"checkOnSave.targets\"`.","default":null,"anyOf":[{"type":"null"},{"type":"string"},{"type":"array","items":{"type":"string"}}]},"rust-analyzer.completion.autoimport.enable":{"markdownDescription":"Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.","default":true,"type":"boolean"},"rust-analyzer.completion.autoself.enable":{"markdownDescription":"Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.","default":true,"type":"boolean"},"rust-analyzer.completion.callable.snippets":{"markdownDescription":"Whether to add parenthesis and argument snippets when completing function.","default":"fill_arguments","type":"string","enum":["fill_arguments","add_parentheses","none"],"enumDescriptions":["Add call parentheses and pre-fill arguments.","Add call parentheses.","Do no snippet completions for callables."]},"rust-analyzer.completion.fullFunctionSignatures.enable":{"markdownDescription":"Whether to show full function/method signatures in completion docs.","default":false,"type":"boolean"},"rust-analyzer.completion.limit":{"markdownDescription":"Maximum number of completions to return. If `None`, the limit is infinite.","default":null,"type":["null","integer"],"minimum":0},"rust-analyzer.completion.postfix.enable":{"markdownDescription":"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.","default":true,"type":"boolean"},"rust-analyzer.completion.privateEditable.enable":{"markdownDescription":"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.","default":false,"type":"boolean"},"rust-analyzer.completion.snippets.custom":{"markdownDescription":"Custom completion snippets.","default":{"Arc::new":{"postfix":"arc","body":"Arc::new(${receiver})","requires":"std::sync::Arc","description":"Put the expression into an `Arc`","scope":"expr"},"Rc::new":{"postfix":"rc","body":"Rc::new(${receiver})","requires":"std::rc::Rc","description":"Put the expression into an `Rc`","scope":"expr"},"Box::pin":{"postfix":"pinbox","body":"Box::pin(${receiver})","requires":"std::boxed::Box","description":"Put the expression into a pinned `Box`","scope":"expr"},"Ok":{"postfix":"ok","body":"Ok(${receiver})","description":"Wrap the expression in a `Result::Ok`","scope":"expr"},"Err":{"postfix":"err","body":"Err(${receiver})","description":"Wrap the expression in a `Result::Err`","scope":"expr"},"Some":{"postfix":"some","body":"Some(${receiver})","description":"Wrap the expression in an `Option::Some`","scope":"expr"}},"type":"object"},"rust-analyzer.diagnostics.disabled":{"markdownDescription":"List of rust-analyzer diagnostics to disable.","default":[],"type":"array","items":{"type":"string"},"uniqueItems":true},"rust-analyzer.diagnostics.enable":{"markdownDescription":"Whether to show native rust-analyzer diagnostics.","default":true,"type":"boolean"},"rust-analyzer.diagnostics.experimental.enable":{"markdownDescription":"Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.","default":false,"type":"boolean"},"rust-analyzer.diagnostics.remapPrefix":{"markdownDescription":"Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.","default":{},"type":"object"},"rust-analyzer.diagnostics.warningsAsHint":{"markdownDescription":"List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.diagnostics.warningsAsInfo":{"markdownDescription":"List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.files.excludeDirs":{"markdownDescription":"These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.files.watcher":{"markdownDescription":"Controls file watching implementation.","default":"client","type":"string","enum":["client","server"],"enumDescriptions":["Use the client (editor) to watch files for changes","Use server-side file watching"]},"rust-analyzer.highlightRelated.breakPoints.enable":{"markdownDescription":"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.","default":true,"type":"boolean"},"rust-analyzer.highlightRelated.closureCaptures.enable":{"markdownDescription":"Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.","default":true,"type":"boolean"},"rust-analyzer.highlightRelated.exitPoints.enable":{"markdownDescription":"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).","default":true,"type":"boolean"},"rust-analyzer.highlightRelated.references.enable":{"markdownDescription":"Enables highlighting of related references while the cursor is on any identifier.","default":true,"type":"boolean"},"rust-analyzer.highlightRelated.yieldPoints.enable":{"markdownDescription":"Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.","default":true,"type":"boolean"},"rust-analyzer.hover.actions.debug.enable":{"markdownDescription":"Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.hover.actions.enable":{"markdownDescription":"Whether to show HoverActions in Rust files.","default":true,"type":"boolean"},"rust-analyzer.hover.actions.gotoTypeDef.enable":{"markdownDescription":"Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.hover.actions.implementations.enable":{"markdownDescription":"Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.hover.actions.references.enable":{"markdownDescription":"Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":false,"type":"boolean"},"rust-analyzer.hover.actions.run.enable":{"markdownDescription":"Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.hover.documentation.enable":{"markdownDescription":"Whether to show documentation on hover.","default":true,"type":"boolean"},"rust-analyzer.hover.documentation.keywords.enable":{"markdownDescription":"Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.hover.links.enable":{"markdownDescription":"Use markdown syntax for links on hover.","default":true,"type":"boolean"},"rust-analyzer.hover.memoryLayout.alignment":{"markdownDescription":"How to render the align information in a memory layout hover.","default":"hexadecimal","anyOf":[{"type":"null"},{"type":"string","enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}]},"rust-analyzer.hover.memoryLayout.enable":{"markdownDescription":"Whether to show memory layout data on hover.","default":true,"type":"boolean"},"rust-analyzer.hover.memoryLayout.niches":{"markdownDescription":"How to render the niche information in a memory layout hover.","default":false,"type":["null","boolean"]},"rust-analyzer.hover.memoryLayout.offset":{"markdownDescription":"How to render the offset information in a memory layout hover.","default":"hexadecimal","anyOf":[{"type":"null"},{"type":"string","enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}]},"rust-analyzer.hover.memoryLayout.size":{"markdownDescription":"How to render the size information in a memory layout hover.","default":"both","anyOf":[{"type":"null"},{"type":"string","enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}]},"rust-analyzer.imports.granularity.enforce":{"markdownDescription":"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.","default":false,"type":"boolean"},"rust-analyzer.imports.granularity.group":{"markdownDescription":"How imports should be grouped into use statements.","default":"crate","type":"string","enum":["preserve","crate","module","item"],"enumDescriptions":["Do not change the granularity of any imports and preserve the original structure written by the developer.","Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.","Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.","Flatten imports so that each has its own use statement."]},"rust-analyzer.imports.group.enable":{"markdownDescription":"Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.","default":true,"type":"boolean"},"rust-analyzer.imports.merge.glob":{"markdownDescription":"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.","default":true,"type":"boolean"},"rust-analyzer.imports.preferNoStd":{"markdownDescription":"Prefer to unconditionally use imports of the core and alloc crate, over the std crate.","default":false,"type":"boolean"},"rust-analyzer.imports.preferPrelude":{"markdownDescription":"Whether to prefer import paths containing a `prelude` module.","default":false,"type":"boolean"},"rust-analyzer.imports.prefix":{"markdownDescription":"The path structure for newly inserted paths to use.","default":"plain","type":"string","enum":["plain","self","crate"],"enumDescriptions":["Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.","Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.","Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."]},"rust-analyzer.inlayHints.bindingModeHints.enable":{"markdownDescription":"Whether to show inlay type hints for binding modes.","default":false,"type":"boolean"},"rust-analyzer.inlayHints.chainingHints.enable":{"markdownDescription":"Whether to show inlay type hints for method chains.","default":true,"type":"boolean"},"rust-analyzer.inlayHints.closingBraceHints.enable":{"markdownDescription":"Whether to show inlay hints after a closing `}` to indicate what item it belongs to.","default":true,"type":"boolean"},"rust-analyzer.inlayHints.closingBraceHints.minLines":{"markdownDescription":"Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them).","default":25,"type":"integer","minimum":0},"rust-analyzer.inlayHints.closureCaptureHints.enable":{"markdownDescription":"Whether to show inlay hints for closure captures.","default":false,"type":"boolean"},"rust-analyzer.inlayHints.closureReturnTypeHints.enable":{"markdownDescription":"Whether to show inlay type hints for return types of closures.","default":"never","type":"string","enum":["always","never","with_block"],"enumDescriptions":["Always show type hints for return types of closures.","Never show type hints for return types of closures.","Only show type hints for return types of closures with blocks."]},"rust-analyzer.inlayHints.closureStyle":{"markdownDescription":"Closure notation in type and chaining inlay hints.","default":"impl_fn","type":"string","enum":["impl_fn","rust_analyzer","with_id","hide"],"enumDescriptions":["`impl_fn`: `impl FnMut(i32, u64) -> i8`","`rust_analyzer`: `|i32, u64| -> i8`","`with_id`: `{closure#14352}`, where that id is the unique number of the closure in r-a internals","`hide`: Shows `...` for every closure type"]},"rust-analyzer.inlayHints.discriminantHints.enable":{"markdownDescription":"Whether to show enum variant discriminant hints.","default":"never","type":"string","enum":["always","never","fieldless"],"enumDescriptions":["Always show all discriminant hints.","Never show discriminant hints.","Only show discriminant hints on fieldless enum variants."]},"rust-analyzer.inlayHints.expressionAdjustmentHints.enable":{"markdownDescription":"Whether to show inlay hints for type adjustments.","default":"never","type":"string","enum":["always","never","reborrow"],"enumDescriptions":["Always show all adjustment hints.","Never show adjustment hints.","Only show auto borrow and dereference adjustment hints."]},"rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe":{"markdownDescription":"Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.","default":false,"type":"boolean"},"rust-analyzer.inlayHints.expressionAdjustmentHints.mode":{"markdownDescription":"Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).","default":"prefix","type":"string","enum":["prefix","postfix","prefer_prefix","prefer_postfix"],"enumDescriptions":["Always show adjustment hints as prefix (`*expr`).","Always show adjustment hints as postfix (`expr.*`).","Show prefix or postfix depending on which uses less parenthesis, preferring prefix.","Show prefix or postfix depending on which uses less parenthesis, preferring postfix."]},"rust-analyzer.inlayHints.implicitDrops.enable":{"markdownDescription":"Whether to show implicit drop hints.","default":false,"type":"boolean"},"rust-analyzer.inlayHints.lifetimeElisionHints.enable":{"markdownDescription":"Whether to show inlay type hints for elided lifetimes in function signatures.","default":"never","type":"string","enum":["always","never","skip_trivial"],"enumDescriptions":["Always show lifetime elision hints.","Never show lifetime elision hints.","Only show lifetime elision hints if a return type is involved."]},"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames":{"markdownDescription":"Whether to prefer using parameter names as the name for elided lifetime hints if possible.","default":false,"type":"boolean"},"rust-analyzer.inlayHints.maxLength":{"markdownDescription":"Maximum length for inlay hints. Set to null to have an unlimited length.","default":25,"type":["null","integer"],"minimum":0},"rust-analyzer.inlayHints.parameterHints.enable":{"markdownDescription":"Whether to show function parameter name inlay hints at the call\nsite.","default":true,"type":"boolean"},"rust-analyzer.inlayHints.reborrowHints.enable":{"markdownDescription":"Whether to show inlay hints for compiler inserted reborrows.\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.","default":"never","type":"string","enum":["always","never","mutable"],"enumDescriptions":["Always show reborrow hints.","Never show reborrow hints.","Only show mutable reborrow hints."]},"rust-analyzer.inlayHints.renderColons":{"markdownDescription":"Whether to render leading colons for type hints, and trailing colons for parameter hints.","default":true,"type":"boolean"},"rust-analyzer.inlayHints.typeHints.enable":{"markdownDescription":"Whether to show inlay type hints for variables.","default":true,"type":"boolean"},"rust-analyzer.inlayHints.typeHints.hideClosureInitialization":{"markdownDescription":"Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.","default":false,"type":"boolean"},"rust-analyzer.inlayHints.typeHints.hideNamedConstructor":{"markdownDescription":"Whether to hide inlay type hints for constructors.","default":false,"type":"boolean"},"rust-analyzer.interpret.tests":{"markdownDescription":"Enables the experimental support for interpreting tests.","default":false,"type":"boolean"},"rust-analyzer.joinLines.joinAssignments":{"markdownDescription":"Join lines merges consecutive declaration and initialization of an assignment.","default":true,"type":"boolean"},"rust-analyzer.joinLines.joinElseIf":{"markdownDescription":"Join lines inserts else between consecutive ifs.","default":true,"type":"boolean"},"rust-analyzer.joinLines.removeTrailingComma":{"markdownDescription":"Join lines removes trailing commas.","default":true,"type":"boolean"},"rust-analyzer.joinLines.unwrapTrivialBlock":{"markdownDescription":"Join lines unwraps trivial blocks.","default":true,"type":"boolean"},"rust-analyzer.lens.debug.enable":{"markdownDescription":"Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.lens.enable":{"markdownDescription":"Whether to show CodeLens in Rust files.","default":true,"type":"boolean"},"rust-analyzer.lens.forceCustomCommands":{"markdownDescription":"Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability.","default":true,"type":"boolean"},"rust-analyzer.lens.implementations.enable":{"markdownDescription":"Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.lens.location":{"markdownDescription":"Where to render annotations.","default":"above_name","type":"string","enum":["above_name","above_whole_item"],"enumDescriptions":["Render annotations above the name of the item.","Render annotations above the whole item, including documentation comments and attributes."]},"rust-analyzer.lens.references.adt.enable":{"markdownDescription":"Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","default":false,"type":"boolean"},"rust-analyzer.lens.references.enumVariant.enable":{"markdownDescription":"Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","default":false,"type":"boolean"},"rust-analyzer.lens.references.method.enable":{"markdownDescription":"Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":false,"type":"boolean"},"rust-analyzer.lens.references.trait.enable":{"markdownDescription":"Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","default":false,"type":"boolean"},"rust-analyzer.lens.run.enable":{"markdownDescription":"Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":true,"type":"boolean"},"rust-analyzer.linkedProjects":{"markdownDescription":"Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format.","default":[],"type":"array","items":{"type":["string","object"]}},"rust-analyzer.lru.capacity":{"markdownDescription":"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.","default":null,"type":["null","integer"],"minimum":0},"rust-analyzer.lru.query.capacities":{"markdownDescription":"Sets the LRU capacity of the specified queries.","default":{},"type":"object"},"rust-analyzer.notifications.cargoTomlNotFound":{"markdownDescription":"Whether to show `can't find Cargo.toml` error message.","default":true,"type":"boolean"},"rust-analyzer.numThreads":{"markdownDescription":"How many worker threads in the main loop. The default `null` means to pick automatically.","default":null,"type":["null","integer"],"minimum":0},"rust-analyzer.procMacro.attributes.enable":{"markdownDescription":"Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.","default":true,"type":"boolean"},"rust-analyzer.procMacro.enable":{"markdownDescription":"Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.","default":true,"type":"boolean"},"rust-analyzer.procMacro.ignored":{"markdownDescription":"These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.","default":{},"type":"object"},"rust-analyzer.procMacro.server":{"markdownDescription":"Internal config, path to proc-macro server executable.","default":null,"type":["null","string"]},"rust-analyzer.references.excludeImports":{"markdownDescription":"Exclude imports from find-all-references.","default":false,"type":"boolean"},"rust-analyzer.runnables.command":{"markdownDescription":"Command to be executed instead of 'cargo' for runnables.","default":null,"type":["null","string"]},"rust-analyzer.runnables.extraArgs":{"markdownDescription":"Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.rust.analyzerTargetDir":{"markdownDescription":"Optional path to a rust-analyzer specific target directory.\nThis prevents rust-analyzer's `cargo check` from locking the `Cargo.lock`\nat the expense of duplicating build artifacts.\n\nSet to `true` to use a subdirectory of the existing target directory or\nset to a path relative to the workspace to use that path.","default":null,"anyOf":[{"type":"null"},{"type":"boolean"},{"type":"string"}]},"rust-analyzer.rustc.source":{"markdownDescription":"Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.","default":null,"type":["null","string"]},"rust-analyzer.rustfmt.extraArgs":{"markdownDescription":"Additional arguments to `rustfmt`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.rustfmt.overrideCommand":{"markdownDescription":"Advanced option, fully override the command rust-analyzer uses for\nformatting. This should be the equivalent of `rustfmt` here, and\nnot that of `cargo fmt`. The file contents will be passed on the\nstandard input and the formatted result will be read from the\nstandard output.","default":null,"type":["null","array"],"items":{"type":"string"}},"rust-analyzer.rustfmt.rangeFormatting.enable":{"markdownDescription":"Enables the use of rustfmt's unstable range formatting command for the\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.","default":false,"type":"boolean"},"rust-analyzer.semanticHighlighting.doc.comment.inject.enable":{"markdownDescription":"Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links.","default":true,"type":"boolean"},"rust-analyzer.semanticHighlighting.nonStandardTokens":{"markdownDescription":"Whether the server is allowed to emit non-standard tokens and modifiers.","default":true,"type":"boolean"},"rust-analyzer.semanticHighlighting.operator.enable":{"markdownDescription":"Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers.","default":true,"type":"boolean"},"rust-analyzer.semanticHighlighting.operator.specialization.enable":{"markdownDescription":"Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type.","default":false,"type":"boolean"},"rust-analyzer.semanticHighlighting.punctuation.enable":{"markdownDescription":"Use semantic tokens for punctuation.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role.","default":false,"type":"boolean"},"rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang":{"markdownDescription":"When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls.","default":false,"type":"boolean"},"rust-analyzer.semanticHighlighting.punctuation.specialization.enable":{"markdownDescription":"Use specialized semantic tokens for punctuation.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type.","default":false,"type":"boolean"},"rust-analyzer.semanticHighlighting.strings.enable":{"markdownDescription":"Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.","default":true,"type":"boolean"},"rust-analyzer.signatureInfo.detail":{"markdownDescription":"Show full signature of the callable. Only shows parameters if disabled.","default":"full","type":"string","enum":["full","parameters"],"enumDescriptions":["Show the entire signature.","Show only the parameters."]},"rust-analyzer.signatureInfo.documentation.enable":{"markdownDescription":"Show documentation.","default":true,"type":"boolean"},"rust-analyzer.typing.autoClosingAngleBrackets.enable":{"markdownDescription":"Whether to insert closing angle brackets when typing an opening angle bracket of a generic argument list.","default":false,"type":"boolean"},"rust-analyzer.workspace.symbol.search.kind":{"markdownDescription":"Workspace symbol search kind.","default":"only_types","type":"string","enum":["only_types","all_symbols"],"enumDescriptions":["Search for types only.","Search for all symbols kinds."]},"rust-analyzer.workspace.symbol.search.limit":{"markdownDescription":"Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.","default":128,"type":"integer","minimum":0},"rust-analyzer.workspace.symbol.search.scope":{"markdownDescription":"Workspace symbol search scope.","default":"workspace","type":"string","enum":["workspace","workspace_and_dependencies"],"enumDescriptions":["Search in current workspace only.","Search in current workspace and dependencies."]}}},"configurationDefaults":{"explorer.fileNesting.patterns":{"Cargo.toml":"Cargo.lock"}},"problemPatterns":[{"name":"rustc","patterns":[{"regexp":"^(warning|warn|error)(?:\\[(.*?)\\])?: (.*)$","severity":1,"code":2,"message":3},{"regexp":"^[\\s->=]*(.*?):([1-9]\\d*):([1-9]\\d*)\\s*$","file":1,"line":2,"column":3}]},{"name":"rustc-json","patterns":[{"regexp":"^.*\"message\":{\"message\":\"([^\"]*).*?\"file_name\":\"([^\"]+).*?\"line_start\":(\\d+).*?\"line_end\":(\\d+).*?\"column_start\":(\\d+).*?\"column_end\":(\\d+).*}$","message":1,"file":2,"line":3,"endLine":4,"column":5,"endColumn":6}]},{"name":"rust-panic","patterns":[{"regexp":"^thread '.*' panicked at '(.*)', (.*):(\\d*):(\\d*)$","message":1,"file":2,"line":3,"column":4}]}],"languages":[{"id":"ra_syntax_tree","extensions":[".rast"]},{"id":"rust","extensions":[".rs"],"aliases":["Rust","rs"],"configuration":"language-configuration.json"}],"grammars":[{"language":"ra_syntax_tree","scopeName":"source.ra_syntax_tree","path":"ra_syntax_tree.tmGrammar.json"}],"problemMatchers":[{"name":"rustc","owner":"rustc","source":"rustc","fileLocation":["autoDetect","${workspaceRoot}"],"pattern":"$rustc"},{"name":"rustc-json","owner":"rustc","source":"rustc","fileLocation":["autoDetect","${workspaceRoot}"],"pattern":"$rustc-json"},{"name":"rust-panic","owner":"rust-panic","source":"panic","fileLocation":["autoDetect","${workspaceRoot}"],"pattern":"$rust-panic"},{"name":"rustc-watch","owner":"rustc","source":"rustc","fileLocation":["autoDetect","${workspaceRoot}"],"background":{"beginsPattern":"^\\[Running\\b","endsPattern":"^\\[Finished running\\b"},"pattern":"$rustc"}],"colors":[{"id":"rust_analyzer.syntaxTreeBorder","description":"Color of the border displayed in the Rust source code for the selected syntax node (see \"Show Syntax Tree\" command)","defaults":{"dark":"#ffffff","light":"#b700ff","highContrast":"#b700ff"}}],"semanticTokenTypes":[{"id":"angle","description":"Style for < or >","superType":"punctuation"},{"id":"arithmetic","description":"Style for arithmetic operators","superType":"operator"},{"id":"attribute","description":"Style for attributes"},{"id":"attributeBracket","description":"Style for attribute invocation brackets, that is the `#[` and `]` tokens","superType":"punctuation"},{"id":"bitwise","description":"Style for bitwise operators","superType":"operator"},{"id":"boolean","description":"Style for boolean literals","superType":"keyword"},{"id":"brace","description":"Style for { or }","superType":"punctuation"},{"id":"bracket","description":"Style for [ or ]","superType":"punctuation"},{"id":"builtinAttribute","description":"Style for builtin attributes","superType":"attribute"},{"id":"builtinType","description":"Style for builtin types","superType":"type"},{"id":"character","description":"Style for character literals","superType":"string"},{"id":"colon","description":"Style for :","superType":"punctuation"},{"id":"comma","description":"Style for ,","superType":"punctuation"},{"id":"comparison","description":"Style for comparison operators","superType":"operator"},{"id":"constParameter","description":"Style for const generics"},{"id":"derive","description":"Style for derives","superType":"attribute"},{"id":"deriveHelper","description":"Style for derive helpers","superType":"attribute"},{"id":"dot","description":"Style for .","superType":"punctuation"},{"id":"escapeSequence","description":"Style for char or byte escapes in strings"},{"id":"formatSpecifier","description":"Style for {} placeholders in format strings"},{"id":"invalidEscapeSequence","description":"Style for invalid char or byte escapes in strings"},{"id":"label","description":"Style for labels"},{"id":"lifetime","description":"Style for lifetimes"},{"id":"logical","description":"Style for logic operators","superType":"operator"},{"id":"macroBang","description":"Style for the ! token of macro calls","superType":"punctuation"},{"id":"operator","description":"Style for operators","superType":"punctuation"},{"id":"parenthesis","description":"Style for ( or )","superType":"punctuation"},{"id":"punctuation","description":"Style for generic punctuation"},{"id":"selfKeyword","description":"Style for the self keyword","superType":"keyword"},{"id":"selfTypeKeyword","description":"Style for the self type keyword","superType":"keyword"},{"id":"semicolon","description":"Style for ;","superType":"punctuation"},{"id":"typeAlias","description":"Style for type aliases","superType":"type"},{"id":"union","description":"Style for C-style untagged unions","superType":"type"},{"id":"unresolvedReference","description":"Style for names which can not be resolved due to compilation errors"}],"semanticTokenModifiers":[{"id":"async","description":"Style for async functions and the `async` and `await` keywords"},{"id":"attribute","description":"Style for elements within attributes"},{"id":"callable","description":"Style for locals whose types implements one of the `Fn*` traits"},{"id":"constant","description":"Style for compile-time constants"},{"id":"consuming","description":"Style for locals that are being consumed when use in a function call"},{"id":"controlFlow","description":"Style for control-flow related tokens, this includes the `?` operator"},{"id":"crateRoot","description":"Style for names resolving to a crate root"},{"id":"injected","description":"Style for doc-string injected highlighting like rust source blocks in documentation"},{"id":"intraDocLink","description":"Style for intra doc links in doc-strings"},{"id":"library","description":"Style for items that are defined outside of the current crate"},{"id":"mutable","description":"Style for mutable locals and statics as well as functions taking `&mut self`"},{"id":"public","description":"Style for items that are from the current crate and are `pub`"},{"id":"reference","description":"Style for locals behind a reference and functions taking `self` by reference"},{"id":"trait","description":"Style for associated trait items"},{"id":"unsafe","description":"Style for unsafe operations, like unsafe function calls, as well as the `unsafe` token"}],"semanticTokenScopes":[{"language":"rust","scopes":{"attribute":["meta.attribute.rust"],"boolean":["constant.language.boolean.rust"],"builtinType":["support.type.primitive.rust"],"constParameter":["constant.other.caps.rust"],"enum":["entity.name.type.enum.rust"],"formatSpecifier":["punctuation.section.embedded.rust"],"function":["entity.name.function.rust"],"interface":["entity.name.type.trait.rust"],"keyword":["keyword.other.rust"],"keyword.controlFlow":["keyword.control.rust"],"lifetime":["storage.modifier.lifetime.rust"],"macroBang":["entity.name.function.macro.rust"],"method":["entity.name.function.rust"],"struct":["entity.name.type.struct.rust"],"typeAlias":["entity.name.type.declaration.rust"],"union":["entity.name.type.union.rust"],"variable":["variable.other.rust"],"variable.constant":["variable.other.constant.rust"],"*.mutable":["markup.underline"]}}],"menus":{"commandPalette":[{"command":"rust-analyzer.syntaxTree","when":"inRustProject"},{"command":"rust-analyzer.viewHir","when":"inRustProject"},{"command":"rust-analyzer.viewFileText","when":"inRustProject"},{"command":"rust-analyzer.expandMacro","when":"inRustProject"},{"command":"rust-analyzer.matchingBrace","when":"inRustProject"},{"command":"rust-analyzer.parentModule","when":"inRustProject"},{"command":"rust-analyzer.joinLines","when":"inRustProject"},{"command":"rust-analyzer.run","when":"inRustProject"},{"command":"rust-analyzer.debug","when":"inRustProject"},{"command":"rust-analyzer.newDebugConfig","when":"inRustProject"},{"command":"rust-analyzer.analyzerStatus","when":"inRustProject"},{"command":"rust-analyzer.memoryUsage","when":"inRustProject"},{"command":"rust-analyzer.reloadWorkspace","when":"inRustProject"},{"command":"rust-analyzer.restartServer","when":"inRustProject"},{"command":"rust-analyzer.onEnter","when":"inRustProject"},{"command":"rust-analyzer.ssr","when":"inRustProject"},{"command":"rust-analyzer.serverVersion","when":"inRustProject"},{"command":"rust-analyzer.openDocs","when":"inRustProject"},{"command":"rust-analyzer.openCargoToml","when":"inRustProject"},{"command":"rust-analyzer.viewMemoryLayout","when":"inRustProject"}],"editor/context":[{"command":"rust-analyzer.peekTests","when":"inRustProject && editorTextFocus && editorLangId == rust","group":"navigation@1000"},{"command":"rust-analyzer.openDocs","when":"inRustProject && editorTextFocus && editorLangId == rust","group":"navigation@1001"}]},"views":{"explorer":[{"id":"rustDependencies","name":"Rust Dependencies","when":"inRustProject && config.rust-analyzer.showDependenciesExplorer"}]},"jsonValidation":[{"fileMatch":"rust-project.json","url":"https://json.schemastore.org/rust-project.json"}]}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/rust-lang.rust-analyzer-0.3.1766-linux-x64","scheme":"file"},"isBuiltin":false,"targetPlatform":"linux-x64","metadata":{"id":"06574cb4-e5dc-4631-8174-a543a4533621","publisherId":"cb14a7a7-a188-40bd-a953-e0a20757c5dd","publisherDisplayName":"rust-lang","targetPlatform":"linux-x64","isApplicationScoped":false,"updated":true,"isPreReleaseVersion":false,"installedTimestamp":1702298001332,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"sumneko.lua","uuid":"3a15b5a7-be12-47e3-8445-88ee3eabc8b2"},"manifest":{"activationEvents":["onLanguage:lua","onWebviewPanel:lua-doc","onCommand:extension.lua.doc"],"author":"sumneko","capabilities":{"untrustedWorkspaces":{"description":"","restrictedConfigurations":["Lua.runtime.plugin","Lua.misc.parameters"],"supported":"limited"}},"categories":["Linters","Programming Languages","Snippets"],"contributes":{"commands":[{"command":"lua.psi.view","title":"Lua Psi Viewer"},{"command":"lua.addon_manager.open","title":"Lua: Open Addon Manager ..."},{"command":"lua.exportDocument","title":"Lua: Export Document ..."},{"command":"lua.reloadFFIMeta","title":"Lua: Reload luajit ffi meta"}],"configuration":{"properties":{"Lua.addonManager.enable":{"default":true,"markdownDescription":"Whether the addon manager is enabled or not.","scope":"resource","type":"boolean"},"Lua.codeLens.enable":{"default":false,"markdownDescription":"Enable code lens.","scope":"resource","type":"boolean"},"Lua.completion.autoRequire":{"default":true,"markdownDescription":"When the input looks like a file name, automatically `require` this file.","scope":"resource","type":"boolean"},"Lua.completion.callSnippet":{"default":"Disable","enum":["Disable","Both","Replace"],"markdownDescription":"Shows function call snippets.","markdownEnumDescriptions":["Only shows `function name`.","Shows `function name` and `call snippet`.","Only shows `call snippet.`"],"scope":"resource","type":"string"},"Lua.completion.displayContext":{"default":0,"markdownDescription":"Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to `0`, this feature can be disabled.","scope":"resource","type":"integer"},"Lua.completion.enable":{"default":true,"markdownDescription":"Enable completion.","scope":"resource","type":"boolean"},"Lua.completion.keywordSnippet":{"default":"Replace","enum":["Disable","Both","Replace"],"markdownDescription":"Shows keyword syntax snippets.","markdownEnumDescriptions":["Only shows `keyword`.","Shows `keyword` and `syntax snippet`.","Only shows `syntax snippet`."],"scope":"resource","type":"string"},"Lua.completion.postfix":{"default":"@","markdownDescription":"The symbol used to trigger the postfix suggestion.","scope":"resource","type":"string"},"Lua.completion.requireSeparator":{"default":".","markdownDescription":"The separator used when `require`.","scope":"resource","type":"string"},"Lua.completion.showParams":{"default":true,"markdownDescription":"Display parameters in completion list. When the function has multiple definitions, they will be displayed separately.","scope":"resource","type":"boolean"},"Lua.completion.showWord":{"default":"Fallback","enum":["Enable","Fallback","Disable"],"markdownDescription":"Show contextual words in suggestions.","markdownEnumDescriptions":["Always show context words in suggestions.","Contextual words are only displayed when suggestions based on semantics cannot be provided.","Do not display context words."],"scope":"resource","type":"string"},"Lua.completion.workspaceWord":{"default":true,"markdownDescription":"Whether the displayed context word contains the content of other files in the workspace.","scope":"resource","type":"boolean"},"Lua.diagnostics.disable":{"default":[],"items":{"enum":["action-after-return","ambiguity-1","ambiguous-syntax","args-after-dots","assign-type-mismatch","await-in-sync","block-after-else","break-outside","cast-local-type","cast-type-mismatch","circle-doc-class","close-non-object","code-after-break","codestyle-check","count-down-loop","deprecated","different-requires","discard-returns","doc-field-no-class","duplicate-doc-alias","duplicate-doc-field","duplicate-doc-param","duplicate-index","duplicate-set-field","empty-block","err-assign-as-eq","err-c-long-comment","err-comment-prefix","err-do-as-then","err-eq-as-assign","err-esc","err-nonstandard-symbol","err-then-as-do","exp-in-action","global-element","global-in-nil-env","incomplete-signature-doc","index-in-func-name","inject-field","invisible","jump-local-scope","keyword","local-limit","lowercase-global","lua-doc-miss-sign","luadoc-error-diag-mode","luadoc-miss-alias-extends","luadoc-miss-alias-name","luadoc-miss-arg-name","luadoc-miss-cate-name","luadoc-miss-class-extends-name","luadoc-miss-class-name","luadoc-miss-diag-mode","luadoc-miss-diag-name","luadoc-miss-field-extends","luadoc-miss-field-name","luadoc-miss-fun-after-overload","luadoc-miss-generic-name","luadoc-miss-local-name","luadoc-miss-module-name","luadoc-miss-operator-name","luadoc-miss-param-extends","luadoc-miss-param-name","luadoc-miss-see-name","luadoc-miss-sign-name","luadoc-miss-symbol","luadoc-miss-type-name","luadoc-miss-vararg-type","luadoc-miss-version","malformed-number","miss-end","miss-esc-x","miss-exp","miss-exponent","miss-field","miss-loop-max","miss-loop-min","miss-method","miss-name","miss-sep-in-table","miss-space-between","miss-symbol","missing-fields","missing-global-doc","missing-local-export-doc","missing-parameter","missing-return","missing-return-value","name-style-check","need-check-nil","need-paren","nesting-long-mark","newfield-call","newline-call","no-unknown","no-visible-label","not-yieldable","param-type-mismatch","redefined-label","redefined-local","redundant-parameter","redundant-return","redundant-return-value","redundant-value","return-type-mismatch","set-const","spell-check","trailing-space","unbalanced-assignments","undefined-doc-class","undefined-doc-name","undefined-doc-param","undefined-env-child","undefined-field","undefined-global","unexpect-dots","unexpect-efunc-name","unexpect-lfunc-name","unexpect-symbol","unicode-name","unknown-attribute","unknown-cast-variable","unknown-diag-code","unknown-operator","unknown-symbol","unreachable-code","unsupport-symbol","unused-function","unused-label","unused-local","unused-vararg"],"type":"string"},"markdownDescription":"Disabled diagnostic (Use code in hover brackets).","scope":"resource","type":"array"},"Lua.diagnostics.disableScheme":{"default":["git"],"items":{"type":"string"},"markdownDescription":"Do not diagnose Lua files that use the following scheme.","scope":"resource","type":"array"},"Lua.diagnostics.enable":{"default":true,"markdownDescription":"Enable diagnostics.","scope":"resource","type":"boolean"},"Lua.diagnostics.globals":{"default":[],"items":{"type":"string"},"markdownDescription":"Defined global variables.","scope":"resource","type":"array"},"Lua.diagnostics.groupFileStatus":{"additionalProperties":false,"markdownDescription":"Modify the diagnostic needed file status in a group.\n\n* Opened:  only diagnose opened files\n* Any:     diagnose all files\n* None:    disable this diagnostic\n\n`Fallback` means that diagnostics in this group are controlled by `diagnostics.neededFileStatus` separately.\nOther settings will override individual settings without end of `!`.\n","properties":{"ambiguity":{"default":"Fallback","description":"* ambiguity-1\n* count-down-loop\n* different-requires\n* newfield-call\n* newline-call","enum":["Any","Opened","None","Fallback"],"type":"string"},"await":{"default":"Fallback","description":"* await-in-sync\n* not-yieldable","enum":["Any","Opened","None","Fallback"],"type":"string"},"codestyle":{"default":"Fallback","description":"* codestyle-check\n* name-style-check\n* spell-check","enum":["Any","Opened","None","Fallback"],"type":"string"},"conventions":{"default":"Fallback","description":"* global-element","enum":["Any","Opened","None","Fallback"],"type":"string"},"duplicate":{"default":"Fallback","description":"* duplicate-index\n* duplicate-set-field","enum":["Any","Opened","None","Fallback"],"type":"string"},"global":{"default":"Fallback","description":"* global-in-nil-env\n* lowercase-global\n* undefined-env-child\n* undefined-global","enum":["Any","Opened","None","Fallback"],"type":"string"},"luadoc":{"default":"Fallback","description":"* circle-doc-class\n* doc-field-no-class\n* duplicate-doc-alias\n* duplicate-doc-field\n* duplicate-doc-param\n* incomplete-signature-doc\n* missing-global-doc\n* missing-local-export-doc\n* undefined-doc-class\n* undefined-doc-name\n* undefined-doc-param\n* unknown-cast-variable\n* unknown-diag-code\n* unknown-operator","enum":["Any","Opened","None","Fallback"],"type":"string"},"redefined":{"default":"Fallback","description":"* redefined-local","enum":["Any","Opened","None","Fallback"],"type":"string"},"strict":{"default":"Fallback","description":"* close-non-object\n* deprecated\n* discard-returns\n* invisible","enum":["Any","Opened","None","Fallback"],"type":"string"},"strong":{"default":"Fallback","description":"* no-unknown","enum":["Any","Opened","None","Fallback"],"type":"string"},"type-check":{"default":"Fallback","description":"* assign-type-mismatch\n* cast-local-type\n* cast-type-mismatch\n* inject-field\n* need-check-nil\n* param-type-mismatch\n* return-type-mismatch\n* undefined-field","enum":["Any","Opened","None","Fallback"],"type":"string"},"unbalanced":{"default":"Fallback","description":"* missing-fields\n* missing-parameter\n* missing-return\n* missing-return-value\n* redundant-parameter\n* redundant-return-value\n* redundant-value\n* unbalanced-assignments","enum":["Any","Opened","None","Fallback"],"type":"string"},"unused":{"default":"Fallback","description":"* code-after-break\n* empty-block\n* redundant-return\n* trailing-space\n* unreachable-code\n* unused-function\n* unused-label\n* unused-local\n* unused-vararg","enum":["Any","Opened","None","Fallback"],"type":"string"}},"scope":"resource","title":"groupFileStatus","type":"object"},"Lua.diagnostics.groupSeverity":{"additionalProperties":false,"markdownDescription":"Modify the diagnostic severity in a group.\n`Fallback` means that diagnostics in this group are controlled by `diagnostics.severity` separately.\nOther settings will override individual settings without end of `!`.\n","properties":{"ambiguity":{"default":"Fallback","description":"* ambiguity-1\n* count-down-loop\n* different-requires\n* newfield-call\n* newline-call","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"await":{"default":"Fallback","description":"* await-in-sync\n* not-yieldable","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"codestyle":{"default":"Fallback","description":"* codestyle-check\n* name-style-check\n* spell-check","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"conventions":{"default":"Fallback","description":"* global-element","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"duplicate":{"default":"Fallback","description":"* duplicate-index\n* duplicate-set-field","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"global":{"default":"Fallback","description":"* global-in-nil-env\n* lowercase-global\n* undefined-env-child\n* undefined-global","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"luadoc":{"default":"Fallback","description":"* circle-doc-class\n* doc-field-no-class\n* duplicate-doc-alias\n* duplicate-doc-field\n* duplicate-doc-param\n* incomplete-signature-doc\n* missing-global-doc\n* missing-local-export-doc\n* undefined-doc-class\n* undefined-doc-name\n* undefined-doc-param\n* unknown-cast-variable\n* unknown-diag-code\n* unknown-operator","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"redefined":{"default":"Fallback","description":"* redefined-local","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"strict":{"default":"Fallback","description":"* close-non-object\n* deprecated\n* discard-returns\n* invisible","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"strong":{"default":"Fallback","description":"* no-unknown","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"type-check":{"default":"Fallback","description":"* assign-type-mismatch\n* cast-local-type\n* cast-type-mismatch\n* inject-field\n* need-check-nil\n* param-type-mismatch\n* return-type-mismatch\n* undefined-field","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"unbalanced":{"default":"Fallback","description":"* missing-fields\n* missing-parameter\n* missing-return\n* missing-return-value\n* redundant-parameter\n* redundant-return-value\n* redundant-value\n* unbalanced-assignments","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"},"unused":{"default":"Fallback","description":"* code-after-break\n* empty-block\n* redundant-return\n* trailing-space\n* unreachable-code\n* unused-function\n* unused-label\n* unused-local\n* unused-vararg","enum":["Error","Warning","Information","Hint","Fallback"],"type":"string"}},"scope":"resource","title":"groupSeverity","type":"object"},"Lua.diagnostics.ignoredFiles":{"default":"Opened","enum":["Enable","Opened","Disable"],"markdownDescription":"How to diagnose ignored files.","markdownEnumDescriptions":["Always diagnose these files.","Only when these files are opened will it be diagnosed.","These files are not diagnosed."],"scope":"resource","type":"string"},"Lua.diagnostics.libraryFiles":{"default":"Opened","enum":["Enable","Opened","Disable"],"markdownDescription":"How to diagnose files loaded via `Lua.workspace.library`.","markdownEnumDescriptions":["Always diagnose these files.","Only when these files are opened will it be diagnosed.","These files are not diagnosed."],"scope":"resource","type":"string"},"Lua.diagnostics.neededFileStatus":{"additionalProperties":false,"markdownDescription":"* Opened:  only diagnose opened files\n* Any:     diagnose all files\n* None:    disable this diagnostic\n\nEnd with `!` means override the group setting `diagnostics.groupFileStatus`.\n","properties":{"ambiguity-1":{"default":"Any","description":"Enable ambiguous operator precedence diagnostics. For example, the `num or 0 + 1` expression will be suggested `(num or 0) + 1` instead.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"assign-type-mismatch":{"default":"Opened","description":"Enable diagnostics for assignments in which the value's type does not match the type of the assigned variable.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"await-in-sync":{"default":"None","description":"Enable diagnostics for calls of asynchronous functions within a synchronous function.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"cast-local-type":{"default":"Opened","description":"Enable diagnostics for casts of local variables where the target type does not match the defined type.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"cast-type-mismatch":{"default":"Opened","description":"Enable diagnostics for casts where the target type does not match the initial type.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"circle-doc-class":{"default":"Any","description":"TODO: Needs documentation","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"close-non-object":{"default":"Any","description":"Enable diagnostics for attempts to close a variable with a non-object.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"code-after-break":{"default":"Opened","description":"Enable diagnostics for code placed after a break statement in a loop.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"codestyle-check":{"default":"None","description":"Enable diagnostics for incorrectly styled lines.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"count-down-loop":{"default":"Any","description":"Enable diagnostics for `for` loops which will never reach their max/limit because the loop is incrementing instead of decrementing.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"deprecated":{"default":"Any","description":"Enable diagnostics to highlight deprecated API.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"different-requires":{"default":"Any","description":"Enable diagnostics for files which are required by two different paths.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"discard-returns":{"default":"Any","description":"Enable diagnostics for calls of functions annotated with `---@nodiscard` where the return values are ignored.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"doc-field-no-class":{"default":"Any","description":"Enable diagnostics to highlight a field annotation without a defining class annotation.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"duplicate-doc-alias":{"default":"Any","description":"Enable diagnostics for a duplicated alias annotation name.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"duplicate-doc-field":{"default":"Any","description":"Enable diagnostics for a duplicated field annotation name.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"duplicate-doc-param":{"default":"Any","description":"Enable diagnostics for a duplicated param annotation name.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"duplicate-index":{"default":"Any","description":"Enable duplicate table index diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"duplicate-set-field":{"default":"Opened","description":"Enable diagnostics for setting the same field in a class more than once.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"empty-block":{"default":"Opened","description":"Enable empty code block diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"global-element":{"default":"None","description":"Enable diagnostics to warn about global elements.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"global-in-nil-env":{"default":"Any","description":"Enable cannot use global variables （ `_ENV` is set to `nil`） diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"incomplete-signature-doc":{"default":"None","description":"Incomplete @param or @return annotations for functions.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"inject-field":{"default":"Opened","description":"TODO: Needs documentation","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"invisible":{"default":"Any","description":"Enable diagnostics for accesses to fields which are invisible.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"lowercase-global":{"default":"Any","description":"Enable lowercase global variable definition diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"missing-fields":{"default":"Any","description":"TODO: Needs documentation","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"missing-global-doc":{"default":"None","description":"Missing annotations for globals! Global functions must have a comment and annotations for all parameters and return values.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"missing-local-export-doc":{"default":"None","description":"Missing annotations for exported locals! Exported local functions must have a comment and annotations for all parameters and return values.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"missing-parameter":{"default":"Any","description":"Enable diagnostics for function calls where the number of arguments is less than the number of annotated function parameters.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"missing-return":{"default":"Any","description":"Enable diagnostics for functions with return annotations which have no return statement.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"missing-return-value":{"default":"Any","description":"Enable diagnostics for return statements without values although the containing function declares returns.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"name-style-check":{"default":"None","description":"Enable diagnostics for name style.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"need-check-nil":{"default":"Opened","description":"Enable diagnostics for variable usages if `nil` or an optional (potentially `nil`) value was assigned to the variable before.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"newfield-call":{"default":"Any","description":"Enable newfield call diagnostics. It is raised when the parenthesis of a function call appear on the following line when defining a field in a table.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"newline-call":{"default":"Any","description":"Enable newline call diagnostics. Is's raised when a line starting with `(` is encountered, which is syntactically parsed as a function call on the previous line.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"no-unknown":{"default":"None","description":"Enable diagnostics for cases in which the type cannot be inferred.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"not-yieldable":{"default":"None","description":"Enable diagnostics for calls to `coroutine.yield()` when it is not permitted.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"param-type-mismatch":{"default":"Opened","description":"Enable diagnostics for function calls where the type of a provided parameter does not match the type of the annotated function definition.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"redefined-local":{"default":"Opened","description":"Enable redefined local variable diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"redundant-parameter":{"default":"Any","description":"Enable redundant function parameter diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"redundant-return":{"default":"Opened","description":"Enable diagnostics for return statements which are not needed because the function would exit on its own.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"redundant-return-value":{"default":"Any","description":"Enable diagnostics for return statements which return an extra value which is not specified by a return annotation.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"redundant-value":{"default":"Any","description":"Enable the redundant values assigned diagnostics. It's raised during assignment operation, when the number of values is higher than the number of objects being assigned.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"return-type-mismatch":{"default":"Opened","description":"Enable diagnostics for return values whose type does not match the type declared in the corresponding return annotation.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"spell-check":{"default":"None","description":"Enable diagnostics for typos in strings.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"trailing-space":{"default":"Opened","description":"Enable trailing space diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unbalanced-assignments":{"default":"Any","description":"Enable diagnostics on multiple assignments if not all variables obtain a value (e.g., `local x,y = 1`).","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"undefined-doc-class":{"default":"Any","description":"Enable diagnostics for class annotations in which an undefined class is referenced.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"undefined-doc-name":{"default":"Any","description":"Enable diagnostics for type annotations referencing an undefined type or alias.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"undefined-doc-param":{"default":"Any","description":"Enable diagnostics for cases in which a parameter annotation is given without declaring the parameter in the function definition.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"undefined-env-child":{"default":"Any","description":"Enable undefined environment variable diagnostics. It's raised when `_ENV` table is set to a new literal table, but the used global variable is no longer present in the global environment.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"undefined-field":{"default":"Opened","description":"Enable diagnostics for cases in which an undefined field of a variable is read.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"undefined-global":{"default":"Any","description":"Enable undefined global variable diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unknown-cast-variable":{"default":"Any","description":"Enable diagnostics for casts of undefined variables.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unknown-diag-code":{"default":"Any","description":"Enable diagnostics in cases in which an unknown diagnostics code is entered.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unknown-operator":{"default":"Any","description":"Enable diagnostics for unknown operators.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unreachable-code":{"default":"Opened","description":"Enable diagnostics for unreachable code.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unused-function":{"default":"Opened","description":"Enable unused function diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unused-label":{"default":"Opened","description":"Enable unused label diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unused-local":{"default":"Opened","description":"Enable unused local variable diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"},"unused-vararg":{"default":"Opened","description":"Enable unused vararg diagnostics.","enum":["Any","Opened","None","Any!","Opened!","None!"],"type":"string"}},"scope":"resource","title":"neededFileStatus","type":"object"},"Lua.diagnostics.severity":{"additionalProperties":false,"markdownDescription":"Modify the diagnostic severity.\n\nEnd with `!` means override the group setting `diagnostics.groupSeverity`.\n","properties":{"ambiguity-1":{"default":"Warning","description":"Enable ambiguous operator precedence diagnostics. For example, the `num or 0 + 1` expression will be suggested `(num or 0) + 1` instead.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"assign-type-mismatch":{"default":"Warning","description":"Enable diagnostics for assignments in which the value's type does not match the type of the assigned variable.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"await-in-sync":{"default":"Warning","description":"Enable diagnostics for calls of asynchronous functions within a synchronous function.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"cast-local-type":{"default":"Warning","description":"Enable diagnostics for casts of local variables where the target type does not match the defined type.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"cast-type-mismatch":{"default":"Warning","description":"Enable diagnostics for casts where the target type does not match the initial type.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"circle-doc-class":{"default":"Warning","description":"TODO: Needs documentation","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"close-non-object":{"default":"Warning","description":"Enable diagnostics for attempts to close a variable with a non-object.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"code-after-break":{"default":"Hint","description":"Enable diagnostics for code placed after a break statement in a loop.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"codestyle-check":{"default":"Warning","description":"Enable diagnostics for incorrectly styled lines.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"count-down-loop":{"default":"Warning","description":"Enable diagnostics for `for` loops which will never reach their max/limit because the loop is incrementing instead of decrementing.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"deprecated":{"default":"Warning","description":"Enable diagnostics to highlight deprecated API.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"different-requires":{"default":"Warning","description":"Enable diagnostics for files which are required by two different paths.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"discard-returns":{"default":"Warning","description":"Enable diagnostics for calls of functions annotated with `---@nodiscard` where the return values are ignored.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"doc-field-no-class":{"default":"Warning","description":"Enable diagnostics to highlight a field annotation without a defining class annotation.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"duplicate-doc-alias":{"default":"Warning","description":"Enable diagnostics for a duplicated alias annotation name.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"duplicate-doc-field":{"default":"Warning","description":"Enable diagnostics for a duplicated field annotation name.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"duplicate-doc-param":{"default":"Warning","description":"Enable diagnostics for a duplicated param annotation name.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"duplicate-index":{"default":"Warning","description":"Enable duplicate table index diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"duplicate-set-field":{"default":"Warning","description":"Enable diagnostics for setting the same field in a class more than once.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"empty-block":{"default":"Hint","description":"Enable empty code block diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"global-element":{"default":"Warning","description":"Enable diagnostics to warn about global elements.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"global-in-nil-env":{"default":"Warning","description":"Enable cannot use global variables （ `_ENV` is set to `nil`） diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"incomplete-signature-doc":{"default":"Warning","description":"Incomplete @param or @return annotations for functions.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"inject-field":{"default":"Warning","description":"TODO: Needs documentation","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"invisible":{"default":"Warning","description":"Enable diagnostics for accesses to fields which are invisible.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"lowercase-global":{"default":"Information","description":"Enable lowercase global variable definition diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"missing-fields":{"default":"Warning","description":"TODO: Needs documentation","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"missing-global-doc":{"default":"Warning","description":"Missing annotations for globals! Global functions must have a comment and annotations for all parameters and return values.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"missing-local-export-doc":{"default":"Warning","description":"Missing annotations for exported locals! Exported local functions must have a comment and annotations for all parameters and return values.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"missing-parameter":{"default":"Warning","description":"Enable diagnostics for function calls where the number of arguments is less than the number of annotated function parameters.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"missing-return":{"default":"Warning","description":"Enable diagnostics for functions with return annotations which have no return statement.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"missing-return-value":{"default":"Warning","description":"Enable diagnostics for return statements without values although the containing function declares returns.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"name-style-check":{"default":"Warning","description":"Enable diagnostics for name style.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"need-check-nil":{"default":"Warning","description":"Enable diagnostics for variable usages if `nil` or an optional (potentially `nil`) value was assigned to the variable before.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"newfield-call":{"default":"Warning","description":"Enable newfield call diagnostics. It is raised when the parenthesis of a function call appear on the following line when defining a field in a table.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"newline-call":{"default":"Warning","description":"Enable newline call diagnostics. Is's raised when a line starting with `(` is encountered, which is syntactically parsed as a function call on the previous line.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"no-unknown":{"default":"Warning","description":"Enable diagnostics for cases in which the type cannot be inferred.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"not-yieldable":{"default":"Warning","description":"Enable diagnostics for calls to `coroutine.yield()` when it is not permitted.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"param-type-mismatch":{"default":"Warning","description":"Enable diagnostics for function calls where the type of a provided parameter does not match the type of the annotated function definition.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"redefined-local":{"default":"Hint","description":"Enable redefined local variable diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"redundant-parameter":{"default":"Warning","description":"Enable redundant function parameter diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"redundant-return":{"default":"Hint","description":"Enable diagnostics for return statements which are not needed because the function would exit on its own.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"redundant-return-value":{"default":"Warning","description":"Enable diagnostics for return statements which return an extra value which is not specified by a return annotation.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"redundant-value":{"default":"Warning","description":"Enable the redundant values assigned diagnostics. It's raised during assignment operation, when the number of values is higher than the number of objects being assigned.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"return-type-mismatch":{"default":"Warning","description":"Enable diagnostics for return values whose type does not match the type declared in the corresponding return annotation.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"spell-check":{"default":"Information","description":"Enable diagnostics for typos in strings.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"trailing-space":{"default":"Hint","description":"Enable trailing space diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unbalanced-assignments":{"default":"Warning","description":"Enable diagnostics on multiple assignments if not all variables obtain a value (e.g., `local x,y = 1`).","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"undefined-doc-class":{"default":"Warning","description":"Enable diagnostics for class annotations in which an undefined class is referenced.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"undefined-doc-name":{"default":"Warning","description":"Enable diagnostics for type annotations referencing an undefined type or alias.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"undefined-doc-param":{"default":"Warning","description":"Enable diagnostics for cases in which a parameter annotation is given without declaring the parameter in the function definition.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"undefined-env-child":{"default":"Information","description":"Enable undefined environment variable diagnostics. It's raised when `_ENV` table is set to a new literal table, but the used global variable is no longer present in the global environment.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"undefined-field":{"default":"Warning","description":"Enable diagnostics for cases in which an undefined field of a variable is read.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"undefined-global":{"default":"Warning","description":"Enable undefined global variable diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unknown-cast-variable":{"default":"Warning","description":"Enable diagnostics for casts of undefined variables.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unknown-diag-code":{"default":"Warning","description":"Enable diagnostics in cases in which an unknown diagnostics code is entered.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unknown-operator":{"default":"Warning","description":"Enable diagnostics for unknown operators.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unreachable-code":{"default":"Hint","description":"Enable diagnostics for unreachable code.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unused-function":{"default":"Hint","description":"Enable unused function diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unused-label":{"default":"Hint","description":"Enable unused label diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unused-local":{"default":"Hint","description":"Enable unused local variable diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"},"unused-vararg":{"default":"Hint","description":"Enable unused vararg diagnostics.","enum":["Error","Warning","Information","Hint","Error!","Warning!","Information!","Hint!"],"type":"string"}},"scope":"resource","title":"severity","type":"object"},"Lua.diagnostics.unusedLocalExclude":{"default":[],"items":{"type":"string"},"markdownDescription":"Do not diagnose `unused-local` when the variable name matches the following pattern.","scope":"resource","type":"array"},"Lua.diagnostics.workspaceDelay":{"default":3000,"markdownDescription":"Latency (milliseconds) for workspace diagnostics.","scope":"resource","type":"integer"},"Lua.diagnostics.workspaceEvent":{"default":"OnSave","enum":["OnChange","OnSave","None"],"markdownDescription":"Set the time to trigger workspace diagnostics.","markdownEnumDescriptions":["Trigger workspace diagnostics when the file is changed.","Trigger workspace diagnostics when the file is saved.","Disable workspace diagnostics."],"scope":"resource","type":"string"},"Lua.diagnostics.workspaceRate":{"default":100,"markdownDescription":"Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also reduces the speed of workspace diagnostics. The diagnosis of the file you are currently editing is always done at full speed and is not affected by this setting.","scope":"resource","type":"integer"},"Lua.doc.packageName":{"default":[],"items":{"type":"string"},"markdownDescription":"Treat specific field names as package, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are package, witch can only be accessed in the file where the definition is located.","scope":"resource","type":"array"},"Lua.doc.privateName":{"default":[],"items":{"type":"string"},"markdownDescription":"Treat specific field names as private, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are private, witch can only be accessed in the class where the definition is located.","scope":"resource","type":"array"},"Lua.doc.protectedName":{"default":[],"items":{"type":"string"},"markdownDescription":"Treat specific field names as protected, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are protected, witch can only be accessed in the class where the definition is located and its subclasses.","scope":"resource","type":"array"},"Lua.format.defaultConfig":{"additionalProperties":false,"default":{},"markdownDescription":"The default format configuration. Has a lower priority than `.editorconfig` file in the workspace.\nRead [formatter docs](https://github.com/CppCXY/EmmyLuaCodeStyle/tree/master/docs) to learn usage.\n","patternProperties":{".*":{"default":"","type":"string"}},"scope":"resource","title":"defaultConfig","type":"object"},"Lua.format.enable":{"default":true,"markdownDescription":"Enable code formatter.","scope":"resource","type":"boolean"},"Lua.hint.arrayIndex":{"default":"Auto","enum":["Enable","Auto","Disable"],"markdownDescription":"Show hints of array index when constructing a table.","markdownEnumDescriptions":["Show hints in all tables.","Show hints only when the table is greater than 3 items, or the table is a mixed table.","Disable hints of array index."],"scope":"resource","type":"string"},"Lua.hint.await":{"default":true,"markdownDescription":"If the called function is marked `---@async`, prompt `await` at the call.","scope":"resource","type":"boolean"},"Lua.hint.enable":{"default":false,"markdownDescription":"Enable inlay hint.","scope":"resource","type":"boolean"},"Lua.hint.paramName":{"default":"All","enum":["All","Literal","Disable"],"markdownDescription":"Show hints of parameter name at the function call.","markdownEnumDescriptions":["All types of parameters are shown.","Only literal type parameters are shown.","Disable parameter hints."],"scope":"resource","type":"string"},"Lua.hint.paramType":{"default":true,"markdownDescription":"Show type hints at the parameter of the function.","scope":"resource","type":"boolean"},"Lua.hint.semicolon":{"default":"SameLine","enum":["All","SameLine","Disable"],"markdownDescription":"If there is no semicolon at the end of the statement, display a virtual semicolon.","markdownEnumDescriptions":["All statements display virtual semicolons.","When two statements are on the same line, display a semicolon between them.","Disable virtual semicolons."],"scope":"resource","type":"string"},"Lua.hint.setType":{"default":false,"markdownDescription":"Show hints of type at assignment operation.","scope":"resource","type":"boolean"},"Lua.hover.enable":{"default":true,"markdownDescription":"Enable hover.","scope":"resource","type":"boolean"},"Lua.hover.enumsLimit":{"default":5,"markdownDescription":"When the value corresponds to multiple types, limit the number of types displaying.","scope":"resource","type":"integer"},"Lua.hover.expandAlias":{"default":true,"markdownDescription":"Whether to expand the alias. For example, expands `---@alias myType boolean|number` appears as `boolean|number`, otherwise it appears as `myType'.\n","scope":"resource","type":"boolean"},"Lua.hover.previewFields":{"default":50,"markdownDescription":"When hovering to view a table, limits the maximum number of previews for fields.","scope":"resource","type":"integer"},"Lua.hover.viewNumber":{"default":true,"markdownDescription":"Hover to view numeric content (only if literal is not decimal).","scope":"resource","type":"boolean"},"Lua.hover.viewString":{"default":true,"markdownDescription":"Hover to view the contents of a string (only if the literal contains an escape character).","scope":"resource","type":"boolean"},"Lua.hover.viewStringMax":{"default":1000,"markdownDescription":"The maximum length of a hover to view the contents of a string.","scope":"resource","type":"integer"},"Lua.misc.executablePath":{"default":"","markdownDescription":"Specify the executable path in VSCode.","scope":"resource","type":"string"},"Lua.misc.parameters":{"default":[],"items":{"type":"string"},"markdownDescription":"[Command line parameters](https://github.com/LuaLS/lua-telemetry-server/tree/master/method) when starting the language server in VSCode.","scope":"resource","type":"array"},"Lua.nameStyle.config":{"additionalProperties":false,"default":{},"markdownDescription":"Set name style config","patternProperties":{".*":{"type":["string","array"]}},"scope":"resource","title":"config","type":"object"},"Lua.runtime.builtin":{"additionalProperties":false,"markdownDescription":"Adjust the enabled state of the built-in library. You can disable (or redefine) the non-existent library according to the actual runtime environment.\n\n* `default`: Indicates that the library will be enabled or disabled according to the runtime version\n* `enable`: always enable\n* `disable`: always disable\n","properties":{"basic":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"bit":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"bit32":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"builtin":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"coroutine":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"debug":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"ffi":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"io":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"jit":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"jit.profile":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"jit.util":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"math":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"os":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"package":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"string":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"string.buffer":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"table":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"table.clear":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"table.new":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"},"utf8":{"default":"default","description":"TODO: Needs documentation","enum":["default","enable","disable"],"type":"string"}},"scope":"resource","title":"builtin","type":"object"},"Lua.runtime.fileEncoding":{"default":"utf8","enum":["utf8","ansi","utf16le","utf16be"],"markdownDescription":"File encoding. The `ansi` option is only available under the `Windows` platform.","markdownEnumDescriptions":["TODO: Needs documentation","TODO: Needs documentation","TODO: Needs documentation","TODO: Needs documentation"],"scope":"resource","type":"string"},"Lua.runtime.meta":{"default":"${version} ${language} ${encoding}","markdownDescription":"Format of the directory name of the meta files.","scope":"resource","type":"string"},"Lua.runtime.nonstandardSymbol":{"default":[],"items":{"enum":["//","/**/","`","+=","-=","*=","/=","%=","^=","//=","|=","&=","<<=",">>=","||","&&","!","!=","continue"],"type":"string"},"markdownDescription":"Supports non-standard symbols. Make sure that your runtime environment supports these symbols.","scope":"resource","type":"array"},"Lua.runtime.path":{"default":["?.lua","?/init.lua"],"items":{"type":"string"},"markdownDescription":"When using `require`, how to find the file based on the input name.\nSetting this config to `?/init.lua` means that when you enter `require 'myfile'`, `${workspace}/myfile/init.lua` will be searched from the loaded files.\nif `runtime.pathStrict` is `false`, `${workspace}/**/myfile/init.lua` will also be searched.\nIf you want to load files outside the workspace, you need to set `Lua.workspace.library` first.\n","scope":"resource","type":"array"},"Lua.runtime.pathStrict":{"default":false,"markdownDescription":"When enabled, `runtime.path` will only search the first level of directories, see the description of `runtime.path`.","scope":"resource","type":"boolean"},"Lua.runtime.plugin":{"default":"","markdownDescription":"Plugin path. Please read [wiki](https://luals.github.io/wiki/plugins) to learn more.","scope":"resource","type":"string"},"Lua.runtime.pluginArgs":{"default":[],"items":{"type":"string"},"markdownDescription":"Additional arguments for the plugin.","scope":"resource","type":"array"},"Lua.runtime.special":{"additionalProperties":false,"default":{},"markdownDescription":"The custom global variables are regarded as some special built-in variables, and the language server will provide special support\nThe following example shows that 'include' is treated as' require '.\n```json\n\"Lua.runtime.special\" : {\n    \"include\" : \"require\"\n}\n```\n","patternProperties":{".*":{"default":"require","enum":["_G","rawset","rawget","setmetatable","require","dofile","loadfile","pcall","xpcall","assert","error","type","os.exit"],"type":"string"}},"scope":"resource","title":"special","type":"object"},"Lua.runtime.unicodeName":{"default":false,"markdownDescription":"Allows Unicode characters in name.","scope":"resource","type":"boolean"},"Lua.runtime.version":{"default":"Lua 5.4","enum":["Lua 5.1","Lua 5.2","Lua 5.3","Lua 5.4","LuaJIT"],"markdownDescription":"Lua runtime version.","markdownEnumDescriptions":["TODO: Needs documentation","TODO: Needs documentation","TODO: Needs documentation","TODO: Needs documentation","TODO: Needs documentation"],"scope":"resource","type":"string"},"Lua.semantic.annotation":{"default":true,"markdownDescription":"Semantic coloring of type annotations.","scope":"resource","type":"boolean"},"Lua.semantic.enable":{"default":true,"markdownDescription":"Enable semantic color. You may need to set `editor.semanticHighlighting.enabled` to `true` to take effect.","scope":"resource","type":"boolean"},"Lua.semantic.keyword":{"default":false,"markdownDescription":"Semantic coloring of keywords/literals/operators. You only need to enable this feature if your editor cannot do syntax coloring.","scope":"resource","type":"boolean"},"Lua.semantic.variable":{"default":true,"markdownDescription":"Semantic coloring of variables/fields/parameters.","scope":"resource","type":"boolean"},"Lua.signatureHelp.enable":{"default":true,"markdownDescription":"Enable signature help.","scope":"resource","type":"boolean"},"Lua.spell.dict":{"default":[],"items":{"type":"string"},"markdownDescription":"Custom words for spell checking.","scope":"resource","type":"array"},"Lua.type.castNumberToInteger":{"default":true,"markdownDescription":"Allowed to assign the `number` type to the `integer` type.","scope":"resource","type":"boolean"},"Lua.type.weakNilCheck":{"default":false,"markdownDescription":"When checking the type of union type, ignore the `nil` in it.\n\nWhen this setting is `false`, the `number|nil` type cannot be assigned to the `number` type. It can be with `true`.\n","scope":"resource","type":"boolean"},"Lua.type.weakUnionCheck":{"default":false,"markdownDescription":"Once one subtype of a union type meets the condition, the union type also meets the condition.\n\nWhen this setting is `false`, the `number|boolean` type cannot be assigned to the `number` type. It can be with `true`.\n","scope":"resource","type":"boolean"},"Lua.typeFormat.config":{"additionalProperties":false,"markdownDescription":"Configures the formatting behavior while typing Lua code.","properties":{"auto_complete_end":{"default":"true","description":"Controls if `end` is automatically completed at suitable positions.","type":"string"},"auto_complete_table_sep":{"default":"true","description":"Controls if a separator is automatically appended at the end of a table declaration.","type":"string"},"format_line":{"default":"true","description":"Controls if a line is formatted at all.","type":"string"}},"scope":"resource","title":"config","type":"object"},"Lua.window.progressBar":{"default":true,"markdownDescription":"Show progress bar in status bar.","scope":"resource","type":"boolean"},"Lua.window.statusBar":{"default":true,"markdownDescription":"Show extension status in status bar.","scope":"resource","type":"boolean"},"Lua.workspace.checkThirdParty":{"markdownDescription":"Automatic detection and adaptation of third-party libraries, currently supported libraries are:\n\n* OpenResty\n* Cocos4.0\n* LÖVE\n* LÖVR\n* skynet\n* Jass\n","scope":"resource","type":["string","boolean"]},"Lua.workspace.ignoreDir":{"default":[".vscode"],"items":{"type":"string"},"markdownDescription":"Ignored files and directories (Use `.gitignore` grammar).","scope":"resource","type":"array"},"Lua.workspace.ignoreSubmodules":{"default":true,"markdownDescription":"Ignore submodules.","scope":"resource","type":"boolean"},"Lua.workspace.library":{"default":[],"items":{"type":"string"},"markdownDescription":"In addition to the current workspace, which directories will load files from. The files in these directories will be treated as externally provided code libraries, and some features (such as renaming fields) will not modify these files.","scope":"resource","type":"array"},"Lua.workspace.maxPreload":{"default":5000,"markdownDescription":"Max preloaded files.","scope":"resource","type":"integer"},"Lua.workspace.preloadFileSize":{"default":500,"markdownDescription":"Skip files larger than this value (KB) when preloading.","scope":"resource","type":"integer"},"Lua.workspace.useGitIgnore":{"default":true,"markdownDescription":"Ignore files list in `.gitignore` .","scope":"resource","type":"boolean"},"Lua.workspace.userThirdParty":{"default":[],"items":{"type":"string"},"markdownDescription":"Add private third-party library configuration file paths here, please refer to the built-in [configuration file path](https://github.com/LuaLS/lua-language-server/tree/master/meta/3rd)","scope":"resource","type":"array"}},"title":"Lua","type":"object"},"configurationDefaults":{"[lua]":{"editor.quickSuggestions":{"comments":"inline","other":"on","strings":"on"},"editor.semanticHighlighting.enabled":true}},"jsonValidation":[{"fileMatch":[".luarc.json",".luarc.jsonc"],"url":"./setting/schema.json"}],"languages":[{"filenames":[".luarc.json","config.json"],"id":"jsonc"}],"menus":{"editor/context":[{"command":"lua.exportDocument","group":"z_commands","when":"resourceLangId == lua"},{"command":"lua.addon_manager.open","group":"z_commands","when":"resourceLangId == lua"},{"command":"lua.reloadFFIMeta","group":"z_commands","when":"resourceLangId == lua"}]},"semanticTokenScopes":[{"language":"lua","scopes":{"class":["support.class.lua"],"class.declaration":["support.class.lua"],"comment.documentation":["storage.type.annotation.lua"],"event.static":["support.class.lua"],"function":["support.function.any-method.lua"],"function.declaration":["entity.name.function.lua"],"function.defaultLibrary":["support.function.lua"],"function.static":["entity.name.function.lua"],"keyword":["keyword.control.lua"],"keyword.async":["entity.name.tag.lua"],"keyword.declaration":["keyword.local.lua"],"keyword.documentation":["storage.type.annotation.lua"],"keyword.readonly":["constant.language.lua"],"macro":["variable.lua"],"method":["entity.name.function.lua"],"method.declaration":["entity.name.function.lua"],"number":["constant.numeric.float.lua"],"number.static":["constant.numeric.integer.lua"],"operator":["keyword.operator.lua"],"parameter.declaration":["variable.parameter.lua"],"property":["entity.other.attribute.lua"],"property.declaration":["entity.other.property.lua"],"string":["string.lua"],"string.deprecated":["invalid.illegal.character.escape.lua"],"string.modification":["constant.character.escape.lua"],"struct":["string.tag.lua"],"struct.declaration":["string.tag.lua"],"type":["support.type.lua"],"type.modification":["storage.type.generic.lua"],"type.readonly":["storage.type.self.lua"],"typeParameter":["string.tag.lua"],"variable":["variable.other.lua"],"variable.abstract":["variable.other.constant.lua"],"variable.declaration":["variable.other.lua"],"variable.defaultLibrary":["support.constant.lua"],"variable.definition":["variable.language.self.lua"],"variable.global":["variable.global.lua"],"variable.readonly":["variable.other.constant.lua"]}}]},"description":"Lua Language Server coded by Lua","displayName":"Lua","engines":{"vscode":"^1.67.0"},"icon":"images/logo.png","keywords":["Lua","IntelliSense","EmmyLua"],"license":"MIT","main":"./client/out/extension","name":"lua","publisher":"sumneko","repository":{"type":"git","url":"https://github.com/LuaLS/lua-language-server"},"sponsor":{"url":"https://github.com/LuaLS/lua-language-server/issues/484"},"version":"3.7.3"},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/sumneko.lua-3.7.3-linux-x64","scheme":"file"},"isBuiltin":false,"targetPlatform":"linux-x64","metadata":{"id":"3a15b5a7-be12-47e3-8445-88ee3eabc8b2","publisherId":"fb626675-24cf-4881-8c13-b465f29bec2f","publisherDisplayName":"sumneko","targetPlatform":"linux-x64","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702352003619,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"actboy168.lua-debug","uuid":"e5c7d4c8-9eac-4eb8-95fa-ba6865456277"},"manifest":{"activationEvents":["onDebugInitialConfigurations","onDebugDynamicConfigurations","onDebugResolve:lua"],"author":{"name":"actboy168"},"bugs":{"url":"https://github.com/actboy168/lua-debug/issues"},"capabilities":{"untrustedWorkspaces":{"description":"Debugging is disabled in Restricted Mode.","supported":false}},"categories":["Debuggers"],"contributes":{"breakpoints":[{"language":"lua"},{"language":"html"}],"commands":[{"command":"extension.lua-debug.runEditorContents","icon":"$(play)","title":"Run File"},{"command":"extension.lua-debug.debugEditorContents","icon":"$(debug-alt-small)","title":"Debug File"},{"command":"extension.lua-debug.showIntegerAsDec","title":"Show as Dec"},{"command":"extension.lua-debug.showIntegerAsHex","title":"Show as Hex"}],"configuration":{"properties":{"lua.debug.settings.address":{"description":"Debugger address.\n1. IPv4 e.g. `127.0.0.1:4278`\n2. IPv6 e.g. `[::1]:4278`\n3. Unix domain socket e.g. `@c:\\\\unix.sock`","type":"string"},"lua.debug.settings.console":{"default":"integratedTerminal","description":"The specified console to launch the program.","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code debug console (input stream not supported).","VS Code integrated terminal.","External terminal that can be configured in user settings."],"type":"string"},"lua.debug.settings.cpath":{"default":"${workspaceFolder}/?.so","description":"Search path for native libraries","type":["string","array","null"]},"lua.debug.settings.luaArch":{"default":"x86_64","description":"Default lua arch.","enum":["x86_64"],"type":"string"},"lua.debug.settings.luaVersion":{"default":"lua54","description":"Default lua version.","enum":["lua51","lua52","lua53","lua54","lua-latest","luajit"],"type":"string"},"lua.debug.settings.path":{"default":"${workspaceFolder}/?.lua","description":"Search path for Lua programs","type":["string","array","null"]},"lua.debug.variables.showIntegerAsHex":{"default":false,"description":"Show integer as hex.","type":"boolean"}}},"debuggers":[{"configurationAttributes":{"attach":{"properties":{"address":{"markdownDescription":"Debugger address.\n1. IPv4 e.g. `127.0.0.1:4278`\n2. IPv6 e.g. `[::1]:4278`\n3. Unix domain socket e.g. `@c:\\\\unix.sock`","type":"string"},"client":{"default":true,"markdownDescription":"Choose whether to `connect` or `listen`.","type":"boolean"},"inject":{"default":"gdb","enum":["none","lldb","gdb"],"markdownDescription":"How to inject debugger.","type":"string"},"inject_executable":{"markdownDescription":"inject executable path","type":["string","null"]},"luaVersion":{"default":"lua54","enum":["lua51","lua52","lua53","lua54","lua-latest","luajit"],"markdownDescription":"Default lua version.","type":"string"},"outputCapture":{"default":[],"items":{"enum":["print","io.write","stdout","stderr"]},"markdownDescription":"From where to capture output messages: print or stdout/stderr streams.","type":"array"},"pathFormat":{"default":"path","enum":["path","linuxpath"],"markdownDescription":"Path format","type":"string"},"skipFiles":{"default":[],"items":{"type":"string"},"markdownDescription":"An array of glob patterns for files to skip when debugging.","type":"array"},"sourceFormat":{"default":"path","enum":["path","string","linuxpath"],"markdownDescription":"Source format","type":"string"},"sourceMaps":{"default":[["./*","${workspaceFolder}/*"]],"markdownDescription":"The source path of the remote host and the source path of local.","type":"array"},"stopOnEntry":{"default":false,"markdownDescription":"Automatically stop after entry.","type":"boolean"},"stopOnThreadEntry":{"default":true,"markdownDescription":"Automatically stop after thread entry.","type":"boolean"}}},"launch":{"properties":{"address":{"markdownDescription":"Debugger address.\n1. IPv4 e.g. `127.0.0.1:4278`\n2. IPv6 e.g. `[::1]:4278`\n3. Unix domain socket e.g. `@c:\\\\unix.sock`","type":"string"},"arg":{"default":[],"markdownDescription":"Command line argument, arg[1] ... arg[n]","type":"array"},"arg0":{"default":[],"markdownDescription":"Command line argument, arg[-n] ... arg[0]","type":["string","array"]},"client":{"default":true,"markdownDescription":"Choose whether to `connect` or `listen`.","type":"boolean"},"console":{"default":"integratedTerminal","enum":["internalConsole","integratedTerminal","externalTerminal"],"enummarkdownDescriptions":["VS Code debug console (input stream not supported).","VS Code integrated terminal.","External terminal that can be configured in user settings."],"markdownDescription":"The specified console to launch the program.","type":"string"},"cpath":{"default":"${workspaceFolder}/?.so","markdownDescription":"Search path for native libraries","type":["string","array","null"]},"cwd":{"default":"${workspaceFolder}","markdownDescription":"Working directory at program startup","type":["string","null"]},"env":{"additionalProperties":{"type":["string","null"]},"default":{"PATH":"${workspaceFolder}"},"markdownDescription":"Environment variables passed to the program. The value `null` removes thevariable from the environment.","type":"object"},"inject":{"default":"gdb","enum":["none","lldb","gdb"],"markdownDescription":"How to inject debugger.","type":"string"},"inject_executable":{"markdownDescription":"inject executable path","type":["string","null"]},"luaArch":{"default":"x86_64","enum":["x86_64"],"markdownDescription":"Default lua arch.","type":"string"},"luaVersion":{"default":"lua54","enum":["lua51","lua52","lua53","lua54","lua-latest","luajit"],"markdownDescription":"Default lua version.","type":"string"},"luaexe":{"default":"${workspaceFolder}/lua","markdownDescription":"Absolute path to the lua exe.","type":"string"},"outputCapture":{"default":[],"items":{"enum":["print","io.write","stdout","stderr"]},"markdownDescription":"From where to capture output messages: print or stdout/stderr streams.","type":"array"},"path":{"default":"${workspaceFolder}/?.lua","markdownDescription":"Search path for Lua programs","type":["string","array","null"]},"pathFormat":{"default":"path","enum":["path","linuxpath"],"markdownDescription":"Path format","type":"string"},"program":{"default":"${workspaceFolder}/main.lua","markdownDescription":"Lua program to debug - set this to the path of the script","type":"string"},"runtimeArgs":{"default":"${workspaceFolder}/main.lua","markdownDescription":"Arguments passed to the runtime executable.","type":["string","array","null"]},"runtimeExecutable":{"default":"${workspaceFolder}/lua","markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime availableon the PATH.","type":["string","null"]},"skipFiles":{"default":[],"items":{"type":"string"},"markdownDescription":"An array of glob patterns for files to skip when debugging.","type":"array"},"sourceFormat":{"default":"path","enum":["path","string","linuxpath"],"markdownDescription":"Source format","type":"string"},"sourceMaps":{"default":[["./*","${workspaceFolder}/*"]],"markdownDescription":"The source path of the remote host and the source path of local.","type":"array"},"stopOnEntry":{"default":false,"markdownDescription":"Automatically stop after entry.","type":"boolean"},"stopOnThreadEntry":{"default":true,"markdownDescription":"Automatically stop after thread entry.","type":"boolean"}}}},"configurationSnippets":[{"body":{"arg":[],"name":"${1:launch}","program":"^\"\\${workspaceFolder}/${2:main.lua}\"","request":"launch","stopOnEntry":true,"type":"lua"},"description":"A new configuration for launching a lua debug program","label":"Lua Debug: Launch Script"},{"body":{"address":"127.0.0.1:4278","name":"${1:attach}","request":"attach","stopOnEntry":true,"type":"lua"},"description":"A new configuration for attaching a lua debug program","label":"Lua Debug: Attach"}],"label":"Lua Debug","languages":["lua"],"type":"lua"}],"menus":{"debug/variables/context":[{"command":"extension.lua-debug.showIntegerAsDec","group":"1_view","when":"debugConfigurationType == 'lua' && debugProtocolVariableMenuContext == 'integer/hex'"},{"command":"extension.lua-debug.showIntegerAsHex","group":"1_view","when":"debugConfigurationType == 'lua' && debugProtocolVariableMenuContext == 'integer/dec'"}],"editor/title/run":[{"command":"extension.lua-debug.runEditorContents","when":"resourceLangId == lua"},{"command":"extension.lua-debug.debugEditorContents","when":"resourceLangId == lua"}]}},"description":"VSCode debugger extension for Lua","displayName":"Lua Debug","engines":{"vscode":"^1.75.0"},"extensionKind":["workspace"],"icon":"images/logo.png","keywords":["lua","debug","debuggers"],"main":"./js/extension.js","name":"lua-debug","private":true,"publisher":"actboy168","repository":{"type":"git","url":"https://github.com/actboy168/lua-debug"},"version":"2.0.4"},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/actboy168.lua-debug-2.0.4-linux-x64","scheme":"file"},"isBuiltin":false,"targetPlatform":"linux-x64","metadata":{"id":"e5c7d4c8-9eac-4eb8-95fa-ba6865456277","publisherId":"77f6b700-85ff-429b-aa2d-8b82afbcf8db","publisherDisplayName":"actboy168","targetPlatform":"linux-x64","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702352011393,"pinned":false,"preRelease":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"koihik.vscode-lua-format","uuid":"e16d817c-eb8b-462b-86c5-fe97ff51875c"},"manifest":{"name":"vscode-lua-format","displayName":"vscode-lua-format","description":"Reformats your Lua source code.","version":"1.3.8","homepage":"https://github.com/Koihik/LuaFormatter","icon":"lua-logo.png","repository":{"type":"git","url":"https://github.com/Koihik/vscode-lua-format.git"},"keywords":["Lua","format","beautifier","pretty printer"],"bugs":{"url":"https://github.com/Koihik/LuaFormatter/issues"},"license":"Apache License Version 2.0","publisher":"Koihik","engines":{"vscode":"^1.32.0"},"categories":["Formatters"],"activationEvents":["onLanguage:lua"],"main":"./out/extension","contributes":{"configuration":{"title":"vscode-lua-format configuration","properties":{"vscode-lua-format.configPath":{"type":"string","default":"","description":"Specifies the style config file."},"vscode-lua-format.binaryPath":{"type":"string","default":"","description":"Specifies alternative lua-format binary path."}}}},"scripts":{"vscode:prepublish":"npm run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","lint":"eslint . --ext .ts,.tsx"},"devDependencies":{"@types/node":"^12.12.0","@typescript-eslint/eslint-plugin":"^3.0.2","@typescript-eslint/parser":"^3.0.2","eslint":"^7.1.0","typescript":"^3.9.3","@types/vscode":"^1.32.0"}},"location":{"$mid":1,"path":"/home/cyd/.vscode-oss/extensions/koihik.vscode-lua-format-1.3.8-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","metadata":{"id":"e16d817c-eb8b-462b-86c5-fe97ff51875c","publisherId":"e5143899-1cbf-4081-a543-9d5398a42ca5","publisherDisplayName":"Koihik","targetPlatform":"universal","updated":false,"isPreReleaseVersion":false,"installedTimestamp":1702352018836,"pinned":false,"preRelease":false},"isValid":true,"validations":[]}]}